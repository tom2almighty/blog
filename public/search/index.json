[{"content":"前言： 通常使用静态博客写文章比较麻烦，上传图片也不方便，最近发现使用 Obsidian 配合 Shell commands 插件可以快速创建文章并预览发布，配合 Image auto upload Plugin 还可以快捷上传图片到图床。 需要用到的工具：\nObsidian Picgo 或者 Piclist 软件 快捷发布文章 首先下载好 Obsidian 并且开启第三方插件，在插件市场下载三个插件：\nImage auto upload Plugin Shell commands Commander 然后在博客文章所在目录打开项目，即可看到所有博客文章。接下来通过 Shell commands 插件配置文章新建、预览、发布。\n原理很简单，就是通过插件调用 CMD 程序，使用命令新建发布文章，然后通过 Commander 将命令绑定到 Obsidian 左侧快捷键，这样只需要点击对应的俺按钮即可快速运行命令。\n创建命令 详细步骤以 新建文章 命令为参考，其余命令步骤相同。\n设置工作目录：首先进入插件设置页面，选择 Environments 选项卡，在 Working Directiory 处输入自己博客的根目录。 新建命令：首先打开 Shell commands 插件设置，点击 New shell command，新建一个命令，输入命令 hugo new post/{{_post_title}}.md 。 设置别名：点击齿轮图标可以进入命令设置页面，在 Alias 处输入命名别名，输入 新建文章 ，可以自定义。 选择 Preactions： 在 Preactions 界面 Prompt 选项选择 Create a new prompt ，Prompt title 写 新建文章 ，然后点击 New prompt field，Field lable 设置为 请输入文章标题：，这个是文章运行前的提示，然后 target value 处选择 create a new custom variable，在 Variable name 处填写 post_title ，点击创建，最终值应该为为 {{_post_title}}，完成后点击创建，效果参考下图。接着在 Preaction 页面选择新创建的 Prompt 即可。 按照同样的步骤再创建预览文章、发布文章、停止 Hugo 进程几个命令。其中发布文章还需要创建新的 Prompt ，预览文章和停止进程仅需要输入命令即可。具体的命令和参数如下：\n1 2 3 4 5 6 7 8 9 10 11 12 # 新建文章命令 hugo new post/{{_post_title}}.md # 新建文章 Prompt Variable 注意输入时仅需要输入 `post_title` {{_post_title}} # 文章预览命令 hugo server --navigateToChanged --buildDrafts -p 5678 \u0026amp; start chrome http://localhost:5678 # 发布文章命令 git add . \u0026amp; git commit -m \u0026#34;{{_comment}}\u0026#34; \u0026amp; git push -u origin master # 发布文章 Prompt Variable 注意输入时仅需要输入 `comment` {{_comment}} # 停止 Hugo 进程命令 taskkill /f /t /im hugo.exe 注意： 停止进程命令需要在命令设置页面的 Events 选项卡下将 Obsidian quits 打勾，即退出应用时执行。\n如果使用的是 Mac 那么命令连接符需要使用 \u0026amp;\u0026amp;，如果使用 Windows 的 Powershell ，命令连接符需要使用 ;。\n绑定左侧菜单 这一部分很简单，只需要打开 commander 插件设置，将命令绑定到自己想要的位置即可，这里以左侧菜单为例。 快捷上传图片 下载 Image auto upload Plugin 插件后，打开剪贴板上传，上传模式可以选择核心模式或者应用模式，应用模式需要打开应用才能正常上传，核心模式则需要输入 .exe 程序的路径，自行选择即可，图床的设置可以参考另一篇文章：Typora 配合 Piclist 快速上传图片并加速 参考 Hugo 发布流程 ","date":"2024-03-23T13:13:25+08:00","image":"https://pic.imgdb.cn/item/65fc06b79f345e8d0317dd50.webp","permalink":"http://localhost:5678/p/obsidian%E5%BF%AB%E9%80%9F%E5%8F%91%E5%B8%83hugo%E6%96%87%E7%AB%A0/","title":"Obsidian快速发布Hugo文章"},{"content":"前言：Webstack-Hugo 导航是基于纯静态的网址导航网站 webstack.cc 制作的 Hugo 主题，是一个基于 Hugo 的静态响应式网址导航主题。添加了天气及夜间模式，主要的配置信息都集成到了 config.toml，导航的各个信息都集成在 data/webstack.yml 文件中。\n部署 首先下载 Hugo 到本地，同时添加系统环境变量。找到一个文件夹，然后在文件夹下打开 Windows Terminal 创建一个新的 Hugo 站点。 1 hugo new site webstack-hugo 下载 Webstack-Hugo 源码，并解压到 ~/webstack-hugo/themes 文件夹下，名称更改为 Webstack-Hugo，将 ~/webstack-hugo/themes/Webstack-Hugo/exampleSite 文件夹下所有内容复制到 Hugo 站点根目录，并删除站点根目录的 hugo.toml 文件。 修改网站配置。 配置信息在 config.toml 文件中 导航信息在 data/webstack.yml 文件中 新建一个 Github 仓库，将 Hugo 站点根目录下的文件推送到仓库，然后在 Vercel 创建新的项目并导入仓库。 网站 icon 获取 可以通过 API 获取网站的图标，地址如下：\n1 https://api.iowen.cn/favicon/www.iowen.cn.png 将需要获取的网址替换到 favicon/ 后 .png 前，也可以通过在线工具箱：\n1 https://tool.cccyun.cc/favicon 问题修复 部署好站点后会发现网站样式无法正常加载，但是本地部署正常，解决方法：将 layouts/partials 文件夹下文件中 relURL 更换为 absURL 即可。\n在 Hugo 的模板中，relURL 用于将给定的路径转换为相对于网站根目录的 URL。如果你的 Hugo 网站部署在 https://example.com/blog/，则 {{ \u0026quot;css/styles.css\u0026quot; | relURL }} 将被渲染为 /blog/css/styles.css。\n然而，如果你的 Hugo 网站部署在域名的根目录（如 https://example.com/），则 relURL 可能会导致问题，因为它会在路径的开始处添加一个额外的 /。因此删除所有的 relURL 调用可以解决样式不显示的问题。\n另外，GitHub Pages 和 Cloudflare Pages 在处理静态资源路径时可能有所不同。GitHub Pages 默认将项目部署在子路径（如 https://username.github.io/repo/），而 Cloudflare Pages 可能将项目部署在域名的根目录。因此，如果 Hugo 模板使用了 relURL，则可能在 GitHub Pages 上出现问题，但在 Cloudflare Pages 上正常。\n去掉网格背景 如果不喜欢网格背景可以更改下面两个文件内代码解决：\n修改 assets/css/custom-style.css 文件内 109 行也就是倒数第二行代码的背景颜色代码： 1 2 - background-color: #d8d8d8; + background-color: #f9f9f9; 修改 layouts/partials/content_header.html 文件内第一行代码： 1 2 - \u0026lt;div class=\u0026#34;main-content flex-fill grid-bg\u0026#34;\u0026gt; + \u0026lt;div class=\u0026#34;main-content flex-fill\u0026#34;\u0026gt; 参考 页面样式和路径问题 Yelle 博客 ","date":"2024-03-21T21:47:43+08:00","image":"https://pic.imgdb.cn/item/65fc44b29f345e8d03b73249.webp","permalink":"http://localhost:5678/p/webstack-hugo/","title":"Webstack Hugo导航"},{"content":"前言：上一篇文章介绍了如何部署 Hugo 博客，这里针对 Stack 主题的修改做一些记录。\n修改全部来自参考文章，这里仅记录。\n准备：\n首先在博客根目录下的 assets 下创建一个名为 scss 的文件夹,然后在 scss 文件夹里创建一个名为 custom.scss 的文件,最终效果为~blog/assets/scss/custom.scss,创建好文件后，对于主题的大部分样式魔改都将写进这个 custom.scss，其中有很多冗余的代码。\n整体细节调整~\\blog\\assets\\scss\\custom.scss // 页面基本配色 :root { // 全局顶部边距 --main-top-padding: 30px; // 全局卡片圆角 --card-border-radius: 25px; // 标签云卡片圆角 --tag-border-radius: 8px; // 卡片间距 --section-separation: 40px; // 全局字体大小 --article-font-size: 1.8rem; // 行内代码背景色 --code-background-color: #f8f8f8; // 行内代码前景色 --code-text-color: #e96900; // 暗色模式下样式 \u0026amp;[data-scheme=\u0026#34;dark\u0026#34;] { // 行内代码背景色 --code-background-color: #ff6d1b17; // 行内代码前景色 --code-text-color: #e96900; // 暗黑模式下背景色 --body-background: #000; // 暗黑模式下卡片背景色 --card-background: hsl(225 13% 8% / 1); } } //------------------------------------------------------ // 修复引用块内容窄页面显示问题 a { word-break: break-all; } code { word-break: break-all; } //--------------------------------------------------- // 文章封面高度 .article-list article .article-image img { width: 100%; height: 200px !important; object-fit: cover; @include respond(md) { height: 250px !important; } @include respond(xl) { height: 285px !important; } } //-------------------------------------------------- // 文章内容图片圆角阴影 .article-page .main-article .article-content { img { max-width: 96% !important; height: auto !important; border-radius: 8px; } } //------------------------------------------------ // 文章内容引用块样式 .article-content { blockquote { border-left: 6px solid #358b9a1f !important; background: #3a97431f; } } // --------------------------------------- // 代码块样式修改 .highlight { max-width: 102% !important; background-color: var(--pre-background-color); padding: var(--card-padding); position: relative; border-radius: 20px; margin-left: -7px !important; margin-right: -12px; box-shadow: var(--shadow-l1) !important; \u0026amp;:hover { .copyCodeButton { opacity: 1; } } // keep Codeblocks LTR [dir=\u0026#34;rtl\u0026#34;] \u0026amp; { direction: ltr; } pre { margin: initial; padding: 0; margin: 0; width: auto; } } // light模式下的代码块样式调整 [data-scheme=\u0026#34;light\u0026#34;] .article-content .highlight { background-color: #fff9f3; } [data-scheme=\u0026#34;light\u0026#34;] .chroma { color: #ff6f00; background-color: #fff9f3cc; } //------------------------------------------- // 设置选中字体的区域背景颜色 //修改选中颜色 ::selection { color: #fff; background: #34495e; } a { text-decoration: none; color: var(--accent-color); \u0026amp;:hover { color: var(--accent-color-darker); } \u0026amp;.link { color: #4288b9ad; font-weight: 600; padding: 0 2px; text-decoration: none; cursor: pointer; \u0026amp;:hover { text-decoration: underline; } } } //------------------------------------------------- //文章封面高度更改 .article-list article .article-image img { width: 100%; height: 150px; object-fit: cover; @include respond(md) { height: 200px; } @include respond(xl) { height: 305px; } } //--------------------------------------------------- // 全局页面布局间距调整 .main-container { min-height: 100vh; align-items: flex-start; padding: 0 15px; gap: var(--section-separation); padding-top: var(--main-top-padding); @include respond(md) { padding: 0 37px; } } //-------------------------------------------------- //页面三栏宽度调整 .container { margin-left: auto; margin-right: auto; .left-sidebar { order: -3; max-width: var(--left-sidebar-max-width); } .right-sidebar { order: -1; max-width: var(--right-sidebar-max-width); /// Display right sidebar when min-width: lg @include respond(lg) { display: flex; } } \u0026amp;.extended { @include respond(md) { max-width: 1024px; --left-sidebar-max-width: 25%; --right-sidebar-max-width: 22% !important; } @include respond(lg) { max-width: 1280px; --left-sidebar-max-width: 20%; --right-sidebar-max-width: 30%; } @include respond(xl) { max-width: 1453px; //1536px; --left-sidebar-max-width: 15%; --right-sidebar-max-width: 25%; } } \u0026amp;.compact { @include respond(md) { --left-sidebar-max-width: 25%; max-width: 768px; } @include respond(lg) { max-width: 1024px; --left-sidebar-max-width: 20%; } @include respond(xl) { max-width: 1280px; } } } //------------------------------------------------------- //全局页面小图片样式微调 .article-list--compact article .article-image img { width: var(--image-size); height: var(--image-size); object-fit: cover; border-radius: 17%; } //---------------------------------------------------- //固定代码块的高度 .article-content { .highlight { padding: var(--card-padding); pre { width: auto; max-height: 20em; } } } //-------------------------------------------------- // 修改首页搜索框样式 .search-form.widget input { font-size: 1.5rem; padding: 44px 25px 19px; } 菜单栏调整为圆角 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 // ~\\blog\\assets\\scss\\custom.scss // -------------------------------- // 菜单栏样式 // 下拉菜单改圆角样式 .menu { padding-left: 0; list-style: none; flex-direction: column; overflow-x: hidden; overflow-y: scroll; flex-grow: 1; font-size: 1.6rem; background-color: var(--card-background); box-shadow: var(--shadow-l2); //改个阴影 display: none; margin: 0; //改为0 border-radius: 10px; //加个圆角 padding: 30px 30px; @include respond(xl) { padding: 15px 0; } \u0026amp;, .menu-bottom-section { gap: 30px; @include respond(xl) { gap: 25px; } } \u0026amp;.show { display: flex; } @include respond(md) { align-items: flex-end; display: flex; background-color: transparent; padding: 0; box-shadow: none; margin: 0; } li { position: relative; vertical-align: middle; padding: 0; @include respond(md) { width: 100%; } svg { stroke-width: 1.33; width: 20px; height: 20px; } a { height: 100%; display: inline-flex; align-items: center; color: var(--body-text-color); gap: var(--menu-icon-separation); } span { flex: 1; } \u0026amp;.current { a { color: var(--accent-color); font-weight: bold; } } } } 滚动条美化 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // ~\\blog\\assets\\scss\\custom.scss //------------------------------------------------ //将滚动条修改为圆角样式 //菜单滚动条美化 .menu::-webkit-scrollbar { display: none; } // 全局滚动条美化 html { ::-webkit-scrollbar { width: 20px; } ::-webkit-scrollbar-track { background-color: transparent; } ::-webkit-scrollbar-thumb { background-color: #d6dee1; border-radius: 20px; border: 6px solid transparent; background-clip: content-box; } ::-webkit-scrollbar-thumb:hover { background-color: #a8bbbf; } } 归档页双栏 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // ~\\blog\\assets\\scss\\custom.scss //-------------------------------------------------- //归档页面双栏 /* 归档页面两栏 */ @media (min-width: 1024px) { .article-list--compact { display: grid; grid-template-columns: 1fr 1fr; background: none; box-shadow: none; gap: 1rem; article { background: var(--card-background); border: none; box-shadow: var(--shadow-l2); margin-bottom: 8px; border-radius: 16px; } } } 链接页三栏 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 // ~\\blog\\assets\\scss\\custom.scss //-------------------------------------------------- //链接三栏 @media (min-width: 1024px) { .article-list--compact.links { display: grid; grid-template-columns: 1fr 1fr 1fr; //三个1fr即为三栏,两个1fr则为双栏,以此类推即可. background: none; box-shadow: none; gap: 1rem; article { background: var(--card-background); border: none; box-shadow: var(--shadow-l2); margin-bottom: 8px; border-radius: var(--card-border-radius); \u0026amp;:nth-child(odd) { margin-right: 8px; } } } } 首页添加欢迎样式 在博客的根目录下新建一个文件夹名为 layouts (默认生成站点时也生成了，没有的话手动创建),之后将 ~\\blog\\themes\\hugo-theme-stack\\layouts\\index.html 下的文件复制到刚刚创建的 layouts 文件夹里,这意味着主题 根目录下的 layouts文件夹里的 index.html将覆盖原主题目录下对应的文件，然后在复制出来的index.html修改为以下内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 \u0026lt;!-- ~\\site\\blog\\layouts\\index.html --\u0026gt; {{ define \u0026#34;main\u0026#34; }} {{ $pages := where .Site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;in\u0026#34; .Site.Params.mainSections }} {{ $notHidden := where .Site.RegularPages \u0026#34;Params.hidden\u0026#34; \u0026#34;!=\u0026#34; true }} {{ $filtered := ($pages | intersect $notHidden) }} {{ $pag := .Paginate ($filtered) }} \u0026lt;!-- ---这是我们添加进去的--------- --\u0026gt; \u0026lt;!-- 首页欢迎字幅板块 --\u0026gt; \u0026lt;div class=\u0026#34;welcome\u0026#34;\u0026gt; \u0026lt;p style=\u0026#34;font-size: 2rem; text-align: center; font-weight: bold\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;shake\u0026#34;\u0026gt;👋\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text1\u0026#34; \u0026gt; Welcome\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text2\u0026#34;\u0026gt; To \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text3\u0026#34; style=\u0026#34;color:#e99312\u0026#34;\u0026gt;Tom\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text4\u0026#34; style=\u0026#34;color:#e99312\u0026#34;\u0026gt;\u0026#39;s\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text5\u0026#34; style=\u0026#34;color:#e99312\u0026#34;\u0026gt;Blog\u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- ------首页欢迎字幅板块------ --\u0026gt; \u0026lt;!-- 下面也是主题自带的,只展示一部分,其余省略 --\u0026gt; \u0026lt;section class=\u0026#34;article-list\u0026#34;\u0026gt; {{ range $index, $element := $pag.Pages }} {{ partial \u0026#34;article-list/default\u0026#34; . }} {{ end }} \u0026lt;/section\u0026gt; {{- partial \u0026#34;pagination.html\u0026#34; . -}} {{- partial \u0026#34;footer/footer\u0026#34; . -}} {{ end }} {{ define \u0026#34;right-sidebar\u0026#34; }} {{ partial \u0026#34;sidebar/right.html\u0026#34; (dict \u0026#34;Context\u0026#34; . \u0026#34;Scope\u0026#34; \u0026#34;homepage\u0026#34;) }} {{ end }} 接下来在 custom.scss 中添加如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 // ~\\blog\\assets\\scss\\custom.scss //--------------------------------------------------------- //首页欢迎板块样式 .welcome { color: var(--card-text-color-main); background: var(--card-background); box-shadow: var(--shadow-l2); border-radius: 30px; display: inline-block; } // 👋emoji实现摆动效果 .shake { display: inline-block; animation: shake 1s; animation-duration: 1s; animation-timing-function: ease; animation-delay: 0s; animation-iteration-count: 1; animation-direction: normal; animation-fill-mode: none; animation-play-state: running; animation-name: shake; animation-timeline: auto; animation-range-start: normal; animation-range-end: normal; animation-delay: 2s; @keyframes shake { 0% { transform: rotate(0); } 25% { transform: rotate(45deg) scale(1.2); } 50% { transform: rotate(0) scale(1.2); } 75% { transform: rotate(45deg) scale(1.2); } 100% { transform: rotate(0); } } } // 实现字符跳动动画 .jump-text1 { display: inline-block; animation: jump 0.5s 1; } .jump-text2 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.1s; } .jump-text3 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.2s; } .jump-text4 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.3s; } .jump-text5 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.4s; } // .jump-text6 { // display: inline-block; // animation: jump 0.5s 1; // animation-delay: 0.5s; // } // .jump-text7 { // display: inline-block; // animation: jump 0.5s 1; // animation-delay: 0.6s; // } // .jump-text8 { // display: inline-block; // animation: jump 0.5s 1; // animation-delay: 0.7s; // } // .jump-text9 { // display: inline-block; // animation: jump 0.5s 1; // animation-delay: 0.9s; // } @keyframes jump { 0% { transform: translateY(0); } 50% { transform: translateY(-20px); } 100% { transform: translateY(0); } } 代码块引入 Mac 样式 首先在博客根目录下的 static 文件夹中创建名为 img 的文件夹,然后在 img 文件夹中创建一个名为 code-header.svg 的文件,在文件中写入以下内容:\n1 2 3 4 5 \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; version=\u0026#34;1.1\u0026#34; x=\u0026#34;0px\u0026#34; y=\u0026#34;0px\u0026#34; width=\u0026#34;450px\u0026#34; height=\u0026#34;130px\u0026#34;\u0026gt; \u0026lt;ellipse cx=\u0026#34;65\u0026#34; cy=\u0026#34;65\u0026#34; rx=\u0026#34;50\u0026#34; ry=\u0026#34;52\u0026#34; stroke=\u0026#34;rgb(220,60,54)\u0026#34; stroke-width=\u0026#34;2\u0026#34; fill=\u0026#34;rgb(237,108,96)\u0026#34;/\u0026gt; \u0026lt;ellipse cx=\u0026#34;225\u0026#34; cy=\u0026#34;65\u0026#34; rx=\u0026#34;50\u0026#34; ry=\u0026#34;52\u0026#34; stroke=\u0026#34;rgb(218,151,33)\u0026#34; stroke-width=\u0026#34;2\u0026#34; fill=\u0026#34;rgb(247,193,81)\u0026#34;/\u0026gt; \u0026lt;ellipse cx=\u0026#34;385\u0026#34; cy=\u0026#34;65\u0026#34; rx=\u0026#34;50\u0026#34; ry=\u0026#34;52\u0026#34; stroke=\u0026#34;rgb(27,161,37)\u0026#34; stroke-width=\u0026#34;2\u0026#34; fill=\u0026#34;rgb(100,200,86)\u0026#34;/\u0026gt; \u0026lt;/svg\u0026gt; 接下来继续在 custom.scss 添加以下内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // ~\\blog\\assets\\scss\\custom.scss //---------------------------------------------------------- //为代码块顶部添加macos样式 .article-content { .highlight:before { content: \u0026#34;\u0026#34;; display: block; background: url(/img/code-header.svg); height: 32px; width: 100%; background-size: 57px; background-repeat: no-repeat; margin-bottom: 5px; background-position: -1px 2px; } } 接下来在代码框右上角添加代码语言，并修改复制按钮文字：\n在themes/assets/ts/main.ts （也可以复制到站点根目录修改）中，第 60 行后（observer.observe(articleTile)下一行的括号后，window.addEventListener('load', () =\u0026gt; {之前），添加以下代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 /** * Add copy button to code block */ const highlights = document.querySelectorAll(\u0026#34;.article-content div.highlight\u0026#34;); const copyText = `📄拷贝`, copiedText = `已拷贝!`; highlights.forEach((highlight) =\u0026gt; { const copyButton = document.createElement(\u0026#34;button\u0026#34;); copyButton.innerHTML = copyText; copyButton.classList.add(\u0026#34;copyCodeButton\u0026#34;); highlight.appendChild(copyButton); const codeBlock = highlight.querySelector(\u0026#34;code[data-lang]\u0026#34;); // 获取语言 const lang = codeBlock.getAttribute(\u0026#34;data-lang\u0026#34;); if (!codeBlock) return; copyButton.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { navigator.clipboard .writeText(codeBlock.textContent) .then(() =\u0026gt; { copyButton.textContent = copiedText; setTimeout(() =\u0026gt; { copyButton.textContent = copyText; }, 1000); }) .catch((err) =\u0026gt; { alert(err); console.log(\u0026#34;Something went wrong\u0026#34;, err); }); }); // Add language code button const languageButton = document.createElement(\u0026#34;button\u0026#34;); languageButton.innerHTML = lang.toUpperCase() + \u0026#34;\u0026amp;nbsp;\u0026amp;nbsp;\u0026#34;; languageButton.classList.add(\u0026#34;languageCodeButton\u0026#34;); highlight.appendChild(languageButton); }); new StackColorScheme(document.getElementById(\u0026#34;dark-mode-toggle\u0026#34;)); } } 接下来在 custom.scss 中添加如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 //代码复制按钮 .article-content .copyCodeButton { position: absolute; top: 10px; right: 18px; border-radius: 12px; opacity: 1; color: #F44336; background: none; border: none; padding: 0; font-weight: 500; } .article-content .languageCodeButton { position: absolute; border: none; top: 9px; right: 69px; border-radius: 12px; opacity: 1; padding: 0 5px; background: 0; color: #F44336; font-family: lato; font-size: 1.5rem; } 参考 L1nSn0w\u0026rsquo;s Blog Lovir\u0026rsquo;s Blog ","date":"2024-03-21T17:13:54+08:00","image":"https://pic.imgdb.cn/item/65fc10be9f345e8d0349611a.webp","permalink":"http://localhost:5678/p/stack/","title":"Hugo Stack主题修改"},{"content":"前言：博客的引擎选择一直是个问题。动态博客和静态博客各有优劣。动态博客 Wordpress、Typecho 等拥有精美的主题，后台管理也比较方便，但是需要服务器。静态博客如 Hexo、Hugo、Astro 等可以直接部署静态页面，但是相对写文章比较繁琐一点。今天再次记录一下之前折腾的 Hugo，之前使用的主题是 Loveit，后来觉得 Stack 不错，所以本次就拿这个主题记录一下。\n前提：\n部署静态博客需要的：\n一个 Github 账号 一个 Vercel 账号（非必须） 一个域名（非必须，但是有比较好） 1. 下载 Hugo 和 Git 到本地 将 Hugo 下载到本地，最好下载 Extended 版本，下载地址：点此下载\n下载后放到一个不会删掉的地方，然后在系统环境变量 Path 中添加 Hugo 程序 和 Git 所在目录，完成后重启电脑，之后可以在 Windows Terminal 可以检测一下是否添加成功。\n2. 创建仓库 在本地一个目录当作 Hugo 的目录，在此打开 Windows Terminal，然后输入下面的命令：\n1 hugo new site blog 输入完成后会在文件夹下出现一个 blog 文件夹。\n3. 下载主题 1 2 3 4 git init git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack # 更新主题 git submodule update --remote 如果后续修改主题，最好可以 fork 主题仓库，然后将上述地址换成自己的仓库地址。\n拉取完成后，打开博客文件夹内的 theme/hugo-theme-stack/exampleSite，将文件夹内的 config.yaml 复制到站点根目录下，同时删除原有的 Hugo.toml，然后修改 config.toml 内的配置。\n4. 发布网站 首先将站点目录推送到 Github，创建一个新的仓库，将 blog 文件夹内的内容推送，接下来在 vercel 创建一个新的项目，导入刚刚推送的仓库即可，同时可以绑定自己的域名方便访问。\n发布文章 首先可以将 ~blog/themes/hugo-theme-stack/archetypes/default.md 复制到站点目录下的 archetypes目录下，然后修改其中的文件头信息：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; author: \u0026#34;Tom Almighty\u0026#34; date: {{ .Date }} math: true license: false hidden: false comments: true draft: false image: \u0026#34;\u0026#34; description: slug: \u0026#34;\u0026#34; tags: [] categories: [\u0026#34;折腾记录\u0026#34;,\u0026#34;日常生活\u0026#34;,\u0026#34;学习笔记\u0026#34;] 之后可以在站点根目录下打开 Windows Terminal ，输入命令即可创建第一篇文章。\n1 hugo new post/my-first.md 参考 Summer博客 Bore\u0026rsquo;s Note ","date":"2024-03-21T17:13:32+08:00","image":"https://pic.imgdb.cn/item/65fc06b79f345e8d0317dd50.webp","permalink":"http://localhost:5678/p/hugo-blog/","title":"使用Hugo搭建个人博客"},{"content":"前言： 部分订阅转换修改节点后无法使用相同的链接，本次的项目可以方便地添加最新协议节点，同时可以灵活添加国家和地区分组，并且可以添加自定义规则，也可以使用自定义短链接。\n本次项目地址如下：\nsub2clash\n安装 1 2 3 mkdir -p /opt/sub2clash \u0026amp;\u0026amp; cd /opt/sub2clash wget https://raw.githubusercontent.com/nitezs/sub2clash/main/docker-compose.yml docker-compose up -d 可以自己修改 docker compose 的环境变量，可修改参数如下：\n变量名 说明 默认值 PORT 端口 8011 META_TEMPLATE 默认 meta 模板文件名 template_meta.yaml CLASH_TEMPLATE 默认 clash 模板文件名 template_clash.yaml REQUEST_RETRY_TIMES Get 请求重试次数 3 REQUEST_MAX_FILE_SIZE Get 请求订阅文件最大大小（byte） 1048576 CACHE_EXPIRE 订阅缓存时间（秒） 300 LOG_LEVEL 日志等级，可选值 debug,info,warn,error info SHORT_LINK_LENGTH 短链长度 6 模板 模板的设置可以参考默认，也可以自行设置：\n\u0026lt;all\u0026gt; 为添加所有节点 \u0026lt;countries\u0026gt; 为添加所有国家策略组 \u0026lt;地区二位字母代码\u0026gt; 为添加指定地区所有节点，例如 \u0026lt;hk\u0026gt; 将添加所有香港节点 meta 配置也可以参考内核文档的推荐配置：虚空终端，GEOSITE目录可以参考 v2fly/domain-list-community\n参考 sub2clash ","date":"2024-03-18T14:01:34+08:00","image":"https://pic.imgdb.cn/item/65f00c8c9f345e8d03e0d8b8.webp","permalink":"http://localhost:5678/p/sub2clash/","title":"订阅转换之四：sub2clash项目"},{"content":"**前言：**Windows 推出了新的终端 Windows Teminal，虽然外观有所进步，但还是达不到自己预期，因此可以自己简单修改一下。\n准备工作 计算机上启动 Windows PowerShell 时，执行策略很可能是 Restricted（默认设置）。\nRestricted 执行策略不允许任何脚本运行。 AllSigned 和 RemoteSigned 执行策略可防止 Windows PowerShell 运行没有数字签名的脚本。 因此如果直接安装很可能出现无法运行脚本的错误。\n查看当前策略 打开 PowerShell 然后输入:\n1 2 3 4 get-executionpolicy PS C:\\WINDOWS\\system32\u0026gt; get-executionpolicy Restricted 修改策略 以管理员身份打开 Windows Posershell，执行下列命令：\n1 2 set-executionpolicy remotesigned # 运行后输入 Y 安装 首先在微软商店下载两个应用，直接搜索 Windows Terminal 以及 oh-my-posh。\n安装字体。安装作者推荐的 MesloLGM NF 字体，点此下载，这样可以解决部分字体图标渲染问题。\n设置字体。打开 Windows Terminal，按 Ctrl + Shift + 逗号打开设置文件，然后在第 41 行 profiles 下 default 中添加字体设置，在第 43 行回车，然后添加如下代码后保存。\n1 2 3 4 \u0026#34;font\u0026#34;: { \u0026#34;face\u0026#34;: \u0026#34;MesloLGM NF\u0026#34; } 加载 oh-my-posh 设置，在 Windows Terminal 中输入下面第一行命令，提示创建新文件，创建后输入第二行命令保存：\n1 2 notepad $profile oh-my-posh init pwsh | Invoke-Expression 这样 oh-my-posh 就安装完成了，接下来可以自己选择主题。\n主题 oh-my-posh 有很多主题，可以在官方文档页面预览，地址如下：\n主题预览\n选择好自己的主题后，在终端输入下面的命令：\n1 Get-PoshThemes 然后终端会出现所有的主题预览，最后会出现主题文件所在地址，打开即可看到所有的主题文件，再次输入 notepad $profile，然后将配置修改为以下：\n1 oh-my-posh init pwsh --config $env:POSH_THEMES_PATH/cloud-native-azure.omp.json | Invoke-Expression 可以将主题名称修改为自己想要的主题，保存后即可完成。\n配置自动补全 自动补全插件为 PSReadLine\n在终端安装模块：\n1 2 Install-Module -Name PowerShellGet -Force -Scope CurrentUser Install-Module PSReadLine -Scope CurrentUser 或者可以使用管理员打开终端，这样命令后就不需要加 -Scope CurrentUser\n安装好模块后输入 notepad $profile打开配置文件，添加下列命令：\n1 2 Import-Module PSReadLine Set-PSReadlineKeyHandler -Key Tab -Function Complete 或者可以直接在配置文件中添加官方示例的代码，地址点击这里，需要注意的是，下面两行代码需要放到最开头，同时在 Import-Module PSReadLine 下一行添加 Set-PSReadlineKeyHandler -Key Tab -Function Complete。\n1 2 3 4 5 6 # 放到开头 using namespace System.Management.Automation using namespace System.Management.Automation.Language ... Import-Module PSReadLine Set-PSReadlineKeyHandler -Key Tab -Function Complete 个人配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # 初始化配置及主题 oh-my-posh init pwsh --config $env:POSH_THEMES_PATH/cloud-native-azure.omp.json | Invoke-Expression # 导入模块 Import-Module PSReadLine # 设置 TAB 键补全 Set-PSReadlineKeyHandler -Key Tab -Function Complete # 设置 Ctrl+z 为撤销 Set-PSReadLineKeyHandler -Key \u0026#34;Ctrl+z\u0026#34; -Function Undo # 设置向上键为后向搜索历史记录 Set-PSReadLineKeyHandler -Key UpArrow -ScriptBlock { [Microsoft.PowerShell.PSConsoleReadLine]::HistorySearchBackward() [Microsoft.PowerShell.PSConsoleReadLine]::EndOfLine() } # 设置向下键为前向搜索历史纪录 Set-PSReadLineKeyHandler -Key DownArrow -ScriptBlock { [Microsoft.PowerShell.PSConsoleReadLine]::HistorySearchForward() [Microsoft.PowerShell.PSConsoleReadLine]::EndOfLine() } 参考 syxdevcode 博客\noh-my-posh 文档\nChrAlpha\u0026rsquo;s Blog\n知乎\n志文工作室\n","date":"2024-03-18T10:27:32+08:00","image":"https://pic.imgdb.cn/item/65f7c4779f345e8d03321bad.webp","permalink":"http://localhost:5678/p/windows-terminal/","title":"Windows终端美化"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 (api|ps|sv|offnavi|newvector|ulog\\.imap|newloc)(\\.map|)\\.(baidu|n\\.shifen)\\.com (.+\\.|^)(360|so)\\.(cn|com) (.*\\\\.||)(dafahao|minghui|dongtaiwang|epochtimes|ntdtv|falundafa|wujieliulan|zhengjian)\\.(org|com|net) (.*\\\\.||)(shenzhoufilm|secretchina|renminbao|aboluowang|mhradio|guangming|zhengwunet|soundofhope|yuanming|zhuichaguoji|fgmtv|xinsheng|shenyunperformingarts|epochweekly|tuidang|shenyun|falundata|bannedbook)\\.(org|com|net) (.*\\\\.||)(icbc|ccb|boc|bankcomm|abchina|cmbchina|psbc|cebbank|cmbc|pingan|spdb|citicbank|cib|hxb|bankofbeijing|hsbank|tccb|4001961200|bosc|hkbchina|njcb|nbcb|lj-bank|bjrcb|jsbchina|gzcb|cqcbank|czbank|hzbank|srcb|cbhb|cqrcb|grcbank|qdccb|bocd|hrbcb|jlbank|bankofdl|qlbchina|dongguanbank|cscb|hebbank|drcbank|zzbank|bsb|xmccb|hljrcc|jxnxs|gsrcu|fjnx|sxnxs|gx966888|gx966888|zj96596|hnnxs|ahrcu|shanxinj|hainanbank|scrcu|gdrcu|hbxh|ynrcc|lnrcc|nmgnxs|hebnx|jlnls|js96008|hnnx|sdnxs)\\.(org|com|net|cn) (.*\\\\.||)(unionpay|alipay|baifubao|yeepay|99bill|95516|51credit|cmpay|tenpay|lakala|jdpay)\\.(org|com|net|cn) (.*\\\\.||)(firstbank|bot|cotabank|megabank|tcb-bank|landbank|hncb|bankchb|tbb|ktb|tcbbank|scsb|bop|sunnybank|kgibank|fubon|ctbcbank|cathaybk|eximbank|bok|ubot|feib|yuantabank|sinopac|esunbank|taishinbank|jihsunbank|entiebank|hwataibank|csc|skbank)\\.(org|com|net|tw) (Subject|HELO|SMTP) (torrent|\\.torrent|peer_id=|info_hash|get_peers|find_node|BitTorrent|announce_peer|announce\\.php\\?passkey=) BitTorrent protocol (^.*\\@)(guerrillamail|guerrillamailblock|sharklasers|grr|pokemail|spam4|bccto|chacuo|027168)\\.(info|biz|com|de|net|org|me|la) (.?)(xunlei|sandai|Thunder|XLLiveUD)(.) ","date":"2024-03-12T16:42:34+08:00","image":"https://pic.imgdb.cn/item/65f01b5d9f345e8d031a6315.webp","permalink":"http://localhost:5678/p/shenji/","title":"常用审计规则"},{"content":" 😀 前言：ChatGPT 官网使用不便，并且访问速度不佳，因此部署自己的 web 页面，通过 API 使用成为了主流选择，本文通过 ChatGPTNextWeb 部署页面，并通过 copilot 项目白嫖 GPT4 的 API。 前提：\ncopilot 访问权限（Github 学生包可以白嫖） vercel 账号 本文用到的项目地址如下：\nCoGPT NextChat 💡 cogpt 可以把 OpenAI API 格式的请求转发到 GitHub Copilot 服务端，从而免费使用 gpt-4。\n警告（来自作者博客） 这个项目仅适合个人使用。并不适合访问量巨大的盈利项目。\n最佳实践方式：\n本机部署，仅自己使用（推荐） 部署在个人服务器上，仅自己使用，或和几个朋友共同使用（不公开） 不建议的方式：\n提供公共服务 在一个 ip 上使用了很多 token 容易被判定为异常行为 使用 Serverless 服务 由于 Serverless 服务的 ip 不固定，所以很容易被判定为异常行为 用于盈利项目 请求量过大，容易被判定为异常行为 请不要尝试上述任何一种不建议的方式，否则可能会导致 GitHub Copilot 账号，甚至 GitHub 账号被封禁。\n部署服务 可以部署到本地电脑，也可以部署到 vps，这里以 vps 为例。\n1 mkdir -p /opt/cogpt \u0026amp;\u0026amp; cd /opt/cogpt \u0026amp;\u0026amp; vim docker-compose.yml 粘贴下面内容\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 version: \u0026#39;3\u0026#39; services: cogpt-api: image: geniucker/cogpt:latest environment: - HOST=0.0.0.0 ports: - 8080:8080 volumes: - ./db:/app/db - ./log:/app/log restart: unless-stopped container_name: cogpt-api 完成后执行 docker-compose up -d 启动服务。部署完成后打开对应的页面端口会出现 Hi, it's CoGPT! 代表服务运行成功。\n💡 注意：如果在 vps 部署，需要反向代理并配置域名，如果使用 http 访问 API ，而 web 页面使用 https，会因为不一致返回错误。\n获取 token 部署完成后需要获取 token ，在 Release 页面下载对应的版本，解压压缩包，之后运行 cogpt-get-apptoken 文件，终端会提示打开对应的页面，填入对应的代码，这时只需要登录有 copilot 使用权限的 Github 账号授权，随后终端会返回对应的 token，保存 token，可以多生成几个轮询使用。\n部署 ChatGPTNextWeb 这里的部署非常简单，直接使用项目的 vercel 一键部署，如果想随时保持更新，首先 fork 官方的项目，在 vercel 选择自己 fork 的仓库即可，随后在 Actions 页面启用 Workflows，并启用 Upstream Sync Action，启用之后即可开启每小时定时自动更新。\n部署的时候务必添加以下几个环境变量：\n1 2 3 CODE:yourpassword # 务必设置强密码，否则会被爆破 OPENAI_API_KEY:token1,token2,token3 # 刚刚获取的 token，可以用英文逗号分隔多个 key(此项为必须) BASE_URL:https://cogpt.yourdomain.com # 反向代理的域名，如果不使用 https 会出现错误 参考文章 CoGPT 作者博客 CoGPT NextChat ","date":"2024-03-07T00:00:00Z","image":"https://pic.imgdb.cn/item/65e941339f345e8d03417c14.webp","permalink":"http://localhost:5678/p/cogpt/","title":"部署自己的ChatGPT并白嫖GPT4的API"},{"content":" 😀 自建的节点往往难以管理，可以通过搭建 v2b 等面板管理，但难免繁琐，这里提供另一种方式。\n项目地址：sublink\n安装 docker 和 docker-compose 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 卸载旧版本 sudo apt-get remove docker \\ docker-engine \\ docker.io # 安装 docker curl -fsSL get.docker.com -o get-docker.sh # 启动并设置开机自启 sudo systemctl enable docker sudo systemctl start docker # 安装 docker-compose sudo curl -L \u0026#34;https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$(uname -s)-$(uname -m)\u0026#34; -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose # 可用以下命令测试安装 docker-compose --version 或者通过下面脚本安装：\n1 2 # kejilion 工具箱 curl -sS -O https://raw.githubusercontent.com/kejilion/sh/main/kejilion.sh \u0026amp;\u0026amp; chmod +x kejilion.sh \u0026amp;\u0026amp; ./kejilion.sh 部署程序 1 2 3 cd /opt \u0026amp;\u0026amp; mkdir sublink \u0026amp;\u0026amp; cd sublink wget https://raw.githubusercontent.com/jaaksii/sublink/master/docker-compose.yml docker-compose up -d 之后可创建网站，反向代理 http://127.0.0.1:8000 。\n参考文章 项目地址 ","date":"2024-03-06T00:00:00Z","image":"https://pic.imgdb.cn/item/65f00c8c9f345e8d03e0d8b8.webp","permalink":"http://localhost:5678/p/sublink/","title":"订阅转换之三：sublink项目"},{"content":" 通过 DNSmasq 和一台已解锁 Netflix 的服务器，将其余服务器全部解锁 Netflix 。\n原理：使用 Dnsmasq 的DNS将网站解析劫持到 SNIproxy 反向代理的页面上。\n特性：脚本默认解锁Netflix Hulu HBO 等，如需增减域名，请编辑下面文件： /etc/dnsmasq.d/custom_netflix.conf /etc/sniproxy.conf\n项目地址：Github\n安装 前提需求：\n一台解锁 Netflix 的服务器 放行 53、80、443端口 快速安装：\n1 wget --no-check-certificate -O dnsmasq_sniproxy.sh https://raw.githubusercontent.com/myxuchangbin/dnsmasq_sniproxy_install/master/dnsmasq_sniproxy.sh \u0026amp;\u0026amp; bash dnsmasq_sniproxy.sh -f 卸载：\n1 wget --no-check-certificate -O dnsmasq_sniproxy.sh https://raw.githubusercontent.com/myxuchangbin/dnsmasq_sniproxy_install/master/dnsmasq_sniproxy.sh \u0026amp;\u0026amp; bash dnsmasq_sniproxy.sh -u systemd-resolve 服务占用53端口解决方法 1 2 systemctl stop systemd-resolved vim /etc/systemd/resolved.conf 按照下面说明修改文件\n1 2 3 4 5 6 7 8 9 [Resolve] DNS=8.8.8.8 1.1.1.1 #取消注释，增加dns #FallbackDNS= #Domains= #LLMNR=no #MulticastDNS=no #DNSSEC=no #Cache=yes DNSStubListener=no #取消注释，把yes改为no 重启服务：\n1 2 ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf systemctl restart systemd-resolved.service 限制访问 通过 iptables 放行白名单 IP 访问 53端口\n1 2 iptables -I INPUT -p tcp --dport 53 -j DROP iptables -I INPUT -s 1.1.1.1 -p tcp --dport 53 -j ACCEPT 📎 参考文章 Ypkin’s Blog ","date":"2024-03-03T00:00:00Z","image":"https://pic.imgdb.cn/item/65dc49059f345e8d03107123.webp","permalink":"http://localhost:5678/p/netfli-dns/","title":"自建DNS解锁Netflix"},{"content":"**前言：**记录甲骨文相关问题。\n开启 root 登录 1 2 3 4 5 6 vim /etc/ssh/sshd_config PermitRootLogin yes PasswordAuthentication yes systemctl restart sshd.service 卸载相关程序 pcbind 1 2 3 4 systemctl stop rpcbind systemctl stop rpcbind.socket systemctl disable rpcbind systemctl disable rpcbind.socket oracle-cloud-agent 1 2 3 4 systemctl stop oracle-cloud-agent systemctl disable oracle-cloud-agent systemctl stop oracle-cloud-agent-updater systemctl disable oracle-cloud-agent-updater 防火墙相关 停止 firewall 并禁止开机启动 1 2 systemctl stop firewalld.service systemctl disable firewalld.service ubuntu 开放所有端口\n1 2 3 4 iptables -P INPUT ACCEPT iptables -P FORWARD ACCEPT iptables -P OUTPUT ACCEPT iptables -F 清除 iptables 规则\n1 2 apt-get purge netfilter-persistent reboot 📎 参考文章 博客 ","date":"2024-02-27T00:00:00Z","image":"https://pic.imgdb.cn/item/65f0112b9f345e8d03f2fe8b.webp","permalink":"http://localhost:5678/p/oracle/","title":"甲骨文相关"},{"content":" 😀 由于最近 Netflix 清退了一大批低价区用户，并且不退款，需要与银行争议，就开了一个月的土耳其区，然而土耳其第一个月并不能用土耳其之外的 IP 观看，白白浪费一个月，虽然最近尼日利亚的低价已经超过了巴基斯坦，但还是决定放弃了，花钱找罪受，不如买个 Emby 。 之后在网上看到可以通过服务器部署 Plex Media Server ，将 Alist 挂载到服务器，Plex 添加 Alist 目录，然后 infuse 连接 Plex ，这样可以实现刮削，并且全平台同步，还可以搭配 Aria2 下载自动上传网盘，达到良好的观影效果。\n一、可执行程序部署 1. 部署 Plex 部署可以通过可执行程序，也可以通过 docker ，如果想挂载 alist ，记得和 alist 程序安装在同一台服务器。\n部署程序 1 2 3 4 5 6 7 8 9 # centos yum -y update \u0026amp;\u0026amp; yum -y install wget https://downloads.plex.tv/plex-media-server-new/1.32.8.7639-fb6452ebf/redhat/plexmediaserver-1.32.8.7639-fb6452ebf.x86_64.rpm yum install plexmediaserver*.rpm # Debian/Ubuntu系统 apt-get -y update \u0026amp;\u0026amp; apt-get -y upgrade wget https://downloads.plex.tv/plex-media-server-new/1.32.8.7639-fb6452ebf/debian/plexmediaserver_1.32.8.7639-fb6452ebf_amd64.deb dpkg -i plexmediaserver*.deb 设置开机自启 1 2 3 4 systemctl enable plexmediaserver.service systemctl start plexmediaserver.service # 状态查询 systemctl status plexmediaserver.service 安装完成可以通过 http://ip地址:32400 进入后台管理，如果运行正常却无法打开，可能是防火墙问题，命令如下，也可以宝塔面板直接放行。 1 2 3 4 5 6 7 8 #CentOS 7 systemctl stop firewalld.service systemctl disable firewalld.service #其它系统 iptables -I INPUT -p tcp --dport 32400 -j ACCEPT service iptables save service iptables restart 2. 后台设置 安装完成后进入后台会发现无法找到服务器，这是因为 Plex 安全策略，第一次登录只允许本地 IP 可以通过端口转发或隧道转发解决。\n端口转发 Windows 打开 Power shell，然后通过下列命令连接服务器： 1 ssh root@服务器IP -L 8888:localhost:32400 浏览器打开：http://localhost:8888/web 就可以正常设置。 隧道转发 这里以 FinalShell 为例，ssh 连接设置中添加如下隧道 连接服务器，浏览器打开 http://localhost:8888/web 即可。 3. 卸载 1 2 3 4 5 6 7 8 # centos rpm -e plexmediaserver rm -rf/var/lib/plexmediaserver/ userdel plex # ubuntu/debian dpkg -r plexmediaserver rm -rf /var/lib/plexmediaserver/Library/Application Support/Plex Media Server/ 二、Docker 部署 1. 安装 docker 和 docker-compose 1 2 3 4 5 6 7 8 # 卸载旧版本 sudo apt-get remove docker \\ docker-engine \\ docker.io curl -fsSL get.docker.com -o get-docker.sh # 启动并设置开机自启 sudo systemctl enable docker sudo systemctl start docker 1 2 3 4 5 # 安装 docker-compose sudo curl -L \u0026#34;https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$(uname -s)-$(uname -m)\u0026#34; -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose # 可用以下命令测试安装 docker-compose --version 2. 创建目录 1 2 3 4 5 6 sudo mkdir /plex sudo mkdir /plex/{data,tv,movies} cd /plex touch docker-compose.yml vim ./docker-compose.yml 粘贴下列命令\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 --- services: plex: image: lscr.io/linuxserver/plex:latest container_name: plex network_mode: host environment: - PUID=1000 - PGID=1000 - TZ=Asia/Shanghai - VERSION=docker - PLEX_CLAIM= #optional volumes: - /plex/data:/config # Library 目录，可能变得很大 - /plex/tv:/tv - /plex/movies:/movies # - /CloudNAS:/CloudNAS # 这是将 Clouddrive 的挂载目录映射到 plex 容器中，也可以更换 restart: unless-stopped PUID和PGID用于配置容器内进程的UID和GID，全都设置为 0 表示以root用户运行，如果你这里不是很明白的话可以无脑设置为 0 以避免部分权限问题 PLEX_CLAIM环境变量用于认证自己的服务器，可以从 这里 获取(注意需要可用的plex账号)， 另外 claim 的有效期一般只有 4 分钟 ，如果服务器网络不佳，建议先通过执行docker-compose pull拉取镜像之后再获取，防止过期(虽说过期后再重新 claim 也行) 3. 启动容器 1 docker-compose up -d 浏览器打开 http://IP地址:32400/web 进入后台，出现无法找到服务器同样需要通过映射本地端口。\n三、挂载网盘 💡 挂载程序有很多，这里以 rclone 和 cloudrive2（推荐）为例。\n1. rclone 首先安装依赖和程序\n1 2 3 4 # 安装依赖 apt-get install fuse3 # 安装 rclone curl https://rclone.org/install.sh | sudo bash 接下来设置 rclone，终端输入 rclone config ，随后输入 n 添加远程设备，这里接下来的代码直接参考别人的：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 # 选择新远程 No remotes found, make a new one? n) New remote s) Set configuration password q) Quit config n/s/q\u0026gt; n #这里选择n # 设置名字 name\u0026gt; remote Type of storage to configure. Choose a number from below, or type in your own value [snip] XX / WebDAV \\ \u0026#34;webdav\u0026#34; [snip] Storage\u0026gt; webdav #这里输入远程的名字，之后就是你的远程名称 # 设置远程地址url http://your_alist_ip:port/dav URL of http host to connect to Choose a number from below, or type in your own value 1 / Connect to example.com \\ \u0026#34;https://example.com\u0026#34; url\u0026gt; http://127.0.0.1:5244/dav #这里设置alist的地址和端口，后面要带dav，这是alist要求的 # 这里选6就可以了，1-5都不是我们使用的 Name of the WebDAV site/service/software you are using Choose a number from below, or type in your own value 1 / Fastmail Files \\ (fastmail) 2 / Nextcloud \\ (nextcloud) 3 / Owncloud \\ (owncloud) 4 / Sharepoint Online, authenticated by Microsoft account \\ (sharepoint) 5 / Sharepoint with NTLM authentication, usually self-hosted or on-premises \\ (sharepoint-ntlm) 6 / Other site/service or software \\ (other) vendor\u0026gt; 6 # 设置远程账号 User name user\u0026gt; admin #这里是你alist的密码 # 设置远程密码 Password. y) Yes type in my own password g) Generate random password n) No leave this optional password blank y/g/n\u0026gt; y #这里输入y Enter the password: #这输入你的密码，密码是看不到的 password: Confirm the password: #再次输入你的密码 password: # 这里直接回车即可 Bearer token instead of user/pass (e.g. a Macaroon) bearer_token\u0026gt; Remote config # 这里可能会问你是默认还是高级，选择默认即可 # 你的远程信息 -------------------- [remote] type = webdav url = http://127.0.0.1:5244/dav vendor = Other user = admin pass = *** ENCRYPTED *** -------------------- # 确认 y) Yes this is OK e) Edit this remote d) Delete this remote y/e/d\u0026gt; y #输入y即可， # 最后按q退出设置 连接后需要挂载到本地，输入如下命令：\n1 2 # 最后的 daemon 是后台挂载 rclone mount 远程网盘名字:/ /本地挂载地址 --cache-dir /tmp --allow-other --vfs-cache-mode writes --allow-non-empty --daemon 这样虽然后台挂载了，但是每次重启都需要重新运行，我们可以设置一个开机自启的文件：\n1 2 #创建service文件 vim /usr/lib/systemd/system/rclone.service 输入如下内容：\n1 2 3 4 5 6 7 8 [Unit] Description=rclone [Service] User=root ExecStart=/usr/bin/rclone mount 远程网盘名字:/ /本地挂载目录 --cache-dir /tmp --allow-other --vfs-cache-mode writes --allow-non-empty --daemon [Install] WantedBy=multi-user.target 重载配置文件，并设置开机自启：\n1 2 3 4 5 6 7 8 # reload守护进程 systemctl daemon-reload # 设置service文件自启 systemctl enable rclone.service # 启动service文件 systemctl start rclone.service 2. Clouddrive2 rclone 需要命令行操作，并且使用过程中出现了一些问题，这里推荐另一种有 web 界面的挂载方式 clouddrive2，官网地址如下：\nCloudDrive - Home\n安装非常简单，直接使用别人做好的一键脚本，通过 docker 安装，地址如下：\nhttps://github.com/sublaim/clouddrive2\n安装命令 1 2 3 4 # 国内加速(推荐) curl -fsSL \u0026#34;https://mirror.ghproxy.com/https://raw.githubusercontent.com/sublaim/clouddrive2/main/cd2.sh\u0026#34; | bash -s install mirror # 代理 curl -fsSL \u0026#34;https://raw.githubusercontent.com/sublaim/clouddrive2/main/cd2.sh\u0026#34; | bash -s install 卸载命令 1 2 3 4 # 国内加速(推荐) curl -fsSL \u0026#34;https://mirror.ghproxy.com/https://raw.githubusercontent.com/sublaim/clouddrive2/main/cd2.sh\u0026#34; | bash -s uninstall mirror # 代理 curl -fsSL \u0026#34;https://raw.githubusercontent.com/sublaim/clouddrive2/main/cd2.sh\u0026#34; | bash -s uninstall 💡 注意：如果 plex 是通过 docker 安装的，需要添加 -v 参数，将 clouddrive2 映射的目录映射到 plex 中。\n设置后台。安装完成后终端会输出访问地址，通过 http://ip:19798 就可以访问。 进入后首先注册账号，然后点击云朵图标添加网盘，选择 webdav , 设置地址如下： 挂载 webdav 到本机，先点击右上角的电脑图标，然后挂载到 /CloudNAS 目录下，可以修改一下权限。 💡 注意：clouddrive 免费用户只可以添加两个网盘，挂载一个网盘，但我们可以首先通过 alist 挂载所有网盘，再将 alist 通过 webdav 挂载。\n这样所有的安装都结束了，我们可以在 plex 中设置媒体文件夹，刮削完后可以在移动端通过 infuse、vidhub 等应用挂载 plex，这样就能拥有一个资源丰富界面精美的媒体库。\n📎 参考文章 docker compose 安装 docker 从入门到实践 Rat’s Blog 魔趣博客 Rin’s Home 博客 Willxup ","date":"2024-02-09T00:00:00Z","image":"https://pic.imgdb.cn/item/65f0121c9f345e8d03f6691c.webp","permalink":"http://localhost:5678/p/plex/","title":"部署Plex并挂载Alist"},{"content":"**前言：**目前很多人通过网盘分享影视资源，如阿里云盘、115网盘等，同时还有微软的 E5 管理员账号，一个账号就有 5T 空间，用来做存储很不错，但是众多网盘分享文件很不方便，网盘自己的页面看视频也比较简陋，这个时候我们可以通过目录列表整合各种网盘，如以前的 oneindex、olaindex，最近常用的是 Alist ，支持网盘众多，部署方便。\nAlist 是一个支持多种存储，支持网页浏览和 WebDAV 的文件列表程序，由 gin 和 Solidjs 驱动，程序开源地址以及文档如下：\nGithub\n文档\n一、官方 Alist 1. 安装 安装非常简单，直接使用官方的一键脚本\n1 2 3 4 5 6 # 安装 curl -fsSL \u0026#34;https://alist.nn.ci/v3.sh\u0026#34; | bash -s install # 更新 curl -fsSL \u0026#34;https://alist.nn.ci/v3.sh\u0026#34; | bash -s update # 卸载 curl -fsSL \u0026#34;https://alist.nn.ci/v3.sh\u0026#34; | bash -s uninstall 默认安装在 /opt/alist 中。自定义安装路径，将安装路径作为第二个参数添加，必须是绝对路径（如果路径以 alist 结尾，则直接安装到给定路径，否则会安装在给定路径 alist 目录下），如 安装到 /root：\n1 2 3 4 5 6 # Install curl -fsSL \u0026#34;https://alist.nn.ci/v3.sh\u0026#34; | bash -s install /root # update curl -fsSL \u0026#34;https://alist.nn.ci/v3.sh\u0026#34; | bash -s update /root # Uninstall curl -fsSL \u0026#34;https://alist.nn.ci/v3.sh\u0026#34; | bash -s uninstall /root 2. 获取密码 随机生成一个密码\n1 ./alist admin random 手动设置一个密码,NEW_PASSWORD是指你需要设置的密码\n1 ./alist admin set NEW_PASSWORD 部署的 Alist可以挂载自己的阿里云盘、Onedrive 等，官方文档都有详细介绍，上述安装也都来自官方文档，如果想美化以下界面，可以参考另一篇文章。\n如果想瞬间拥有很多资源，我们可以部署别人整理好的 Alist 镜像。\n二、小雅 Alist 首先列出作者的频道和文档：\nxiaoya Liu\n小雅的分类 Alist\n如何设置xiaoya的docker\n💡 接下来的教程来自官方文档，部署在 VPS 上，由于家里并没有 NAS 和软路由，也不用电视看，因此记录仅限于电脑手机端观看，如果后续设备变化再更新记录。\n1. 安装 Dokcer 1 2 3 4 5 6 # 卸载旧版本 sudo apt-get remove docker \\ docker-engine \\ [docker.io](http://docker.io/) # 安装 curl -fsSL [get.docker.com](http://get.docker.com/) -o [get-docker.sh](http://get-docker.sh/) 1 2 3 # 启动并设置开机自启 sudo systemctl enable docker sudo systemctl start docker 2. 安装小雅 Alist 首先获取阿里云盘的三个参数\n参数 参数必需 对应文件 获取地址 token 是 /etc/xiaoya/mytoken.txt https://aliyuntoken.vercel.app/ open token 是 /etc/xiaoya/myopentoken.txt https://alist.nn.ci/zh/guide/drivers/aliyundrive_open.html 转存目录 ID 是 /etc/xiaoya/temp_transfer_folder_id.txt 先转存这个 https://www.aliyundrive.com/s/rP9gP3h9asE 到自己网盘（选择资源盘），然后浏览器打开转存后的目录，浏览器的url https://www.aliyundrive.com/drive/file/resource/640xxxxxxxxxxxxxxxxxxxca8a 最后一串就是，记得这个目录不要删，里面的内容可以定期删除 登录 否 /etc/xiaoya/guestlogin.txt 如果目录底下没有可以手动创建一个，里面不需要填写内容 密码 否(如果设置目录下有上一个登录参数，这个就得设置) /etc/xiaoya/guestpass.txt 可以手动创建，里面填写用户的密码，但是尽量不要填写符号 💡 获取到前三个参数就可以，如果不想别人蹭你的网盘观看，就可以设置必须登录观看，登录的账号是 dav ，密码就是设置的密码。\n接下来安装，使用一键脚本：\n1 2 3 **bash -c \u0026#34;$(curl http://docker.xiaoya.pro/update_new.sh)\u0026#34; # host 模式** bash -c \u0026#34;$(curl [http://docker.xiaoya.pro/update_new.sh](http://docker.xiaoya.pro/update_new.sh))\u0026#34; -s host 安装过程中填写三个参数，等待完成就可以了，服务器记得放行 5678 端口，后续如果需要反向代理也是这个端口。完成后可以通过 http://ip:5678 进入，第一次进入会比较慢，如果很久没加载到存储，可以手动重启一下容器：\n1 2 docker restart xiaoya # 更新也是这个命令，所以可以将这个命令设置定时任务，每天定时重启 💡 不建议使用 infuse 等挂载扫描，可能会触发风控。\n接下来你可以将小雅 Alist 挂载到自己的 Alist 上，挂载时地址填写本机地址 http://127.0.0.1:5678 就可以。\n观看视频时，是先将视频转存到自己的目录，也就是安装时的那个文件夹，因此确保网盘有足够的容量，并定期清理，或者可以通过下面的小雅助手容器定时更新、签到、清理文件夹。此助手脚本包括几个模式，如下：\n模式0：每天自动清理一次。如果系统重启需要手动重新运行或把命令加入系统启动。 1 bash -c \u0026#34;$(curl -s https://xiaoyahelper.zengge99.eu.org/aliyun_clear.sh | tail -n +2)\u0026#34; -s 0 -tg 模式1：一次性清理，一般用于测试效果。 1 bash -c \u0026#34;$(curl -s https://xiaoyahelper.zengge99.eu.org/aliyun_clear.sh | tail -n +2)\u0026#34; -s 1 -tg 模式3：创建一个名为 xiaoyakeeper 的docker定时运行小雅转存清理并升级小雅镜像 1 bash -c \u0026#34;$(curl -s https://xiaoyahelper.zengge99.eu.org/aliyun_clear.sh | tail -n +2)\u0026#34; -s 3 -tg **模式5：**与模式3的区别是实时清理，只要产生了播放缓存一分钟内立即清理。签到和定时升级同模式3 1 bash -c \u0026#34;$(curl -s https://xiaoyahelper.zengge99.eu.org/aliyun_clear.sh | tail -n +2)\u0026#34; -s 5 -tg 以上所有模式加上 -tg 功能均可绑定消息推送的TG账号，只有第一次运行需要加上 -tg 参数，可以不加tg参数\n📎 参考文章 博客 小雅文档 ","date":"2024-02-08T00:00:00Z","image":"https://pic.imgdb.cn/item/65f013c89f345e8d03fc5210.webp","permalink":"http://localhost:5678/p/alist/","title":"Alist部署"},{"content":"最近对于所学专业的专业代码一直有所疑惑，因此搜索后得知本科的专业设置和研究生设置有所不同，教育部也对本科和研究生分别发布了对应的专业目录及相关管理办法，这里记录一下。\n本科专业目录目前最新的是2022版，是在2012年版本的基础上完成。教育部通知链接如下：\n教育部关于公布2022年度普通高等学校本科专业备案和审批结果的通知 - 中华人民共和国教育部政府门户网站\n研究生专业目录最新也是2022版，于2023年开始实施，教育部通知链接如下：\n国务院学位委员会 教育部关于印发《研究生教育学科专业目录（2022年）》《研究生教育学科专业目录管理办法》的通知 - 中华人民共和国教育部政府门户网站\n具体目录文件如下：\n本科专业目录.pdf\n研究生专业目录.pdf\n","date":"2024-02-06T00:00:00Z","image":"https://pic.imgdb.cn/item/65dc499a9f345e8d0311caa6.webp","permalink":"http://localhost:5678/p/zhuanyemulu/","title":"本科和研究生专业目录"},{"content":"自定义头部 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 \u0026lt;!--Alist V3建议添加的，已经默认添加了，如果你的没有建议加上--\u0026gt; \u0026lt;script src=\u0026#34;https://polyfill.io/v3/polyfill.min.js?features=String.prototype.replaceAll\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!--引入字体，全局字体使用--\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://npm.elemecdn.com/lxgw-wenkai-webfont@1.1.0/lxgwwenkai-regular.css\u0026#34; /\u0026gt; \u0026lt;!--不蒜子计数器--\u0026gt; \u0026lt;script async src=\u0026#34;https://busuanzi.icodeq.com/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- Font6，自定义底部使用和看板娘使用的图标和字体文件--\u0026gt; \u0026lt;link type=\u0026#39;text/css\u0026#39; rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://npm.elemecdn.com/font6pro@6.3.0/css/fontawesome.min.css\u0026#34; media=\u0026#39;all\u0026#39;\u0026gt; \u0026lt;link href=\u0026#34;https://npm.elemecdn.com/font6pro@6.3.0/css/all.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;style\u0026gt; /* 去除通知栏 右上角 X */ .notify-render .hope-close-button { display: none; } /* 文字超长自动换行 */ .name-box .name { white-space: unset !important; overflow: unset !important; } /* 缩略图图片变大 代码中的160px 自己改 现在是注释状态若需要自行解除注释 */ /*.obj-box \u0026gt; div { grid-template-columns: repeat(auto-fill, minmax(160px, 1fr)) } .obj-box \u0026gt; div .item-thumbnail{ height: 100px; }*/ /* 图片API用法点进去都会有食用说明的,API来自网络不保证实效性稳定性自己测试 樱花：https://www.dmoe.cc 夏沫：https://cdn.seovx.com 搏天：https://api.btstu.cn/doc/sjbz.php 姬长信：https://github.com/insoxin/API 小歪：https://api.ixiaowai.cn/ 保罗：https://api.paugram.com 墨天逸：https://api.mtyqx.cn 岁月小筑：https://img.xjh.me 东方Project：https://img.paulzzh.com */ /*白天背景图*/ .hope-ui-light { background-image: url(\u0026#34;https://api.ixiaowai.cn/mcapi/mcapi.php\u0026#34;) !important; background-repeat:no-repeat; background-size:cover; background-attachment:fixed; background-position-x:center; } /*夜间背景图*/ .hope-ui-dark { background-image: url(http://pic.rmb.bdstatic.com/bjh/ebe942a9de49856f389c65f25a338335.png) !important; background-repeat:no-repeat; background-size:cover; background-attachment:fixed; background-position-x:center; } /*主列表白天模式透明*/ .obj-box.hope-stack.hope-c-dhzjXW.hope-c-PJLV.hope-c-PJLV-igScBhH-css { background-color: rgba(255, 255, 255, 0.5)!important; } /*主列表夜间模式透明*/ .obj-box.hope-stack.hope-c-dhzjXW.hope-c-PJLV.hope-c-PJLV-iigjoxS-css { background-color:rgb(0 0 0 / 50%)!important; } /*readme白天模式透明*/ .hope-c-PJLV.hope-c-PJLV-ikSuVsl-css { background-color: rgba(255, 255, 255, 0.5)!important; } /*readme夜间模式透明*/ .hope-c-PJLV.hope-c-PJLV-iiuDLME-css { background-color:rgb(0 0 0 / 50%)!important; } /*顶部右上角切换按钮透明*/ .hope-ui-light .hope-c-ivMHWx-hZistB-cv.hope-icon-button { background-color: rgba(255, 255, 255, 0.3)!important; } .hope-ui-dark .hope-c-ivMHWx-hZistB-cv.hope-icon-button { background-color:rgb(0 0 0 / 10%)!important; } /*右下角侧边栏按钮透明 第一个是白天 第二个是夜间*/ .hope-ui-light .hope-c-PJLV-ijgzmFG-css { background-color: rgba(255, 255, 255, 0.5)!important; } .hope-ui-dark .hope-c-PJLV-ijgzmFG-css { background-color:rgb(0 0 0 / 50%)!important; } /*白天模式代码块透明*/ .hope-ui-light pre { background-color: rgba(255, 255, 255, 0.1)!important; } /*夜间模式代码块透明*/ .hope-ui-dark pre { background-color: rgba(255, 255, 255, 0)!important; } /*底部CSS，.App .table这三个一起的*/ dibu { border-top: 0px; position: absolute; bottom: 0; width: 100%; margin: 0px; padding: 0px; } .App { min-height: 85vh; } .table { margin: auto; } /*去掉底部*/ .footer { display: none!important; } /*全局字体*/ * { font-family:LXGW WenKai } * { font-weight:bold } body { font-family: LXGW WenKai; } /*渐变背景CSS*/ #canvas-basic { position: fixed; display: block; width: 100%; height: 100%; top: 0; right: 0; bottom: 0; left: 0; z-index: -999; } \u0026lt;/style\u0026gt; 搜索栏美化带毛玻璃 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 \u0026lt;style\u0026gt; /*白天模式 搜索主体+毛玻璃*/ .hope-ui-light .hope-c-PJLV-iiBaxsN-css{ background-color: rgba(255,255,255,0.2)!important; backdrop-filter: blur(10px)!important; } /*白天模式 搜索栏输入框+毛玻璃*/ .hope-ui-light .hope-c-kvTTWD-hYRNAb-variant-filled{ background-color: rgba(255,255,255,0.2)!important; backdrop-filter: blur(10px)!important; } /*白天模式 搜索按钮+毛玻璃*/ .hope-ui-light .hope-c-PJLV-ikEIIxw-css{ background-color: rgba(255,255,255,0.2)!important; backdrop-filter: blur(10px)!important; padding: var(--hope-space-1)!important; } /*夜间模式搜索主体+毛玻璃*/ .hope-ui-dark .hope-c-PJLV-iiBaxsN-css{ background-color: rgb(0 0 0 / 10%)!important; backdrop-filter: blur(10px)!important; } /*夜间模式搜索栏+毛玻璃*/ .hope-ui-dark .hope-c-kvTTWD-hYRNAb-variant-filled{ background-color: rgb(0 0 0 / 10%)!important; backdrop-filter: blur(10px)!important; } /*夜间模式 搜索按钮+毛玻璃*/ .hope-ui-dark .hope-c-PJLV-ikEIIxw-css{ background-color: rgb(0 0 0 / 10%)!important; backdrop-filter: blur(10px)!important; padding: var(--hope-space-1)!important; } \u0026lt;/style\u0026gt; 搜索栏美化不带毛玻璃 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;style\u0026gt; /*白天模式 搜索主体*/ .hope-ui-light .hope-c-PJLV-iiBaxsN-css{ background-color: rgba(255,255,255,0.2)!important; } /*白天模式 搜索栏输入框*/ .hope-ui-light .hope-c-kvTTWD-hYRNAb-variant-filled{ background-color: rgba(255,255,255,0.2)!important; } /*白天模式 搜索按钮*/ .hope-ui-light .hope-c-PJLV-ikEIIxw-css{ background-color: rgba(255,255,255,0.2)!important; padding: var(--hope-space-1)!important; } /*夜间模式搜索主体*/ .hope-ui-dark .hope-c-PJLV-iiBaxsN-css{ background-color: rgb(0 0 0 / 10%)!important; } /*夜间模式搜索栏*/ .hope-ui-dark .hope-c-kvTTWD-hYRNAb-variant-filled{ background-color: rgb(0 0 0 / 10%)!important; } /*夜间模式 搜索按钮*/ .hope-ui-dark .hope-c-PJLV-ikEIIxw-css{ background-color: rgb(0 0 0 / 10%)!important; padding: var(--hope-space-1)!important; } \u0026lt;/style\u0026gt; 自定义内容 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 \u0026lt;!--延迟加载--\u0026gt; \u0026lt;!--如果要写自定义内容建议都加到这个延迟加载的范围内--\u0026gt; \u0026lt;div id=\u0026#34;customize\u0026#34; style=\u0026#34;display: none;\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;center class=\u0026#34;dibu\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34; line-height: 20px;font-size: 9pt;font-weight: bold;\u0026#34;\u0026gt; \u0026lt;span\u0026gt; \u0026#34; \u0026lt;span style=\u0026#34;color: rgb(13, 109, 252); font-weight: bold;\u0026#34; id=\u0026#34;hitokoto\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; id=\u0026#34;hitokoto_text\u0026#34;\u0026gt; \u0026#34;人生最大的遗憾,就是在最无能为力的时候遇到一个想要保护一生的人.\u0026#34; \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026#34; \u0026lt;/span\u0026gt; \u0026lt;p style=\u0026#34;margin-left: 10rem;font-size: 8pt;\u0026#34;\u0026gt; \u0026lt;small\u0026gt; —— 限速网盘 \u0026lt;/small\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;font-size: 13px; font-weight: bold;\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;mailto:bboyc80@gmail.com\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa-duotone fa-envelope-open\u0026#34; style=\u0026#34;color:#409EFF\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/i\u0026gt; 邮箱 | \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;https://grew.cc\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fas fa-edit\u0026#34; style=\u0026#34;color:#409EFF\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/i\u0026gt; 博客 | \u0026lt;/a\u0026gt; \u0026lt;span class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;https://pan.grew.cc\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa fa-cloud-download\u0026#34; style=\u0026#34;color:#409EFF;\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/i\u0026gt; 云盘 | \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;!--后台入口--\u0026gt; \u0026lt;span class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;/@manage\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa-solid fa-folder-gear\u0026#34; style=\u0026#34;color:#409EFF;\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/i\u0026gt; 管理 | \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;!--版权，请尊重作者--\u0026gt; \u0026lt;span class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;https://github.com/Xhofe/alist\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa-solid fa-copyright\u0026#34; style=\u0026#34;color:#409EFF;\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/i\u0026gt; Alist \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;!--添加一个访问量--\u0026gt; \u0026lt;span\u0026gt; 本\u0026#34;\u0026lt;span style=\u0026#34;color: rgb(13, 109, 252); font-weight: bold;\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;目录\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt;\u0026#34;访问量 \u0026lt;span id=\u0026#34;busuanzi_value_page_pv\u0026#34; style=\u0026#34;color: rgb(13, 109, 252); font-weight: bold;\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 次 本站总访问量 \u0026lt;span id=\u0026#34;busuanzi_value_site_pv\u0026#34; style=\u0026#34;color: rgb(13, 109, 252); font-weight: bold;\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 次 本站总访客数 \u0026lt;span id=\u0026#34;busuanzi_value_site_uv\u0026#34; style=\u0026#34;color: rgb(13, 109, 252); font-weight: bold;\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 人 \u0026lt;/span\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/center\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!--一言API--\u0026gt; \u0026lt;script src=\u0026#34;https://v1.hitokoto.cn/?encode=js\u0026amp;select=%23hitokoto\u0026#34; defer\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!--延迟加载范围到这里结束--\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!--延迟加载配套使用JS--\u0026gt; \u0026lt;script\u0026gt; let interval = setInterval(() =\u0026gt; { if (document.querySelector(\u0026#34;.footer\u0026#34;)) { document.querySelector(\u0026#34;#customize\u0026#34;).style.display = \u0026#34;\u0026#34;; clearInterval(interval); } }, 200); \u0026lt;/script\u0026gt; \u0026lt;!-- 渐变背景初始化,如果要使用渐变背景把下面的那一行注释去掉即可--\u0026gt; \u0026lt;!-- 下面的几行都是渐变的一套,自定义头部内还有一个关联的自定义CSS --\u0026gt; \u0026lt;!--\u0026lt;canvas id=\u0026#34;canvas-basic\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt; --\u0026gt; \u0026lt;script src=\u0026#34;https://npm.elemecdn.com/granim@2.0.0/dist/granim.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; var granimInstance = new Granim({ element: \u0026#39;#canvas-basic\u0026#39;, direction: \u0026#39;left-right\u0026#39;, isPausedWhenNotInView: true, states : { \u0026#34;default-state\u0026#34;: { gradients: [ [\u0026#39;#a18cd1\u0026#39;, \u0026#39;#fbc2eb\u0026#39;], [\u0026#39;#fff1eb\u0026#39;, \u0026#39;#ace0f9\u0026#39;], [\u0026#39;#d4fc79\u0026#39;, \u0026#39;#96e6a1\u0026#39;], [\u0026#39;#a1c4fd\u0026#39;, \u0026#39;#c2e9fb\u0026#39;], [\u0026#39;#a8edea\u0026#39;, \u0026#39;#fed6e3\u0026#39;], [\u0026#39;#9890e3\u0026#39;, \u0026#39;#b1f4cf\u0026#39;], [\u0026#39;#a1c4fd\u0026#39;, \u0026#39;#c2e9fb\u0026#39;], [\u0026#39;#fff1eb\u0026#39;, \u0026#39;#ace0f9\u0026#39;] ] } } }); \u0026lt;/script\u0026gt; ","date":"2024-02-04T00:00:00Z","image":"https://pic.imgdb.cn/item/65f013c89f345e8d03fc5210.webp","permalink":"http://localhost:5678/p/alist-modify/","title":"Alist自定义美化"},{"content":"前言： 整理服务器时发现部署的 Subconverter 后端一直出问题，无法正确转换，经过搜索发现了一个前后端加短链的 Docker 整合版，相比较原项目前后端，有如下优点：\nDocker Compose部署十分方便 前端界面美观 远程配置和自定义后端选择框比较明显 https://github.com/stilleshan/subweb\n部署教程 1. 安装 Docker 1 2 3 curl -sSL https://get.docker.com | bash systemctl enable docker systemctl start docker 2. 安装 Docker compose 1 2 3 4 sudo curl -L \u0026#34;https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$(uname -s)-$(uname -m)\u0026#34; -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose # 测试安装 docker-compose --version 3. 部署网站 部署两个网站，并配置好证书。一个用作短链，一个用作订阅转换前后端。\n4. 下载 compose 文件 1 2 3 4 cd ~ mkdir subconverter cd subconverter wget https://raw.githubusercontent.com/stilleshan/dockerfiles/main/sub/docker-compose.yml 5. 修改配置 将下载的 compose文件中第 16 行的域名改为自己的短链\n6. 部署程序 1 2 cd /root/subconverter docker-compose up -d 完成后文件夹下会多出两个文件夹，/data \u0026amp; /conf，在 conf/config.js文件中修改对应的地址：\n1 2 3 apiUrl: \u0026#39;\u0026lt;http://web.sub.com\u0026gt;\u0026#39;, # 订阅转换 shortUrl: \u0026#39;\u0026lt;https://a.cc\u0026gt;\u0026#39;, # 短链 # 13行的短链地址也要更换 7. 反向代理 订阅转换前后端的反向代理目标 url：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # 订阅转换前后端的目标url http://127.0.0.1:18080 # 短链反向代理配置(可直接添加到配置文件)： location / { proxy_redirect off; proxy_pass http://127.0.0.1:8002; add_header \u0026#39;Access-Control-Allow-Origin\u0026#39; \u0026#39;*\u0026#39;; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-Ssl on; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Frame-Options SAMEORIGIN; client_max_body_size 100m; client_body_buffer_size 128k; } 💡 如果不需要短链服务，只需要在 compose 文件中删除第 12-32 行,将默认使用作者短链接，也可以修改 conf/config.js 使用其他短链接服务。\n参考 stilleshan/subweb ","date":"2024-01-27T00:00:00Z","image":"https://pic.imgdb.cn/item/65f00c8c9f345e8d03e0d8b8.webp","permalink":"http://localhost:5678/p/sub-web/","title":"订阅转换之二：subweb项目"},{"content":"前言 请注意，本教程仅用于学习目的，切勿将其用于非法用途。使用本教程搭建面板需要遵循法律法规，谨慎使用相关技术。\n1. 安装宝塔面板 7.7 1 2 3 4 5 6 7 8 9 # 更新系统和安装 wget、curl apt-get update -y \u0026amp;\u0026amp; apt-get install wget -y \u0026amp;\u0026amp; apt-get install curl -y # 安装宝塔面板 curl -sSO \u0026lt;https://raw.githubusercontent.com/zhucaidan/btpanel-v7.7.0/main/install/install_panel.sh\u0026gt; \u0026amp;\u0026amp; bash install_panel.sh # 删除登录验证 sed -i \u0026#34;s|if (bind_user == \u0026#39;True\u0026#39;) {|if (bind_user == \u0026#39;REMOVED\u0026#39;) {|g\u0026#34; /www/server/panel/BTPanel/static/js/index.js rm -rf /www/server/panel/data/bind.pl 2. 配置宝塔面板 安装如下： Nginx 1.22.1 PHP 8.2 + MySQL 10.11.6-MariaDB Redis 7.0.11 phpMyAdmin 4.9 Pure-Ftpd 1.0.49 安装 PHP 扩展：fileinfo、redis、yaml。 删除 PHP 被禁用函数：proc_open、proc_get_status、putenv。 3. 创建网站并添加 SSL 证书 4. 下载并安装面板源码 1 2 3 cd /www/wwwroot # 版本参考 GitHub git clone -b 2023.6 https://github.com/Anankke/SSPanel-Uim.git 5. 设置站点运行目录和伪静态 站点目录设置为 /www/wwwroot/SSPanel-Uim/public，关闭防跨站攻击。 编辑 Nginx 配置文件，在 location / 下添加： 1 2 3 location / { try_files $uri /index.php$is_args$args; } 重启 Nginx。 6. 设置站点根目录整体权限 1 chmod -R 775 /www/wwwroot/SSPanel-Uim 7. 编辑网站配置文件 将 appprofile.example.php 重命名为 appprofile.php。 将 .config.example.php 重命名为 .config.php。 编辑 .config.php，填写必要的参数。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 $_ENV[\u0026#39;key\u0026#39;] = \u0026#39;abcde\u0026#39;; //Cookie加密密钥，请务必修改此key为随机字符串 $_ENV[\u0026#39;appName\u0026#39;] = \u0026#39;sspanel\u0026#39;; //站点名称 $_ENV[\u0026#39;baseUrl\u0026#39;] = \u0026#39;\u0026lt;https://www.aaa.com\u0026gt;\u0026#39;; //站点地址,结尾不要带斜杠 $_ENV[\u0026#39;muKey\u0026#39;] = \u0026#39;abcde\u0026#39;; //WebAPI密钥，用于节点服务端与面板通信 $_ENV[\u0026#39;db_database\u0026#39;] = \u0026#39;database\u0026#39;; //数据库名 $_ENV[\u0026#39;db_username\u0026#39;] = \u0026#39;user\u0026#39;; //数据库用户名 $_ENV[\u0026#39;db_password\u0026#39;] = \u0026#39;password\u0026#39;; //用户名对应的密码 $_ENV[\u0026#39;enable_login_bind_ip\u0026#39;] = false; //是否将登陆和IP绑定,建议false $_ENV[\u0026#39;checkNodeIp\u0026#39;] = false; //是否webapi验证节点ip,建议false $_ENV[\u0026#39;cloudflare_enable\u0026#39;] = true; //是否开启 Cloudflare 解析 $_ENV[\u0026#39;cloudflare_email\u0026#39;] = \u0026#39;aa@gmail.com\u0026#39;; //Cloudflare 邮箱地址 $_ENV[\u0026#39;cloudflare_key\u0026#39;] = \u0026#39;key\u0026#39;; //Cloudflare API Key $_ENV[\u0026#39;cloudflare_name\u0026#39;] = \u0026#39;www.aaa.com\u0026#39;; //站点域名 // ...其他参数 8. 站点初始化 1 2 3 4 5 6 7 8 9 10 11 12 13 cd /www/wwwroot/SSPanel-Uim # 切换为PHP8.2 sudo ln -sf /www/server/php/82/bin/php /usr/bin/php wget https://getcomposer.org/installer -O composer.phar php composer.phar php composer.phar install --no-dev php xcat Migration new php xcat Tool importAllSettings php xcat Tool createAdmin # 将目录权限用户设为 www chmod -R 755 /www/wwwroot/SSPanel-Uim 9. 设置定时任务 1 2 3 4 5 6 7 8 9 10 11 # 安装 cron sudo apt-get install cron # 编辑定时任务 crontab -e # 添加以下任务 */5 * * * * /usr/bin/php /www/wwwroot/SSPanel-Uim/xcat Cron # 保存并退出，重启 cron systemctl restart cron 10. 修改节点订阅下发端口问题 面板会将用户端口下发为ss节点端口\n在 SSPanel-Uim/src/Services/Subscribe 目录下，除了 base.php、Trojan.php、V2ray.php 之外的文件都需要修改。 在每个文件的 foreach ($nodes_raw as $node_raw) { 后添加以下代码： 1 2 3 4 5 6 # 在 foreach ($nodes_raw as $node_raw) { 这一行的下一行添加下面这一行代码： $node_custom_config = json_decode($node_raw-\u0026gt;custom_config, true); # 在if ((int) $node_raw-\u0026gt;sort === 0) { 这一行的下一行添加下面这一行代码： $ss_port = $node_custom_config[\u0026#39;offset_port_user\u0026#39;] ?? ($node_custom_config[\u0026#39;offset_port_node\u0026#39;] ?? $user-\u0026gt;port); # 这里是指按照 offset_port_user、offset_port_node、用户端口的顺序加载端口 将后面 $links 开头的代码中的 $user-\u0026gt;port 改为 $ss_port。 11. 重启服务器 1 reboot 参考 Streamerfans之家 ","date":"2024-01-26T00:00:00Z","image":"https://pic.imgdb.cn/item/65f01aa99f345e8d03171a8d.webp","permalink":"http://localhost:5678/p/sspanel/","title":"SSPanel Uim部署及修复SS订阅下发教程"},{"content":"问题 在部署一个站点时，在安装了 PHP 7.4 的情况下安装 PHP 8.2，然而安装完成后启动报错。\n具体报错内容如下：\n1 /www/server/php/82/sbin/php-fpm: symbol lookup error: /www/server/php/82/sbin/php-fpm:undefined symbol: crypto_pwhash_scryptsalsa208sha256_opslimit_interactive 解决 直接谷歌搜索报错内容，发现宝塔面板论坛有相关问题：php无法启动的N种常见错误解决教程 情况七，给出的解决办法是重新编译安装，然而编译安装后仍未解决（也有成功的，可以先试试）。CSDN 也有相关问题，并在 Serverfault找到了解决方法，来源在文末。\n方法就是重新编译安装 libsodium\n具体步骤如下：\n删除 usr/local/lib目录下相关 libsodium文件 下载 tar 包，并解压 1 2 3 wget \u0026lt;https://download.libsodium.org/libsodium/releases/libsodium-1.0.19-stable.tar.gz\u0026gt; # 建议稳定版 \u0026lt;https://download.libsodium.org/libsodium/releases/\u0026gt; tar -zxvf libsodium-1.0.19-stable.tar.gz 编译安装 1 2 3 4 cd ./libsodium-stable ./configure make \u0026amp;\u0026amp; make check sudo make install 完成后即可成功启动。\n参考 Serverfault php无法启动的N种常见错误解决教程 CSDN Libsodium 官方文档 ","date":"2024-01-26T00:00:00Z","image":"https://pic.imgdb.cn/item/65f018ca9f345e8d030fc1a6.webp","permalink":"http://localhost:5678/p/php/","title":"记录一次PHP启动失败"},{"content":"**前言：**在众多下载管理器中，IDM（Internet Download Manager）以其强大的功能和稳定的性能脱颖而出，成为许多用户的首选下载工具之一。IDM不仅能够加速下载速度，还具备智能任务管理、断点续传、调度下载等一系列实用功能，极大地提升了下载文件的效率。之前的破解版很多已经不能使用，因此这里介绍新发现的工具。\n⚠️本教程仅供学习和研究使用，如果你决定采用这种方法，那么风险自负。\n1.安装 IDM 首先，你需要在官方网站上下载 IDM 的安装包。下载完成后，按照提示进行安装。安装过程中可能会提示你关闭浏览器等软件，以保证安装顺利完成。IDM的安装过程非常简单，只需要按照提示一步步操作即可。\n2.IDM 破解方法 本教程的工具来自以下网站：\n[Microsoft Activation Scripts]\nIDM Activation Script\n方法一 打开Powershell工具，不是CMD 粘贴如下命令 1 irm [https://massgrave.dev/ias](https://massgrave.dev/ias) | iex 打开后界面如下：\n选择选项1安装即可 方法二 在点这个下载或点这个下载)压缩包并解压。 解压后的文件夹内运行IAS.cmd文件，即可看到破解界面。 🤗 总结 通过以上步骤，你应该已经学会了如何在Windows系统上安装和破解 IDM。但是，如果有能力仍然建议你购买正版软件，以支持软件开发者的工作并保证自己的电脑安全。在享受便利的同时，也要注重合法合规，尊重软件开发者的辛勤努力。\n📎 参考文章 Microsoft Activation Scripts 引用文章 ","date":"2024-01-21T00:00:00Z","image":"https://pic.imgdb.cn/item/65dc4aef9f345e8d031516e3.webp","permalink":"http://localhost:5678/p/idm/","title":"Windows安装IDM下载器并解除限制"},{"content":"**前言：**在Typora写笔记时不免使用图片，这里使用GitHub作图床，配合PicList上传，并通过jsdelivr实现CDN加速。\n一. 准备 首先在 GitHub 中创建一个新的公共仓库。接下来生成一个新的 Token，地址为https://github.com/settings/tokens， Token 权限需要勾选write:packages和read:packages\nToken 只显示一次，忘记了需要重新生成，注意保存\n二. 创建网站 在服务器上创建一个新的网站和数据库，将下面项目打包后放入网站根目录并解压。 autoPicCDN\n将项目中的数据库文件pic.sql上传到数据库中并替换覆盖 三. 修改参数 在 up.php 中修改参数：\n一般选择 GitHub USER 填写用户名 REPO 填写仓库名 TOKEN 填写第一步的TOKEN 数据库信息只需修改 dbname user pass，与第二步中一致 四. 配置 PicList 下载 PicList（PicGo基础上开发） 或者 Picgo，地址如下： PicList\nPicGo\n安装 web-uploader插件 配置上传参数，填好后确认 API 地址填写up.php路径，如www.pic.com/up.php POST 参数名填写 pic JSON 路径填写 data.url 五. 配置 Typora 依次打开文件-\u0026gt;偏好设置-\u0026gt;图像 插入图片时选择“上传图片” 在最下方上传服务设定选择对应的应用 PicList或者 PicGo ","date":"2023-08-03T00:00:00Z","image":"https://pic.imgdb.cn/item/65dc41809f345e8d03fcc5fb.webp","permalink":"http://localhost:5678/p/piclist/","title":"Typora配合PicList快速上传图片并加速 "},{"content":"Background 在零假设检验 （Null Hypothesis Significant Test, NHST）中四个相互关联的统计量：样本量、效应量、alpha水平和统计功效。这四个变量中，如果我们确定了其中的三个，就可以计算出第四个未知的变量。 样本量，simple size。一些方法学的研究者建议，如果无法确定所研究对象的效应量，那么每个实验条件的观测数目最好大于50（Simmons， 2003）。 效应量，effect size。效应量，表示两个总体分布的重叠程度，反映处理效应大小的度量。如果说P值是判断显著性是还是否的标准，效应量可以视为量化条件间差异或相似程度的指标。有时候，可能两个实验条件之间差异显著，但是实际上效应量很小，这种显著的统计结果也不一定具有现实应用意义。效应量可分为以下三类： 简单效应量。简单效应量通常是效应组与对照组平均值之差。APA(美国心理学会)建议，当简单效应量具有实际的实践意义时(如3个月的运动减肥干预可以减少脂肪多少千克)，可考虑采用简单效应量。 标准化效应量。由于简单效应量受到量纲、整体变异大小等因索限制，不便于研究间的比较。标准化效应量则通过标准化数据解决了这些问题(如Cohen’s d等)。 相关效应量。相关效应量则是指自变量与应变量的相关程度(如决定系数等)，相关研究往往要求报道结果的简单效应量和相关效应量，如在回归方程中应报道决定系数或校正决定系数已成为基本要求. 统计功效或统计检验力，power。统计功效指某检验能够正确地拒绝一个错误的虚无假设的能力，用1-β表示。在实验设计中，power反映了假设检验能够正确检测到真实实验操纵效应的能力。一般而言，根据Cohen的说法，一个统计检验力为0.8及以上的研究才算比较高，所以一般power设置为0.8 (Cohen, 1992). G-power的实际应用 需要进行一个32（被试间被试内）的混合实验设计，已知power=0.8，a=0.05，需要进行F检验，不知道到效应量和样本量。 对于未知的效应量： 如果研究对象已经有元分析，最好使用元分析中报告的效应量。 如果没有元分析，但是有相关的前人研究，可以按照下列教程进行计算具体某个研究的效应量。 如果既没有元分析，也没有前人文献····如果无法确定所研究对象的效应量，那么每个实验条件的观测数目最好大于50（Simmons， 2003）（actually， I am not sure about this suggestion）。 效应量的数量，对于F-test而言，每个统计效应都可以计算出一个对应的效应量，例如A变量主效应，B变量主效应，A*B交互效应以及事后的t检验都存在对应的power analysis。但大家一般并不把所有的功效分析都计算一遍，只聚焦在关键的统计效应上。这一点在计算前人文献效应量和计算事前设计的样本量时都需要注意，务必保持前后所选择的计算对象是一致的。 效应量的类型 在计算效应量之前，需要了解ANOVA分析常见的效应量指标，及其指标之间的转换方法。 方差分析中常见的两类效应量指标就是eta方和f （胡竹菁，2011）。Gpower所采用的效应量指标是f（Cohen, 1977），而SPSS中ANOVA分析报告的效应量指标为偏eta方。 效应量的大小 根据Cohen的建议，f小于0.1为小的效应；f在0.25左右为中等效应；f大于0.4属于大的效应（ Cohen, J., 1988）。0.2的偏eta方对应的效应量f在0.5左右。一般而言，中等和较大的效应量也是可以被接受的，但这仅仅适用于实在找不到前人相似研究的情况。只要前人有类似的研究或元分析，还是要按照前人的结果去计算效应量。 第一步 计算前人已发表文献中的效应量f（如果没有元分析的话） 首先你需要找到与当前研究主题相似的前人研究\n打开G-power，Test family 选择F-tests Statistical test这里,如前所述，同一种ANOVA分析具体也有多种选择。注意选择取决于实验目的。选择最关键的。 Type of power analysis. 这里用不到设置，默认即可。 点击Input Parameters下的Determine，打开具体的计算面板。具体而言，又有三种计算方法： 一种是如果选择的between factors，三种方法都可以使用。可以根据平均值（means）和标准差（SD）进行计算效应量。也可以使用下面两种方法。 From variances 直接使用偏eta方（partial Eta squared）计算效应量f。这个最简单，但是有的研究中没有提供这个指标。 根据前人文献结果部分ANOVA的结果，选择合适的效应量计算方法。输入参数，点击Calculate, 得到这篇研究的ES。 然后，需要从多个相似研究中收集其ES。一般情况，所有找到的研究并不一定会报告同样类型的效应量指标。 收集完之后，需要将不同类型的效应量指标转换为同种类型的效应量指标，如ANOVA的f指标。 转换完之后，计算所有效应量的平均值。计算好的平均值用于后续的功效分析。 第二步 计算事前实验设计的样本量 此时，假设你已经通过元分析或者前人文献得到了效应量的值，那么NHST四个指标已知其3，只有样本量未知。\nType of power analysis. 选择\u0026quot;A prior compute required sample size - given a, power and effect size\u0026quot;. 设置Input Parameters。一般，power = 0.8 (or higher), a err prob = 0.05 (or 0.01)。其他参数的填写: Number of groups：被试间变量有几个水平。 Number of measurements: 被试内变量有几个水平. Corr among rep measures: 被试内变量几个水平间的相关性 Nonsphericity correlation: Highest value is 1.0, and lowest value = 1/[repetitions – 1]. Determine if sphericity assumption is met (1), something else if not met (0). What is the Sphericity Assumption? When running repeated measures the variances of the differences between all possible pairs of the within subjects variable should be equivalent. For example, if an outcome variable is measured at time1, time2, and time3, the variances of the differences between time1 - time2, time1 - time3, and time2 - time3 should be roughly the same. 点击右下角Calculate, 计算出样本量。 第三步，Reprots of power analysis 需要报告的信息：\n模型类型（ANOVA or t-test） 每一个估计参数的具体值 效应量（ES）的具体来源（元分析还是前人实证研究结果），如何确定的效应量大小 References 非常全面的样例示范，强烈推荐： http://www.mormonsandscience.com/gpower-guide.html http://www.biostathandbook.com/power.html Simmons, J. P., et al. (2013). \u0026ldquo;Life after p-hacking.\u0026rdquo; http://52brain.com/blog-3811-1472.html http://www.openedscience.org/?p=45 Cohen, J. (1992). \u0026ldquo;A power primer.\u0026rdquo; Psychological Bulletin 112(1): 155. Cunningham, J. B. and E. McCrum-Gardner (2007). \u0026ldquo;Power, effect and sample size using GPower: practical issues for researchers and members of research ethics committees.\u0026rdquo; Evidence-Based Midwifery 5(4): 132-137. Simmons, J. P., et al. (2013). \u0026ldquo;Life after p-hacking.\u0026rdquo; 胡竹菁, \u0026amp; 戴海琦. (2011). 方差分析的统计检验力和效果大小的常用方法比较. 心理学探新, 31(3), 254-259. http://www.statisticssolutions.com/effect-size-for-a-power-analysis/ Cohen, J. (1988). Statistical power analysis for the behavioral sciences. 2nd. New York, Psychology Press. ","date":"2023-08-01T00:00:00Z","image":"https://pic.imgdb.cn/item/65dc4b779f345e8d031659f6.webp","permalink":"http://localhost:5678/p/gpower/","title":"Gpower计算效应量"},{"content":"fNIRS Data Preprocessing使用步骤 本文是近红外数据分析步骤，适用于joint Simon task，使用 宏程序fNIRS Data Preprocessing 以及其他宏程序完成，ETG7100型号设备数据格式为编号_HBA_Probe1_Oxy.csv，编号自定义，最好写成sub001_run1这种形式，命名最好采用单数，即第1对被试为sub01，第2对为sub03，方便后续分割两个被试的数据。\nfNIRS Data Preprocessing 宏程序介绍 程序界面包括三部分，步骤选择、设置、文件列表查看，如下图。\n主要使用步骤为首先选择源数据路径，粘贴进对话框后点击File List查看是否正确，然后在 Type of calculation 选择程序，点击Set 设置，设置无误后点击 Start开始。\n脑内激活（Intra-brain activation） 前面步骤使用 fNIRS Data Preprocessing程序完成，十三步后可使用自定义宏程序。\nStep01. Hitachi 使用 Excel 程序Hitachi更新数据格式\n输入目标文件的路径保存 Oxy 数据，按 File List 按钮 从Type of Calculation中选择Hitachi，按Set按钮 按 Start开始程序 结束后程序不会输出新的文件 Step02. Trigger Check 输入目标文件路径，按 File List 按钮 输入结果文件Trigger.xlsx的保存路径 从Type of Calculation中选择Trigger Check，按Set按钮 按 Start开始程序，对话框中输入 1 结束后程序会输出新的文件 Trigger.xlsx Step03. 格式转换 xlsx to mat 打开 Matlab，路径选择到 Hitachi后的文件路径，左侧出现文件后即成功 输入下列代码转换格式 1 2 3 4 5 6 7 8 9 10 for i = 1:9 # i代表 sub0 后的数量 这里表示 sub01到 sub09 for j = 1:2 # j 代表run数量，有几个修改一下即可 for k = 1:4 # k 代表 Probe数量，即光极片数量 a = [\u0026#39;sub0\u0026#39;,num2str(i),\u0026#39;_run\u0026#39;, num2str(j),\u0026#39;_HBA_Probe\u0026#39;, num2str(k),\u0026#39;_Oxy.csv\u0026#39;] xlsread(a,1) b = [\u0026#39;sub0\u0026#39;,num2str(i),\u0026#39;_run\u0026#39;, num2str(j),\u0026#39;_HBA_Probe\u0026#39;, num2str(k),\u0026#39;_Oxy.mat\u0026#39;] save(b) end end end 上述代码可以修改 01-09编号的被试数据，如果要修改10以后的数据，可以将第4 、6行代码中 sub0 改为 sub1 回车键执行代码，被试超过10需要多次执行 Step04. 带通滤波(bandpass-filter) 使用 Matlab代码进行带通滤波（通常设置0.01-0.1Hz）（作用是降噪）,将 matlab代码文件和转换格式后的文件放到一个文件夹下\n将bandpass-filter设置为当前路径 打开 M 文件data_bpfilt.m，将fs修改为正确采样率（默认设置为fs=10）并保存 打开filt_all.m，设置正确的文件路径，该路径需包含data_bpfilt.m文件,文件路径后记得加“\\” 按Run按钮运行filt_all.m代码 Step05. 将 txt 格式转为 xlsx 文件 将 Eprime数据 txt 格式文件整理到一起 使用 Make xls files程序读取 需要输入源文件路径和保存路径 保存后会输出新的 xlsx 文件 Step06. 提取行为数据 输入源文件路径 选择 BehavData_gather程序 结束后不会生成新的文件，会在原有文件生成新的工作表 Step07. 整合行为数据 输入目标文件 Eprime (.xls)的路径，按 File List按钮 输入行为数据的目标保存路径 输入行为数据的文件名（保留“EprimeData.xlsx”） 输入包含行为数据的表格编号，这里为 2 选择 Gather the files，并开始程序 Step08. 添加 Mark 打开第 7 步后生成的文件 EprimeData.xlsx\n输入包含带通滤波后的Oxy的目标文件的路径(第4步)\n输入“Sheet number of the data”，这里为 1\n选择 Mark Add，Set 并 Start\n结束后可再执行一次 Trigger Check 程序，步骤与 Step02一致，Step02第4步对话框选择时输入 2\n前八步都是进行mark补充的功能，如果Eprime编实验程序时，设置刺激出现前打一个mark，刺激刚出现时打一个mark，刺激出现结束后两秒打一个mark。Mark在设计程序时就已经打好的话，那么前八步就不用操作了。\nStep09. 基线校正和Z分数转换 使用添加 mark 后的 oxy文件，如果文件少 mark 会报错 使用程序Baseline correction 结束后不会生成新的文件 Step10. 分离条件 输入基线校正和Z分数转换后的数据路径 选择程序 Data Cut (mode1) 结束后不会生成新的文件 Step11. 计算平均脑激活 输入分离条件后的数据文件夹为源文件夹 选择程序 Average Calculation计算平均脑激活 结束后不会生成新的文件 Step12. 将所有被试数据按条件整合 输入包含平均脑激活的目标文件的路径 输入保存文件的目标路径 输入文件名保存不同实验条件的平均脑激活数据，Condition1/2/3/4，并选择相应的Sheet number，第1个条件在 Sheet1，以此类推 选择程序 Gather the files，按 Set 并 Start Step13. 将所有被试数据集中到一个 Sheet 输入包含Condition文件目标文件的路径 选择程序 Data Gather(mode1) 按 Set 并 Start Step14. 整合条件 接下来步骤需要自己新建宏程序 在个人宏工作簿中点击 开发工具-Visual Basic 点击插入-模块 输入下列代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 Option Explicit Sub 组内整合条件() Dim ws As Worksheet Dim wb As Workbook Dim newWb As Workbook Dim myPath As String Dim myFile As String Dim i As Long Dim col As Long Dim lastRow As Long Dim header As Range Dim filtereRange As Range Dim filterValue As String Application.ScreenUpdating = False \u0026#39; 获取当前文件夹路径\u0026#39; myPath = InputBox(\u0026#34;请输入文件路径:\u0026#34;) \u0026amp; \u0026#34;\\\u0026#34; myFile = Dir(myPath \u0026amp; \u0026#34;*.xlsx\u0026#34;) \u0026#39; 新建all_condition工作簿\u0026#39; Set newWb = Workbooks.Add newWb.SaveAs myPath \u0026amp; \u0026#34;all_condition.xlsx\u0026#34; Set ws = newWb.Worksheets(1) col = 3 \u0026#39; 遍历目录下的所有Excel文件\u0026#39; Do While myFile \u0026lt;\u0026gt; \u0026#34;\u0026#34; If myFile \u0026lt;\u0026gt; \u0026#34;all_condition.xlsx\u0026#34; Then \u0026#39; 打开原始工作簿\u0026#39; Set wb = Workbooks.Open(myPath \u0026amp; myFile) \u0026#39; 复制第2个工作表的第3到6列到新工作簿\u0026#39; With wb.Worksheets(\u0026#34;Sheet1DataListSPSS\u0026#34;) lastRow = .Cells(.Rows.Count, 3).End(xlUp).Row .Range(.Cells(1, 3), .Cells(lastRow, 6)).Copy ws.Cells(1, col) End With \u0026#39; 补充表头\u0026#39; For i = 1 To 4 ws.Cells(1, col + i - 1).Value = ws.Cells(1, col + i - 1).Value \u0026amp; \u0026#34;_\u0026#34; \u0026amp; Replace(myFile, \u0026#34;.xlsx\u0026#34;, \u0026#34;\u0026#34;) Next i col = col + 4 wb.Close SaveChanges:=False End If myFile = Dir Loop \u0026#39;复制第一个原始工作簿的前两列\u0026#39; Set wb = Workbooks.Open(myPath \u0026amp; Dir(myPath \u0026amp; \u0026#34;Condition1.xlsx\u0026#34;)) With wb.Worksheets(\u0026#34;Sheet1DataListSPSS\u0026#34;) lastRow = .Cells(.Rows.Count, 1).End(xlUp).Row .Range(.Cells(1, 1), .Cells(lastRow, 2)).Copy ws.Cells(1, 1) End With wb.Close SaveChanges:=False \u0026#39; 保存新工作簿修改\u0026#39; newWb.Save \u0026#39; 复制第一个工作表\u0026#39; ws.Copy After:=ws Set ws = newWb.Worksheets(2) \u0026#39; 添加subject列\u0026#39; ws.Columns(2).Insert ws.Cells(1, 1).Value = \u0026#34;subject_pair\u0026#34; ws.Cells(1, 2).Value = \u0026#34;subject\u0026#34; \u0026#39; 修改subject列内容\u0026#39; lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row For i = 2 To lastRow Dim parts() As String parts = Split(ws.Cells(i, 1).Value, \u0026#34;_\u0026#34;) If InStr(parts(2), \u0026#34;Probe1\u0026#34;) \u0026gt; 0 Or InStr(parts(2), \u0026#34;Probe2\u0026#34;) \u0026gt; 0 Then ws.Cells(i, 2).Value = parts(0) \u0026amp; \u0026#34;_\u0026#34; \u0026amp; parts(1) Else ws.Cells(i, 2).Value = \u0026#34;sub\u0026#34; \u0026amp; Format(CInt(Mid(parts(0), 4)) + 1, \u0026#34;000\u0026#34;) \u0026amp; \u0026#34;_\u0026#34; \u0026amp; parts(1) \u0026#39; 交换第3到6列和第7到10列\u0026#39; Dim temp As Variant Dim j As Long Dim k As Long For j = 4 To 7 temp = ws.Cells(i, j).Value ws.Cells(i, j).Value = ws.Cells(i, j + 4).Value ws.Cells(i, j + 4).Value = temp Next j \u0026#39; 交换第11到14列和第15到18列\u0026#39; For k = 12 To 15 temp = ws.Cells(i, k).Value ws.Cells(i, k).Value = ws.Cells(i, k + 4).Value ws.Cells(i, k + 4).Value = temp Next k End If Next i \u0026#39; 删除第1列并排序\u0026#39; ws.Columns(1).Delete ws.Sort.SortFields.Clear ws.Sort.SortFields.Add Key:=ws.Range(\u0026#34;A2\u0026#34;), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal ws.Sort.SortFields.Add Key:=ws.Range(\u0026#34;B2\u0026#34;), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal With ws.Sort .SetRange ws.Range(\u0026#34;A1\u0026#34;).CurrentRegion .Header = xlYes .MatchCase = False .Orientation = xlTopToBottom .SortMethod = xlPinYin .Apply End With \u0026#39; Turn on screen updating\u0026#39; Application.ScreenUpdating = True newWb.Save End Sub 保存后运行，输入 Step13 后的文件路径后点击确定开始 **注意：**这里程序会将 Probe1 \u0026amp; 2的数据 和Probe3 \u0026amp; 4的数据分开，将 Probe3 \u0026amp; 4的数据编号加1，如果被试编号不是单数命名则不能使用此程序\n同时程序会将被试对中第2个被试的 condition1 和 condition2的数据交换，condition3 和 condition4的数据交换。原因如下：\nEprime 程序中 Mark 设置为 condition1 为 左侧-红色刺激，condition2为 右侧-绿色刺激，condition3为 右侧-红色刺激，condition2为 左侧-绿色刺激，因此交换后被试对中两名对应的一致性和反应性相符。\nStep15. 切分通道 新建一个宏程序，粘贴下面代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 Option Explicit \u0026#39;切分通道 Sub 组内切分通道() Dim wbSource As Workbook Dim wsSource As Worksheet Dim wsNew As Worksheet Dim rngData As Range Dim cell As Range Dim filterValue As Variant Dim dict As Object Dim key As Variant \u0026#39; 1. 选择要执行的工作簿，将输入的工作簿第2个工作表设置为活动表 Set wbSource = Workbooks.Open(Application.GetOpenFilename(FileFilter:=\u0026#34;Excel Files (*.xls; *.xlsx; *.xlsm),*.xls; *.xlsx; *.xlsm\u0026#34;)) Set wsSource = wbSource.Worksheets(2) wsSource.Activate \u0026#39; 2. 根据第2列值筛选表格数据 Set rngData = wsSource.Range(\u0026#34;A1\u0026#34;).CurrentRegion Set dict = CreateObject(\u0026#34;Scripting.Dictionary\u0026#34;) \u0026#39; a. 重复值只筛选一次，空白值不筛选，从第2列第2个单元格开始筛选 For Each cell In rngData.Columns(2).Cells If cell.Row \u0026gt; 1 And Not IsEmpty(cell.Value) Then dict(cell.Value) = 1 End If Next cell \u0026#39; b. 根据筛选值创建新表，表名字为筛选值 \u0026#39; c. 将筛选后的值保存到对应名字的新表中 \u0026#39; d. 筛选结束后取消筛选 Application.ScreenUpdating = False For Each key In dict.keys wsSource.Rows(1).AutoFilter Field:=2, Criteria1:=key Set wsNew = wbSource.Worksheets.Add(After:=wbSource.Worksheets(wbSource.Worksheets.Count)) wsNew.Name = key rngData.SpecialCells(xlCellTypeVisible).Copy Destination:=wsNew.Range(\u0026#34;A1\u0026#34;) wsSource.Rows(1).AutoFilter Next key \u0026#39; 3. 删除第1个和第二个工作表 Application.DisplayAlerts = False wbSource.Worksheets(1).Delete wsSource.Delete Application.DisplayAlerts = True \u0026#39; 4. 将剩余工作表中第2列删除 For Each wsNew In wbSource.Worksheets wsNew.Columns(2).Delete Next wsNew \u0026#39; 5. 保存工作簿到当前工作簿下 wbSource.SaveAs wbSource.Path \u0026amp; \u0026#34;\\\u0026#34; \u0026amp; Left(wbSource.Name, InStrRev(wbSource.Name, \u0026#34;.\u0026#34;) - 1) \u0026amp; \u0026#34;_split\u0026#34; Application.ScreenUpdating = True MsgBox \u0026#34;操作完成\u0026#34; End Sub wbSource.SaveAs 选择 Step14 后的文件路径后执行 Step16. 平均 run 新建一个宏程序保存下面代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 Sub AverageRuns() Dim originalWorkbook As Workbook Dim newWorkbook As Workbook Dim originalWorksheet As Worksheet Dim newWorksheet As Worksheet Dim runCount As Integer Dim rowCount As Integer Dim colCount As Integer Dim currentRow As Integer Dim currentCol As Integer Dim sum As Double Dim count As Integer Dim average As Double \u0026#39;获取当前活动的工作簿\u0026#39; Set originalWorkbook = ActiveWorkbook \u0026#39;通过对话框获取run次数\u0026#39; runCount = InputBox(\u0026#34;请输入run次数:\u0026#34;, \u0026#34;输入run次数\u0026#34;) \u0026#39;创建一个新的工作簿，用于保存平均后的结果\u0026#39; Set newWorkbook = Workbooks.Add \u0026#39;循环处理每个工作表\u0026#39; For Each originalWorksheet In originalWorkbook.Worksheets \u0026#39;添加一个新的工作表，并将名称设置为原名称+_average\u0026#39; Set newWorksheet = newWorkbook.Worksheets.Add(After:=newWorkbook.Worksheets(newWorkbook.Worksheets.Count)) newWorksheet.Name = originalWorksheet.Name \u0026amp; \u0026#34;_average\u0026#34; \u0026#39;获取行数和列数\u0026#39; rowCount = originalWorksheet.Cells(Rows.Count, 1).End(xlUp).Row colCount = originalWorksheet.Cells(1, Columns.Count).End(xlToLeft).Column \u0026#39;添加行标题\u0026#39; For currentCol = 2 To colCount newWorksheet.Cells(1, currentCol).Value = originalWorksheet.Cells(1, currentCol) Next currentCol \u0026#39;添加列标题并计算每个被试每个通道的均值\u0026#39; currentRow = 2 For i = 2 To rowCount Step runCount newWorksheet.Cells(currentRow, 1).Value = Left(originalWorksheet.Cells(2 + runCount * (currentRow - 2), 1), 6) For currentCol = 2 To colCount sum = 0 count = 0 For k = i To i + runCount - 1 If Not IsEmpty(originalWorksheet.Cells(k, currentCol)) Then If originalWorksheet.Cells(k,currentCol) \u0026lt;\u0026gt; 0 Then sum = sum + CDbl(originalWorksheet.Cells(k, currentCol).Value) count = count + 1 End If End If Next k If count \u0026gt; 0 Then average = sum / count Else average = 0 End If newWorksheet.Cells(currentRow, currentCol).Value = average Next currentCol currentRow = currentRow + 1 Next i Next originalWorksheet \u0026#39;保存新的工作簿到当前文件夹下\u0026#39; newWorkbook.SaveAs originalWorkbook.Path \u0026amp; \u0026#34;\\\u0026#34; \u0026amp; originalWorkbook.Name \u0026amp; \u0026#34;_average.xlsx\u0026#34; newWorkbook.Close SaveChanges:=True End Sub 将需要处理的文件放到一个文件夹内，并打开第一个文件的第一个工作表 运行程序，输入run的次数 程序运行结束后可将16步的结果文件导入到 SPSS 进行重复测量方差分析。\n脑间同步（Inter-brain neural synchronization ） Step01 - Step09 与脑内激活处理步骤相同，可直接使用脑内 Step 09 结果进行脑间 Step10 操作\nStep10. 分离条件 输入基线校正和Z分数转换后的数据路径 选择程序 Data Cut (mode2) 结束后不会生成新的文件 Step11. 将所有被试数据按条件整合 输入包含 Data Cut(mode2)目标文件的路径 输入保存文件的目标路径 输入文件名保存不同实验条件的平均脑激活数据，Condition1/2/3/4，并选择相应的Sheet number，第1个条件在 Sheet1，以此类推 选择程序 Gather the files，按 Set 并 Start Step12. 将所有被试数据集中到一个 Sheet 输入包含Condition文件目标文件的路径 选择程序 Data Gather(mode2) 按 Set 并 Start Step13. 计算基于 INS 的相关矩阵 此步骤会计算出被试对中两名被试的激活值之间的相关，包括同对伪时间序列的相关矩阵\n输入 Step12 后的文件路径 选择程序 Correlation Cal，按 Set 并 Start Step14. 提取相关数据 此步骤后需要自定义宏程序\n在个人宏工作簿新建一个宏程序，输入如下代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 Option Explicit Sub 组间提取相关数据() Dim folderPath As String Dim fileName As String Dim wbSource As Workbook, wbNew As Workbook Dim wsSource As Worksheet, wsTrueCol As Worksheet, wsPesudoCol As Worksheet Dim cellCorrMatrix As Range, cellPseudoCorrMatrix As Range Dim startCell As Range Dim i As Long, j As Long Dim newRowTrue As Long, newRowPesudo As Long \u0026#39; 选择目录 With Application.FileDialog(msoFileDialogFolderPicker) If .Show = -1 Then folderPath = .SelectedItems(1) Else Exit Sub End If End With If Right(folderPath, 1) \u0026lt;\u0026gt; \u0026#34;\\\u0026#34; Then folderPath = folderPath \u0026amp; \u0026#34;\\\u0026#34; \u0026#39; 遍历目录下的所有工作簿 fileName = Dir(folderPath \u0026amp; \u0026#34;*.xls*\u0026#34;) Application.ScreenUpdating = False Do While fileName \u0026lt;\u0026gt; \u0026#34;\u0026#34; Set wbSource = Workbooks.Open(folderPath \u0026amp; fileName) \u0026#39; 创建新工作簿并命名工作表 Set wbNew = Workbooks.Add Set wsTrueCol = wbNew.Worksheets(1) wsTrueCol.Name = \u0026#34;True_Col\u0026#34; Set wsPesudoCol = wbNew.Worksheets.Add(After:=wsTrueCol) wsPesudoCol.Name = \u0026#34;Pesudo_Col\u0026#34; newRowTrue = 2 newRowPesudo = 2 \u0026#39; 遍历原始工作簿的所有工作表 For Each wsSource In wbSource.Worksheets Set cellCorrMatrix = wsSource.Cells.Find(\u0026#34;Correlation matrix\u0026#34;) Set cellPseudoCorrMatrix = wsSource.Cells.Find(\u0026#34;Correlation matrix (pseudo)\u0026#34;) chCounts = Application.WorksheetFunction.CountA(wsSource.Rows(1)) \\ 2 wsSource.Rows(1).Cells(1).Resize(, chCounts).Copy Destination:=wsTrueCol.Cells(1, 2) wsSource.Rows(1).Cells(1).Resize(, chCounts).Copy Destination:=wsPesudoCol.Cells(1, 2) \u0026#39; 提取相关值 If Not cellCorrMatrix Is Nothing Then Set startCell = cellCorrMatrix.Offset(50, 1) For i = 0 To chCounts - 1 \u0026#39;i = 0 \u0026#39;Do While Not IsEmpty(startCell.Offset(i, i)) wsTrueCol.Cells(newRowTrue, i + 2).Value = startCell.Offset(i, i).Value wsTrueCol.Cells(newRowTrue, 1).Value = Left(wsSource.Name, 11) \u0026#39;i = i + 1 \u0026#39;Loop Next i newRowTrue = newRowTrue + 1 End If \u0026#39; 提取伪相关值 If Not cellPseudoCorrMatrix Is Nothing Then Set startCell = cellPseudoCorrMatrix.Offset(50, 1) \u0026#39;j = 0 \u0026#39;Do While Not IsEmpty(startCell.Offset(j, j)) For j = 0 To chCounts - 1 wsPesudoCol.Cells(newRowPesudo, j + 2).Value = startCell.Offset(j, j).Value wsPesudoCol.Cells(newRowPesudo, 1).Value = Left(wsSource.Name, 11) \u0026#39;j = j + 1 \u0026#39;Loop Next j newRowPesudo = newRowPesudo + 1 End If Next wsSource \u0026#39; 保存新工作簿 wbNew.SaveAs folderPath \u0026amp; Left(wbSource.Name, InStrRev(wbSource.Name, \u0026#34;.\u0026#34;) - 1) \u0026amp; \u0026#34;_ColExt.xlsx\u0026#34; wbNew.Close SaveChanges:=False wbSource.Close SaveChanges:=False fileName = Dir Loop Application.ScreenUpdating = True MsgBox \u0026#34;提取相关数据完成！\u0026#34; End Sub 运行宏程序，选择上一步结果的路径 Step15. 平均 run 与脑内步骤一致，将需要处理的文件放到一个文件夹内 打开第1个文件第1个工作表，运行宏程序 Step16. 配对样本 t 检验 对所有通道的脑间相关数据与伪随机数据进行配对样本T检验，这里使用 R 进行\n将 Step15后的数据放到一个文件夹 建立一个文本文件，输入如下代码保存，并将文件后缀改为 .r 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 # # 安装需要的包 if (!require(readxl)) install.packages(\u0026#34;readxl\u0026#34;) if (!require(writexl)) install.packages(\u0026#34;writexl\u0026#34;) if (!require(tidyverse)) install.packages(\u0026#34;tidyverse\u0026#34;) if (!require(effsize)) install.packages(\u0026#34;effsize\u0026#34;) #if (!require(lsr)) install.packages(\u0026#34;lsr\u0026#34;) library(readxl) library(writexl) library(tidyverse) library(effsize) #library(lsr) # 程序名称为\u0026#34;t检验\u0026#34; t_test \u0026lt;- function() { # 选取工作目录 setwd(choose.dir()) # 选取目录下所有excel工作簿循环执行程序 files \u0026lt;- list.files(path = getwd(), pattern = \u0026#34;\\\\.xlsx$\u0026#34;, full.names = TRUE) ttest_result_list \u0026lt;- list() for (file in files) { # 读取工作簿内的两个工作表 sheet1 \u0026lt;- read_excel(file, sheet = 1) sheet2 \u0026lt;- read_excel(file, sheet = 2) # 初始化结果数据框 ttest_res \u0026lt;- data.frame(Column = character(), p = numeric(), t = numeric(), d = numeric(), stringsAsFactors = FALSE) # 从第2列开始进行t检验和Cohen\u0026#39;s d计算 for (col_idx in 2:ncol(sheet1)) { data1 \u0026lt;- sheet1[-1, col_idx] data2 \u0026lt;- sheet2[-1, col_idx] data1_num \u0026lt;- as.matrix(data1) data2_num \u0026lt;- as.matrix(data2) ttest \u0026lt;- t.test(data1_num, data2_num, paired = TRUE, var.equal = TRUE, conf.level = 0.95) cohen_d \u0026lt;- cohen.d(data1_num, data2_num) ttest_res \u0026lt;- rbind(ttest_res, data.frame(Column = colnames(sheet1)[col_idx], p = ttest$p.value, t = ttest$statistic, d = abs(cohen_d$estimate), stringsAsFactors = FALSE)) } filename \u0026lt;- sub(\u0026#34;.xlsx\u0026#34;, \u0026#34;\u0026#34;, basename(file)) # 将每一个工作簿的结果保存至ttest_result对应的工作表内，名称为执行程序的工作簿的名称 ttest_result_list[[filename]] \u0026lt;- ttest_res } # 将每一次t检验的结果输出至一个新的工作簿，名称为\u0026#34;ttest_result\u0026#34;保存在当前目录下 write_xlsx(ttest_result_list, \u0026#34;ttest_result.xlsx\u0026#34;) infoMes \u0026lt;- \u0026#34;检验完成!\u0026#34; print(infoMes) } # 运行t检验程序 t_test() 打开 R，点击 文件---运行 r 脚本文件，选择刚才的代码文件运行 Step17. 切分通道 选择 Step15 运行后的结果文件路径，注意是第15步 新建一个宏程序，粘贴如下代码，并运行： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 Option Explicit Sub 组间切分通道() Dim fDialog As FileDialog, sFolderPath As String Dim oFSO As Object, oFolder As Object, oFile As Object Dim oOriginalWorkbook As Workbook, oNewWorkbook As Workbook Dim oOriginalWorksheet As Worksheet, oNewWorksheet As Worksheet Dim lLastCol As Long, lLastRow As Long, i As Long, j As Long, k As Long Dim sFileName As String, sSheetName As String \u0026#39; 选择文件夹 Set fDialog = Application.FileDialog(msoFileDialogFolderPicker) fDialog.Title = \u0026#34;选择工作目录\u0026#34; fDialog.AllowMultiSelect = False If fDialog.Show \u0026lt;\u0026gt; -1 Then Exit Sub sFolderPath = fDialog.SelectedItems(1) Application.ScreenUpdating = False \u0026#39;创建结果文件夹 MkDir sFolderPath \u0026amp; \u0026#34;\\result\u0026#34; \u0026#39; 创建新工作簿 \u0026#34;all_condition_split\u0026#34; Set oNewWorkbook = Workbooks.Add oNewWorkbook.SaveAs sFolderPath \u0026amp; \u0026#34;\\result\u0026#34; \u0026amp; \u0026#34;\\\u0026#34; \u0026amp; \u0026#34;all_condition_split.xlsx\u0026#34; \u0026#39; 遍历工作目录下的所有Excel文件 Set oFSO = CreateObject(\u0026#34;Scripting.FileSystemObject\u0026#34;) Set oFolder = oFSO.GetFolder(sFolderPath) k = 1 For Each oFile In oFolder.Files If oFSO.GetExtensionName(oFile.Name) = \u0026#34;xlsx\u0026#34; Or oFSO.GetExtensionName(oFile.Name) = \u0026#34;xls\u0026#34; Then If oFile.Name \u0026lt;\u0026gt; \u0026#34;all_condition_split.xlsx\u0026#34; Then \u0026#39; 打开原始工作簿 Set oOriginalWorkbook = Workbooks.Open(oFile.Path) Set oOriginalWorksheet = oOriginalWorkbook.Worksheets(2) \u0026#39; 新建工作表 If k = 1 Then lLastCol = oOriginalWorksheet.Cells(1, Columns.Count).End(xlToLeft).Column For i = 2 To lLastCol sSheetName = oOriginalWorksheet.Cells(1, i).Value Set oNewWorksheet = oNewWorkbook.Worksheets.Add(, oNewWorkbook.Worksheets(oNewWorkbook.Worksheets.Count)) oNewWorksheet.Name = sSheetName oNewWorksheet.Cells(1, 1).Value = oOriginalWorksheet.Cells(1, 1).Value Next i End If \u0026#39; 复制数据到新工作簿 For i = 2 To lLastCol Set oNewWorksheet = oNewWorkbook.Worksheets(i) lLastRow = oOriginalWorksheet.Cells(Rows.Count, i).End(xlUp).Row oOriginalWorksheet.Range(oOriginalWorksheet.Cells(2, i), oOriginalWorksheet.Cells(lLastRow, i)).Copy oNewWorksheet.Cells(2, k + 1) oNewWorksheet.Cells(1, k + 1).Value = Split(oFile.Name, \u0026#34;_\u0026#34;)(0) \u0026#39; 复制第一列数据到新工作簿 oOriginalWorksheet.Range(oOriginalWorksheet.Cells(2, 1), oOriginalWorksheet.Cells(lLastRow, 1)).Copy oNewWorksheet.Cells(2, 1) Next i k = k + 1 oOriginalWorkbook.Close False End If End If Next oFile \u0026#39; 保存新工作簿 oNewWorkbook.Save oNewWorkbook.Close \u0026#39; 打开 \u0026#34;all_condition_split\u0026#34; 工作簿 Set oNewWorkbook = Workbooks.Open(sFolderPath \u0026amp; \u0026#34;\\result\u0026#34; \u0026amp; \u0026#34;\\\u0026#34; \u0026amp; \u0026#34;all_condition_split.xlsx\u0026#34;) \u0026#39; 循环操作每个工作表 For Each oNewWorksheet In oNewWorkbook.Worksheets lLastRow = oNewWorksheet.Cells(Rows.Count, 1).End(xlUp).Row oNewWorksheet.Range(oNewWorksheet.Cells(2, 3), oNewWorksheet.Cells(lLastRow, 3)).Copy oNewWorksheet.Cells(lLastRow + 1, 2) oNewWorksheet.Range(oNewWorksheet.Cells(2, 5), oNewWorksheet.Cells(lLastRow, 5)).Copy oNewWorksheet.Cells(lLastRow + 1, 4) oNewWorksheet.Range(oNewWorksheet.Cells(2, 1), oNewWorksheet.Cells(lLastRow, 1)).Copy oNewWorksheet.Cells(lLastRow + 1, 1) \u0026#39; 删除第3列和第5列 oNewWorksheet.Columns(5).Delete oNewWorksheet.Columns(3).Delete Next oNewWorksheet \u0026#39; 保存修改并关闭 oNewWorkbook.Save oNewWorkbook.Close Application.ScreenUpdating = True MsgBox \u0026#34;切分通道完成，结果保存在当前文件夹 result 目录下!\u0026#34; End Sub 程序运行结束后可将17步的结果文件导入到 SPSS 进行重复测量方差分析。\n","date":"2023-05-13T00:00:00Z","image":"https://pic.imgdb.cn/item/65f021be9f345e8d03339c1b.webp","permalink":"http://localhost:5678/p/fnirs/","title":"近红外数据分析步骤"},{"content":" 注意：Surge 更改了方式，目前已不需要此模块。\n前言 很多应用在开启时会检测是否开启代理，如果开启则无法正常使用，这里记录一下如何解决此类问题。\n跳过代理 有的应用只需要设跳过代理即可解决。\n首先打开 Surge 的 工具-最近请求，查找目标 APP 的 域名，然后在首页-更多设置中将其添加入跳过代理的列表中。\n如果此种方法不能解决，可尝试以下两种方法。\n兼容模式 对于第一种方法无法解决的 APP ，可以打开 Surge 的兼容模式，位置在首页-更多设置-兼容性-Tun-Only。这种方法设置简单，然而存在一定问题。\n部分应用在启动时会检查是否配置了代理，如果检查到代理就会停止工作（如浦发银行）。这是一种不专业的做法，代理既不会降低安全性，也是在企业网络下一种常见的配置。\nSurge 在启动时，为了实现多种复杂功能，会同时配置虚拟代理设置和虚拟 VPN，从而引发上述应用的反代理检查。（部分同类应用没有此问题是因为只配置了虚拟 VPN）\n该问题可通过开启 Surge 的兼容性模式 VIF Only 解决，但是开启后会导致 HTTP 相关高级功能失效，不推荐。\nSurge 手册\n如果希望更好地解决可使用第三种方法。\n快捷指令 此方法其实是创建一个自动化的快捷指令，在每次打开特定应用时打开兼容模式，关闭应用时再关闭兼容模式，因为 Surge 模块的优先级比配置更高，因此使用模块控制兼容模式的开关，然后通过 API 控制模块的开关。\n1. 打开 Surge HTTP API 功能 首先打开 Surge 的 API 功能。在配置文件 General 下加入如下设置：\n1 2 [General] http-api = 你的密码@127.0.0.1:7170 2. 创建模块 创建一个模块控制兼容模式的开关，可以建立本地模块也可使用外部链接。\n模块内容如下：\n1 2 3 4 5 6 #!name=TUN Only #!desc=开启 Tun Only 兼容模式，解决某些 APP 不能正常连接的问题 #!system=ios [General] compatibility-mode = 3 3. 新建快捷指令 创建打开和关闭应用的快捷指令，步骤如下：\n选择 App -已打开，然后选择目标应用，点击下一步后 添加操作，搜索 URL，并选择 获取URL内容，然后填入相关内容。\n这里：\nURL 填“http://127.0.0.1:7170/v1/modules”\n方法选择 POST\n头部这里添加文本，键填入 X-Key，文本填写密码\n添加新的请求体，类型选择布尔值，键填写模块名称，值设置为 True\n上述参数可自由更改，配置文件中的端口以及密码需要和快捷指令中相对应。\n最后把运行前询问关闭。这样打开应用的快捷指令就设置完毕了，然后再添加一个关闭应用的快捷指令，只需要在选择 APP 后把 已打开改为已关闭即可。\n*最后：**如果嫌设置麻烦也可以使用其他应用如 Qx，网上也有大佬收集了可能会跳出代理提示的应用并整理成了模块可直接引用，不过不支持买单吧这类 APP，链接地址如下： VirgilClyne 的 GitHub\n参考 本文内容全部来源于以下博客：\nBAI YUN ","date":"2022-09-23T00:00:00Z","image":"https://pic.imgdb.cn/item/65dc44029f345e8d030343ea.webp","permalink":"http://localhost:5678/p/surge/","title":"解决Surge部分应用代理提示"},{"content":"英文写作最重要：线性写作\n标题 尽量简单，不要花哨 用一个句子 引言 第一段话告诉读者除了结果之外的一切\n第一句话 奶奶名言（motherhood statement）定义一下 为什么研究它 GAP 为什么要填补空白 你的研究问题 第二段 主题句\n主题句要写出来 第三段\n介绍现有的研究 思路回归到研究内容 第四段\n再次讲研究目的和研究方法（参与者、材料和程序） 最后一段\n你期望的结果是什么（假设） 假设和结果一致 方法 研究是否注册 参与者 材料和程序和在一起写 线性写作 有图介绍研究流程和刺激 结果 结果和假设联系 为检验假设做…检验 有图 讨论 第一段\n论文的摘要、目的、如何研究、主要结果是什么 第二段\n第一个重要结果 意义段落\n理论贡献 实际贡献 缺陷段落\n不要写很多 第一个写最大的问题 接下来要做的或已经做的弥补一个缺陷 指出你不会做但应该做的理想研究 结论段落\n重复讨论第一段及研究的意义 最后一句话：奶奶名言 其他要点 翻译 DeepL 最好 其次Google cover letter 为什么希望论文在期刊发表 没有同时审查 伦理 审稿人 不要博士、大牛 写作要简单 use vs utilize first vs firstly 使用主动语态 尽可能多使用第一人称 使用短句 写简短的段落 Introduction Overview\n介绍研究背景 声明当前知识结构下存在的 Gap 声明为什么解决 Gap 是重要的 社会意义 容易明确应用研究（开展临床干预、教育计划） 对于更纯粹的研究：过程或主题本身可能构成应用研究的基础。（如理解认知过程） 介绍为什么此研究可以解决 Gap Gap\n已有理论和实证研究中的分歧 两种理论、两个模型或两个作者之间的分歧 已有实证研究存在的方法学缺陷 特定研究主题的缺失（如首次将一种方法应用于一种主题） 一个主题中实证研究数量不足 Opening 主要为了引起兴趣，尽量避免使用专业术语，内容包括：\n研究问题及其重要性 当前研究中的 Gap 本研究的目的 六种策略：\n反问 日常体验 类比/隐喻 惊人的统计数据或事实 历史事实 先前研究的缺乏 Literature Review 文献综述主要聚焦于：\n证实某实证研究的系列研究方面 对相关研究选择性的陈述展现 回顾、元分析、系统分析 最近的实证研究 重要的实证研究 从一般问题到具体问题的过渡 当前研究的历史背景 已知的和未知的，一致认可的和有争议的 Current Study 从引言到方法的过渡转换\n应概述以下：\n研究设计 关键变量的操作定义，包括实验操作的任何变量、主要因变量 研究设计（The experimental/research design） 研究设置（The study setting） link设计和目的 声明此设计如何实现实验目的 陈述预期结果 预期结果的原因 假设的细节 Methods Participants 数量 如何选择 人口学信息 剔除标准 Materials 必要的硬件信息(如果研究涉及精确测量，设备一定要具体) 问卷 来源 问卷结构（问卷是用来测量变量的，不是测量假设） 项目数 1-3个例题 信效度 Procedure 指导语(introduction) 他们被告知实验是关于什么的 知情同意 是否使用欺骗手段 被试是否被告知敏感信息的机密性 被试分配 如何分配(是否随机，是否匹配) 参与者是否将自己分配到自变量的水平？ 实验操作 如何对待不同条件被试(不要重复材料部分内容) 持续时间(duration) 汇报 被试是否进行了书面汇报或研究人员进行了口头汇报 Results 不要解释\n第一段：统计分析的概括\n其余部分：对每个研究问题(说明正在评估的假设;报告结果)\n一般包括：描述统计、推论统计、有帮助的图表\nHow to proceed\n每个结果参考假设 描述与研究问题直接相关的所有结果 先写有统计结果支持的假设（显著的） 报告不显著的结果 最后报告其他结果 如果有许多结果（很多变量或者变量很多水平） 写一个简短的总结，然后小节中讨论每个变量 先报告主效应再报告交互 简要提及数据丢失，在讨论部分详述 注意：\n提及所有相关信息 与假设不符或不显著也要报告 不要包含原始数据，是在总结结果，不要所有细节都报告 如果文中不写，不要展示图表 不要呈现两次相同数据 Discussion 是文章的框架部分，回到引言中设置的重要性论点（写讨论之前先看引言）\noutline\n概述发现(Paragraph 1) 研究问题及假设(数据是否支持假设) 发现的概述 与之前的研究有何关联 每个研究问题，每段一个。描述与先前研究相关的新发现(Paragraph 2-4) 相似发现：证实研究 不同发现：解释可能原因 已存理论：是否证实 局限和未来方向(Paragraph 5) 2-4条局限，每条提供未来方向 多大程度上为假设提供了充分检验 伦理问题 方法是否有缺陷 数据是否支持其他理论 相关意义(Paragraph 6) 可以推广到哪里 实际意义 进一步朝什么方向发展 结束(Paragraph 7) 再次概述发现 指出独特贡献 最重要的影响 discuss：\n新研究假设如何被验证 领域知识如何被新数据改变 discussion:\n对从结果的解释开始 然后向外扩展至一般领域背景 讨论什么：\nclaim 向已知领域添加新内容（we are the first to show) corroborate 支持已知内容 clarify 扩展或改进已知内容 conflict 与已知相反或有冲突 Do and Don\u0026rsquo;t Do 提供上下文并解释为什么应该关心 强调阳性结果 展望未来 Don\u0026rsquo;t 不要简单重复结果 从对关键发现的有说服力的单段总结开始 然后进一步将发现置于上下文中 回到文献中并努力理解你的发现意味着什么，包括 与前人研究是否相适 如果与前人结果不同，解释 将讨论限制在几个重要点 不要夸大其词 不要离数据太远 不要简单结束 处工作局限性外，建议后续研究 ","date":"2022-08-31T00:00:00Z","permalink":"http://localhost:5678/p/thesis-writing/","title":"英文论文写作"},{"content":" 更新：网上找到的一键脚本，更加方便\n1 2 3 4 # ubuntu apt-get install -y wget \u0026amp;\u0026amp; wget -O install.sh https://cdn.mxlong.com/install/subweb/install.sh \u0026amp;\u0026amp; chmod +x ./install.sh \u0026amp;\u0026amp; ./install.sh # centos yum install -y wget \u0026amp;\u0026amp; wget -O install.sh https://cdn.mxlong.com/install/subweb/install.sh \u0026amp;\u0026amp; chmod +x ./install.sh \u0026amp;\u0026amp; ./install.sh 前言 目前各个平台的代理软件的格式各不相同，各个服务厂商通常会提供给我们各个软件的订阅链接，但一些比较小的厂商提供的链接有限，或者提供的分流策略组不符合我们的预期，这个时候我们可以通过转换工具转换成我们所用软件的链接格式，或者使用自己修改的策略组实现更加灵活的分流。\n准备工作 VPS一台 两个解析的域名，二级域名即可 所用项目：\n前端：sub-web\n后端：subconverter\n步骤 后端搭建 首先解析一个域名用作后端访问，这里以 backend.domain.com 为例，实际以自己的域名为准。 连接VPS后，下载并解压后端程序，可以使用如下命令，也可以使用宝塔面板，下载程序后解压。 1 2 3 cd /opt # 这里是程序安装目录，可以自行更换 wget https://github.com/tindy2013/subconverter/releases/download/v0.8.1/subconverter_linux64.tar.gz tar -zxvf subconverter_linux64.tar.gz 完成以后在 /opt 文件夹下会出现 subconverter文件夹，出现如下结构：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 . ├── subconverter │ ├── base │ ├── cache │ ├── config │ ├── generate.ini │ ├── gistconf.ini │ ├── pref.example.ini │ ├── pref.example.toml │ ├── pref.example.yml │ ├── pref.toml │ ├── profiles │ ├── rules │ ├── snippets │ └── subconverter └── subconverter_linux64.tar.gz 修改相关配置参数 找到如下文件：\n/opt/subconverter/pref.toml，修改下面两个参数：\n1 2 api_access_token = \u0026#34;密码可以随意更改，也不用记住\u0026#34; # 大概在第7行 managed_config_prefix = \u0026#34;https://backend.domain.com\u0026#34; # 改成解析的后端域名，大概在第149行 这里需要注意以下两点：\n配置文件按照 pref.toml pref.yml pref.ini 的顺序加载第一次解压程序后会发现只有pref.example.toml 文件，这时候可以在程序所在目录 /opt/subconverter 手动运行一下程序：./subconverter，文件就会出现。\n创建开机自启服务 在终端窗口输入如下命令，全部粘贴回车即可\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 cat \u0026gt; /etc/systemd/system/sub.service \u0026lt;\u0026lt;EOF [Unit] Description=Subconverter After=network.target [Service] Type=simple LimitAS=infinity LimitRSS=infinity LimitCORE=infinity LimitNOFILE=65535 ExecStart=/opt/subconverter/subconverter Restart=on-failure RestartSec=10 [Install] WantedBy=multi-user.target EOF 如果修改了后端的运行目录，上边命令中第12行运行位置也要相应更改。\n设置开机自启：\n1 2 3 4 systemctl enable sub # 开机自启 systemctl start sub # 启动 systemctl restart sub # 重启 systemctl status sub # 查看运行状态 到这里后端地址是 http://127.0.0.1:25500/sub?，由于上边修改了 managed_config_prefix，这时候我们需要反向代理。\n以后端域名新建一个站点 这里以宝塔为例，新建站点后打开设置，点击 反向代理，设置如下内容\n保存后添加 SSL访问，至此后端搭建完成。\n前端搭建 首先可以新建一个前端站点目录，无需数据库，新建后配置好 SSL，这里以 web.domain.com 为例。 前端项目需要用到 Node 和 Yarn ，因此首先安装： 1 2 3 4 5 6 apt update \u0026amp;\u0026amp; apt upgrade apt install nodejs apt install yarn # 完成后使用如下命令查看是否安装成功 node -v yarn --version 下载 sub-web 命令下载到当前目录，默认为 /root，下载的位置可以自行选择，可以下载到前端站点目录中下（首先进入/web.domain.com后再执行如下命令）\n1 2 git clone https://github.com/CareyWang/sub-web.git cd sub-web 安装依赖 1 yarn install 修改后端配置及策略组文件 找到/root/sub-web/src/views/Subconverter.vue 文件，打开后在258行找到如下内容并修改，即将本地地址修改为后端地址，也可以添加多个后端地址。\n1 2 3 backendOptions: [{ value: \u0026#34;http://127.0.0.1:25500/sub?\u0026#34; }] ↓ backendOptions: [{ value: \u0026#34;https://backend.domain.com/sub?\u0026#34; }] 然后随后在下边的 remoteConfig 后修改策略组配置地址，可以根据文件的格式添加，这里给出 ACL4SSR规则配置，remoteConfig[后回车复制即可。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 { label: \u0026#34;ACL4SSR\u0026#34;, options: [ { label: \u0026#34;ACL4SSR_Online 默认版 分组比较全 (与Github同步)\u0026#34;, value: \u0026#34;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online.ini\u0026#34; }, { label: \u0026#34;ACL4SSR_Online_AdblockPlus 更多去广告 (与Github同步)\u0026#34;, value: \u0026#34;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_AdblockPlus.ini\u0026#34; }, { label: \u0026#34;ACL4SSR_Online_NoAuto 无自动测速 (与Github同步)\u0026#34;, value: \u0026#34;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_NoAuto.ini\u0026#34; }, { label: \u0026#34;ACL4SSR_Online_NoReject 无广告拦截规则 (与Github同步)\u0026#34;, value: \u0026#34;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_NoReject.ini\u0026#34; }, { label: \u0026#34;ACL4SSR_Online_Mini 精简版 (与Github同步)\u0026#34;, value: \u0026#34;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Mini.ini\u0026#34; }, { label: \u0026#34;ACL4SSR_Online_Mini_AdblockPlus.ini 精简版 更多去广告 (与Github同步)\u0026#34;, value: \u0026#34;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Mini_AdblockPlus.ini\u0026#34; }, { label: \u0026#34;ACL4SSR_Online_Mini_NoAuto.ini 精简版 不带自动测速 (与Github同步)\u0026#34;, value: \u0026#34;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Mini_NoAuto.ini\u0026#34; }, { label: \u0026#34;ACL4SSR_Online_Mini_Fallback.ini 精简版 带故障转移 (与Github同步)\u0026#34;, value: \u0026#34;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Mini_Fallback.ini\u0026#34; }, { label: \u0026#34;ACL4SSR_Online_Mini_MultiMode.ini 精简版 自动测速、故障转移、负载均衡 (与Github同步)\u0026#34;, value: \u0026#34;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Mini_MultiMode.ini\u0026#34; }, { label: \u0026#34;ACL4SSR_Online_Full 全分组 重度用户使用 (与Github同步)\u0026#34;, value: \u0026#34;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Full.ini\u0026#34; }, { label: \u0026#34;ACL4SSR_Online_Full_NoAuto.ini 全分组 无自动测速 重度用户使用 (与Github同步)\u0026#34;, value: \u0026#34;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Full_NoAuto.ini\u0026#34; }, { label: \u0026#34;ACL4SSR_Online_Full_AdblockPlus 全分组 重度用户使用 更多去广告 (与Github同步)\u0026#34;, value: \u0026#34;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Full_AdblockPlus.ini\u0026#34; }, { label: \u0026#34;ACL4SSR_Online_Full_Netflix 全分组 重度用户使用 奈飞全量 (与Github同步)\u0026#34;, value: \u0026#34;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Full_Netflix.ini\u0026#34; }, { label: \u0026#34;ACL4SSR 本地 默认版 分组比较全\u0026#34;, value: \u0026#34;config/ACL4SSR.ini\u0026#34; }, { label: \u0026#34;ACL4SSR_Mini 本地 精简版\u0026#34;, value: \u0026#34;config/ACL4SSR_Mini.ini\u0026#34; }, { label: \u0026#34;ACL4SSR_Mini_NoAuto.ini 本地 精简版+无自动测速\u0026#34;, value: \u0026#34;config/ACL4SSR_Mini_NoAuto.ini\u0026#34; }, { label: \u0026#34;ACL4SSR_Mini_Fallback.ini 本地 精简版+fallback\u0026#34;, value: \u0026#34;config/ACL4SSR_Mini_Fallback.ini\u0026#34; }, { label: \u0026#34;ACL4SSR_BackCN 本地 回国\u0026#34;, value: \u0026#34;config/ACL4SSR_BackCN.ini\u0026#34; }, { label: \u0026#34;ACL4SSR_NoApple 本地 无苹果分流\u0026#34;, value: \u0026#34;config/ACL4SSR_NoApple.ini\u0026#34; }, { label: \u0026#34;ACL4SSR_NoAuto 本地 无自动测速 \u0026#34;, value: \u0026#34;config/ACL4SSR_NoAuto.ini\u0026#34; }, { label: \u0026#34;ACL4SSR_NoAuto_NoApple 本地 无自动测速\u0026amp;无苹果分流\u0026#34;, value: \u0026#34;config/ACL4SSR_NoAuto_NoApple.ini\u0026#34; }, { label: \u0026#34;ACL4SSR_NoMicrosoft 本地 无微软分流\u0026#34;, value: \u0026#34;config/ACL4SSR_NoMicrosoft.ini\u0026#34; }, { label: \u0026#34;ACL4SSR_WithGFW 本地 GFW列表\u0026#34;, value: \u0026#34;config/ACL4SSR_WithGFW.ini\u0026#34; } ] }, 打包网站 执行如下命令可打包网站：\n1 yarn build 完成后会在 /root/sub-web/文件夹下生成一个 dist目录，这个目录就是网站的全部内容，可以将里面所有内容复制到前端站点的目录，如果是将前端下载到了站点目录而不是根目录，可以在宝塔面板中设置网站的运行目录，选择为 /dist即可。\n如需要修改前端的配置，如加入更多的策略组配置文件，修改 /root/sub-web/src/views/Subconverter.vue 文件后，再在 /root/sub-web 目录下执行 yarn build 命令，随后再把 /dist 目录下内容替换到网站目录。\n至此前后端都已搭建完毕，打开前端地址即可正常使用。\n参考 参考地址1 参考地址2 参考地址3 ","date":"2022-08-22T00:00:00Z","image":"https://pic.imgdb.cn/item/65f00c8c9f345e8d03e0d8b8.webp","permalink":"http://localhost:5678/p/subconverter/","title":"订阅转换之一：subconverter加sub-web项目"},{"content":"Bitwarden 简介 Bitwarden 是一款免费开源的密码管理软件，同时官方提供了 docker 镜像，将服务端部署在自己的设备上。Bitwarden 官方 docker 要求服务器内存在 2G 以上，但有大佬使用 Rust 进行重写，项目名为 vaultwarden, 降低了配置要求,地址如下： Github 地址\n如果不是特别担心密码安全，还是建议使用官方服务端，自建和官方并没有什么差别\n安装 1. 部署 Docker 服务 方法一：宝塔面板 首先安装好宝塔面板并配置好环境，这里采用的是LNMP，PHP 版本7.4，同时创建一个站点，不需要数据库。在软件商店第 3 页 找到 Docker 管理器并安装。\n打开 Docker 管理器，点击 镜像管理，再点击 获取镜像，如果是国内机器可以使用镜像加速：\n1 2 \u0026lt;https://docker.mirrors.ustc.edu.cn/\u0026gt; # 也可自行寻找其他地址 然后将以下镜像名称填入输入框：vaultwarden/server，之后点击 获取镜像。\n点击容器列表→创建容器，弹出创建容器界面后按如下填写四部分内容，并修改容器名称：\n容器端口为80 服务器(TCP)端口可以自定义，这里使用6789 服务器目录自定义，这里使用站点目录 容器目录填写/data 内存配额按照自己服务器配置填写 端口映射和目录映射填写完成记得点击 + 添加，否则无效\n方法二：命令行 上述步骤也可直接使用命令安装（前提已安装 docker）\n1 2 3 4 5 6 7 8 # 安装 vaultwarden/拉取镜像 docker pull vaultwarden/server:latest # 创建容器 (domain.com 换成自己的网站目录) docker run -d --name vaultwarden -v /www/wwwroot/domain.com/:/data/ -p 6789:80 vaultwarden/server:latest # 上述命令中： # -v 参数后格式为\u0026lt;主机目录:容器目录\u0026gt; # -p 参数后格式为\u0026lt;主机端口:容器端口\u0026gt; # --name 后为容器名称 2. 添加反向代理 在面板网站设置中的站点设置添加反向代理\n目标 URL 填写 http://127.0.0.1:6789，端口即为上边服务器的端口，之后点击提交\n3. 注册账号 此时即可通过域名访问服务，点击创建账号，填写相应信息即可创建管理员账号。\n在官网下载相应的客户端以及浏览器插件\n客户端点此下载\n使用前需在设置页面填写自定义服务地址：\n4. 关闭注册 如果不希望别人注册账号可以自己注册账号后在管理器中先停止容器，再删除容器，然后重新创建一个不开启注册功能的容器，已注册的账户及数据仍然存在,然后运行如下命令再次创建容器，并重启容器。\n一定先停止再删除\n1 2 3 4 docker run -d --name vaultwarden -e SIGNUPS_ALLOWED=false -v /www/wwwroot/domain.com/:/data/ -p 6789:80 vaultwarden/server:latest # 停止及重启容器 docker stop vaultwarden docker start vaultwarden 更新 如果需要更新，直接拉取最新镜像，停止并删除旧容器，创建新容器\n1 2 3 4 5 6 7 8 # 拉取最新镜像 docker pull vaultwarden/server:latest # 停止旧容器 docker stop vaultwarden # 删除旧容器 docker rm vaultwarden # 创建新容器 docker run -d --name vaultwarden -e SIGNUPS_ALLOWED=false -v /www/wwwroot/domain.com/:/data/ -p 6789:80 vaultwarden/server:latest ","date":"2022-07-22T00:00:00Z","image":"https://pic.imgdb.cn/item/65dc436d9f345e8d0301ccba.webp","permalink":"http://localhost:5678/p/bitwarden/","title":"宝塔面板部署Bitwarden密码管理"},{"content":"原理解释 了解一下原理有助于软件的使用。不想看也可以直接跳到下一节。以下是非专业人士的理解，如有错误请指出。\n首先需要知道，我们所有的网络活动都是进行数据交换，这些数据存储在服务器上，服务器可以理解为配置很高的电脑。我们浏览网页或者观看视频的过程就是向存储这些内容的服务器发起请求，然后服务器给我们返回内容，就像你要在图书馆看书，告诉管理员我要看哪一本书，然后管理员找到这本书交给你。只是这个过程再稍微复杂一点，也就是我们找书给书的过程需要遵循一定的准则，也就是网络通讯的协议。 目前网络通讯的主要协议为 TCP/IP 协议。为了能让我们能准确拿到想要的东西，所有的计算机设备都会分配一个唯一的IP地址，也就是说IP地址和我们的设备绑定，IP的形式为32位的二进制数，通常被分割为4个“8位二进制数”，用点分十进制表示为 a.b.c.d 的形式，abcd的取值为 0-255 间的十进制整数，以上内容为 IPv4 地址，由于目前IPv4地址快不够用了，所以正在大力发展 IPv6，地址数更多。 IP地址分为公有地址和私有地址，像我们平时路由器使用的地址如 192.168.0.0 就属于私有地址，也就是我们可以用这些地址组件内网，不能从互联网直接访问。留出的私有地址如下：\n1 2 3 4 5 A类 10.0.0.0--10.255.255.255 B类 172.16.0.0--172.31.255.255 C类 192.168.0.0--192.168.255.255 当我们访问网页时不可能每次输入一大串数字，因此我们通过一些好记的名称，指代IP地址，当我们输入这些名称时，就自动访问对应的IP，这就是域名。\n比如当我们访问 www.baidu.com，实际上我们访问的是 220.181.38.148。那么我们怎么才能知道那个域名对应的是那个主机呢，这时候就需要一台专门的服务器做这个事情。也就是说你告诉管理员你要看一本书，这时候有一个人我们叫他小明，他告诉管理员你要看的书在哪个书架，管理员知道后再把书拿给你，完成这个流程的服务器叫域名服务器（Domain Name Server，DNS）。\n那么知道这些后我们就能了解 GFW 防火墙简单的阻断方法，比如你说你要看越狱类的书，这时候小明一看你要看这种书？不行，直接给你拦下，或者给告诉管理员一个错误的信息，那么你就看不到你想要的书了。还有一种情况就是小明记住了哪一个书架的书不能看，也就是哪一个服务器上的内容不可以访问，那么发现你要看的书在这里，对不起，也不行。\n那么如何解决呢？防火墙不可能不让你访问所有的服务器内容。这个时候我们可以找一个中间人，即让一台在防火墙外，不在防火墙名单上的服务器访问我们想要的内容，然后我们访问这台服务器，就可以拿到我们想要的东西。这个服务器就是一个代理人的角色，这也就是很多软件里会有的 Proxy 设置，即代理。\n虽说有这种方法，但是如果小明能看到最后书的内容，那还是会被拦下来，因此我们就要对这些信息进行加密，这样他只知道你要看书，并且看的书不在黑名单书架上，内容也不清楚，那么他只能先给你。\n因此就衍生出各种加密方法手段，这些加密方法都要有一定的载体，就像我们把书放在一个盒子里，不同的盒子都可以装书，但是我们的锁不一样。\n总结一下解除限制的原理：以我们访问 YouTube 为例，首先我们本地通过加密发往防火墙外一台服务器，服务器进行解密，然后访问谷歌的服务器，将得到的视频进行加密，最后通过防火墙，我们本地再进行解密。所以我们本地安装的软件只是加密解密的载体，还需要我们的服务器信息才能正常使用，每一台服务器的信息称为一个节点（Node），因为有些服务器会根据IP地址返回不同的内容，比如首页的热门视频等，或者有些网站也会设置防火墙对 IP 地址进行限制，某些国家的 IP 不能访问因此不同的节点访问到的内容也是不一样的。\n目前有很多核心如 Clash, v2ray(xray)，基于这些核心很多开发者做出了图形界面方便我们操作，这些软件都是开源免费的，但真正核心的是服务器节点，有一些公益的，但是不稳定，主要还是收费的节点更稳定一些，提供这些节点的服务商称为 机场。\n另外说一下 VPN，VPN 的初衷不是为了跨过防火墙，而是为了企业的信息安全，因为其加密特征十分明显，很容易被识别，所以如果正常访问谷歌学术或者观看视频不建议使用VPN。\n接下来介绍两个电脑软件的使用，电脑会用后安卓上的操作也异曲同工，而iOS上软件都收费，这里就先不讲。\nv2rayN 此软件使用较为简单，适合简单用途，初上手使用。\n首先下载软件，下载 v2rayN-Core.zip。 这是GUI图形界面和核心，如果下载另一个只有界面，还得再下载核心。 链接点这里\n下载后直接解压，不需要安装，之后打开 v2rayN.exe。\n打开后电脑任务栏右下角会有图标，双击打开界面，界面元素如下：\n点击 订阅-订阅设置 即可添加订阅，添加完成后点击 订阅-更新订阅。\n右击电脑任务栏右下角图标，将 系统代理 后的选项设置为 自动配置系统代理，即可正常使用。\n关闭软件前一定要将系统代理后的选项设置为清除系统代理，然后退出软件，如果不清除只退出软件，会无法访问网络。\nClash for Windows 此软件适合进阶用户使用，通过使用 策略组，以域名或关键字进行分流，如一些流媒体视频网站使用某个节点，谷歌的服务使用某个节点。\n下载软件，此软件最好安装，可以第一时间更新，链接点这里，安装后打开软件。 软件构成如下，只需要用到前三个。 首先打开 Profiles，将服务商给的链接粘贴，下载配置文件。\n然后打开 Proxies，最上方选择 Rule，代表通过策略组的设置分流代理，如果选择 Global 代表全部流量经过节点代理，如果选择 Direct，代表即使打开软件，仍然是直接访问目标服务器，不经过代理，人话就是开没开一样。\n选择各个策略组想用的节点，比如上图，Proxy 组里包括了国外常用的网站，那么可以选择一个节点，Netflix 组是 Netflix 的域名和服务器的地址，那么我选择香港节点，HBO Max 由于只有美国有，因此只能使用美国节点。策略组之间是可以嵌套选择的，比如如果我 Netflix 策略组下面选择 HBO Max 策略组，那么最后 Netflix 也选用的美国节点，这样可以提高使用效率，不用频繁切换节点。图上只是自用的一些策略组，通常不同服务商提供的策略组有差异，当然如果有探索的心，也可进阶使用，根据自身需求定制策略组。\n如果学校订阅了一些期刊，代理后 IP 地址变化了，就无法正常使用学校的数据库了，这时候可以建立一个学术的策略组，这个组选择 Direct，那么就相当于直接通过学校的网络访问，其余一些情况也同理。\n最后同第一个软件，打开代理，不用了也是需要在这里关掉再退出软件。 ","date":"2022-06-07T00:00:00Z","image":"https://pic.imgdb.cn/item/65dc4c5c9f345e8d0318832b.webp","permalink":"http://localhost:5678/p/windows-network/","title":"Windows解除网络限制"},{"content":"前言： Zotero 是一款文献及知识库管理软件，支持 Windows 、Mac、Linux 全平台，Zotero 词源可能来源于阿尔巴尼亚语动词，意为“掌握（to master）”。软件版本迭代周期较长，但每个版本都有非常实用的功能：\n3.0 版本集成 Word 插件 4.0 版本增加期刊缩写、彩色标签等 5.0 版本 Zotero connector 更好的支持了 Firefox 6.0 版本内置了 PDF 阅读器，注释导出、非英语语法检查等，并且 iOS 端同步上线 具体版本记录可访问官网查看：更新日志\n相比 Endnote、Mendeley、Citavi 等软件有独特得优势，主要有以下特性：\n免费开源，有官方论坛 支持第三方插件 附件支持 Webdav 浏览器插件支持一键导入文献库 集成 Microsoft Word、LibreOffice 等插件，一键导入参考文献 但目前存在一些硬伤：\n同步服务器位于国外，访问很慢 普通账户只有 300MB 的同步空间（可通过Webdav解决） 这里简要介绍一下软件的使用以及部分插件的安装。\n1. 安装 首先需要访问官网下载程序以及图中的浏览器扩展，这样可以在程序打开时一键将条目保存到文献库中，同时建议注册账户使用，这样可以多平台协同工作。\n下载地址：点这里\n安装好插件以及应用后登录账号，连接插件，正常状态如下图红框：\n2. 使用 软件打开后可看到除去菜单功能区外大致分为四个主要区域，如下图：\n2.1 文库分类 Zotero 使用的文库的概念，可以建立文库以及在文库下建立分类，并且可以导出、创建分类报告等，新建只需要点击对应的按钮。\n2.2 条目使用 添加条目有三种主要方式：\n拖拽 PDF 进条目列表区，软件会自动访问 PDF 元数据，找到对应的条目 通过 DOI 添加条目，若存在可用的 PDF 会自动下载，可在上图软件功能分区看到 通过浏览器插件将条目保存入文库 主要介绍一下第三种方式\n安装 Chrome 扩展后，在期刊找到一篇文献后可看到浏览器的插件图标变成如下红框所示，点击即可加入对应的分类中，同时还可添加标签\nZotero 中的条目有几个需要注意的地方：\n删除条目并不会删除条目下的附件，因此若想完整删除条目，可先定位到条目文件夹删除 PDF 附件后再删除条目。 选择条目后按住 Ctrl 键可以看到条目所在目录。 可以右击条目选择将条目添加到其他目录，若想在此分类中移除条目需选择从分类中移除，若选择删除条目，则两个分类中都会删除。 2.3 标签使用 可以通过添加标签给不同的文献添加关键词方便查找，同时可以为标签指派颜色和快捷键，最多支持 9 种颜色和快捷键。\n文献添加后可能会自动添加标签，若想删除可在标签区右下角点击鼠标，即可选择删除自动标签。\n2.4 附件同步 Zotero 的数据文件都在默认位于 Windows 用户文件夹下，可在编辑-首选项-高级-文件和文件夹下修改，而附件位于 /data/storage/ 文件夹下，每个条目一个文件夹。\n首先点击：编辑-首选项-同步即可打开同步页面。\n由于 Zotero 账户自带的存储空间只有 300M，并且速度很慢，这里采用 WebDAV 服务同步附件（PDF），国内网盘只有坚果云支持 WebDAV，并且免费账户每月送的 1G流量也十分够用，所以这里使用坚果云同步。\n登录坚果云，首先创建一个 Zotero 数据文件夹，然后在账户信息-安全选项页面可创建第三方应用。 将服务器地址填入 WebDAV 设置地址中，注意核对 之后验证服务器即可同步 注意：密码是第三方应用的密码，不是坚果云账户的密码。\n3. 扩展 Zotero 支持大量的插件。软件安装后可首先选择安装 Word 插件，之后可在工具-插件处进入插件区，拖动安装或选择安装插件。\n官网所列的插件地址如下：插件地址\n3.1 Word 插件 安装完 Word 插件后可在文档中引用文献，若 Word 插件出问题可在插件页面重新安装。下图左侧按钮依次是添加引文、添加笔记、添加文末引文目录 ，若软件中条目出现变化，可实时刷新引文目录，或解除引文链接，自行修改引用信息。\n3.2 Zotfile Zotfile 是一款可以自动整理附件以及重命名附件的插件，由于 Zotero 默认条目文件夹是一串不规则的字符串，因此寻找 PDF 可能很繁琐，使用此插件可以将文献库中的附件按照特定方式分类，如按年份或期刊，并且也可以将 PDF 一键按照特定格式如作者-年份-题目重命名。\n官网下载插件解压后得到 xpi文件，打开 Zotero 插件安装页面，拖拽即可安装，安装后可在工具选项卡处找到 Zotfile Preferences，点击可打开设置。\n附件重命名 在 Renaming Rules 选项卡中可选择 Zotero 默认命名方式和 Zotfile 命名，下图红框设置为 zotfile 命名方式。\n设置完后右击 PDF即可选择重命名，之后添加 PDF后插件会自动运行。\nzotfile 对可以命名的格式有详细说明，可自行阅读：zotfile 官网\n附件位置重定向 附件位置设置如下图，在 General Settings 选项卡中选择红框范围内的 Custom Location 即可自定义位置。\n图中红框上方为 Zotero 监控的源文件夹，当此文件夹中下载文献后会自动添加到文库中，如需要可自行设置。\n由于现在 iOS 端已经推出了官方 APP，而重设附件位置后，在 iPad 端会出现找不到文件的情况，因此推荐只使用重命名功能。\n另外一种解决办法是为附件创建文件链接的同时创建文件副本，由于 Zotero 中条目和附件就是一种链接的关系，可能类似于 Windows 的快捷方式，因此才会出现找不到文件的情况，但此种方法较为繁琐，而且批注后另一份文件不能实时更新，因此不推荐。\n3.3 附件下载 由于版权的限制，可能部分条目找不到可用的 PDF，这里可以将 Zotero 的下载解析改为 sci-hub突破限制。\n按照如下路径寻找：\n点击上方菜单栏 编辑-首选项-高级 ，最下方 高级设置-设置编辑器，点击风险通知后进入配置，在上方搜索：\n1 extensions.zotero.findPDFs.resolvers 然后双击条目，将以下内容复制进框中后保存退出。\n1 2 3 4 5 6 7 8 9 { \u0026#34;name\u0026#34;: \u0026#34;Sci-Hub\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;GET\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://sci-hub.se/{doi}\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;html\u0026#34;, \u0026#34;selector\u0026#34;: \u0026#34;#pdf\u0026#34;, \u0026#34;attribute\u0026#34;: \u0026#34;src\u0026#34;, \u0026#34;automatic\u0026#34;: true } Zotero 支持的功能很多，可用的插件也很多，更多实用的功能可自行探索。\n参考 知乎专栏：Zotero操作指南 维基百科：Zotero 青柠学术：Zotero 文献生态 Liuxin_blog：Zotero论文管理软件使用技巧汇总 少数派：文献管理神器 Zotero 学习路径指南 ","date":"2022-04-21T00:00:00Z","image":"https://pic.imgdb.cn/item/65dc484b9f345e8d030ea015.webp","permalink":"http://localhost:5678/p/zotero/","title":"Zotero简要使用指南"},{"content":"前言： 最初在论坛看到一位大佬发帖讨论如何做订阅的笔记，大佬使用 Notion 中 Table 来管理订阅，界面看起来非常美观，自定义程度非常高，同时自留地推荐的一篇少数派文章讲解了一些基础的操作，遂自己折腾了一番，无奈只完成了一小部分。\n之后在网上找到了具体的教程和模板，总的来说体验不错，但是 Notion 中并不能实时跟进汇率来计算金额，所以目前只用 Notion 做简单的记录，使用订阅管理软件进行管理。\n之后对此类软件做了总结，但觉得大部分软件达不到预期，并且几款软件使用过一段时间后也有了新的感受，因此更新了一下文章。\n插一句题外话，虽然订阅制很不喜欢，没有“拥有”的安全感，但是目前来看，订阅制是今后大部分软件的付费模式。\n首先提供一下基本信息\nBobby Pandora Subsee 订阅通 Stack Subtrack 价格 免费 免费 ￥18 免费 ￥12 ￥6 图标 内置 支持本地图片 支持本地图片 内置 支持 Github 项目 支持图片链接 数据分析 饼图 饼图 柱状图 饼图 文字 文字 多币种 ✅ ✅ ✅ ✅ ✅ ✅ 中文 ❌ ✅ ✅ ✅ ✅ ✅ 小部件 ❌ ❌ ✅ ✅ ✅ ✅ Bobby 网上的推荐这款软件都是首选，内置很多模板，但大都是国外的服务。自定义订阅通过不同的颜色区分。\n免费版可解锁 5 个订阅，之前全部解锁花费 ￥12，现在涨价了，全部需要￥24，单个功能￥6，可解锁字体设置（只有几款选择）、暗色主题和跟随系统选择的主题等，最新版加入了分组功能，可通过顶部按钮切换。\n主界面以列表形式显示，底部显示花费，点击可切换不同的周期，比如周、月。\n高级版功能：\n自定义主题 自定义字体 无限数目订阅 无限制分组等 优点：\n内置大量模板 界面没有多余元素，简介好看 界面底部生成总花费，可选择周、月、年 多币种支持 可优化之处：\n图标不支持自定义链接 内置模板国内服务支持差 高级版功能简单 目前不支持桌面小组件 界面不支持中文 Pandora 一款由国内开发者开发的订阅管理软件，模板基本包括了国内的服务。下载需要付费￥3，现推出 2.0 版本，老用户免费升级永久会员，新用户永久解锁 ￥45，年订阅 ￥18。\n软件升级后有主界面以及统计界面，订阅可设置开始时间和结束时间。\n主界面上方会显示项目数量和总花费。支持从相册选择图标，或者选择内置图标，或填写 APPStore 链接图标，升级后支持多币种，账单循环也更加灵活，并且支持试用期设置。\n优点：\n国内服务模板支持良好 界面简洁 可从相册选择订阅图标 可以 iCloud 同步 可优化之处：\n价格升级后偏贵 首页项目不能排序 尚未支持深色模式 目前不支持桌面小组件 开发者开发了多款优秀的项目，此 APP 后续也会继续优化，对老用户来说值得使用。\nSubsee 俄罗斯独立 iOS 开发者 Vladimir Khuraskin 开发制作，免费版只能添加 5 个订阅，高级版价格 ￥18，现已从 Subs 更名为 Subsee。\n高级版功能：\n订阅数量不受限制 iCloud 同步 Face ID 登陆 界面分为订阅界面、分析界面、设置界面。\n订阅界面列表形式呈现，左上角按钮可选择不同的排序方式，种类多样。模板支持大部分国外订阅以及小部分国内产品，订阅图标可选择相册图片。\n分析界面提供了订阅数量、总的金额，前一年和下一年的消费通过柱状图显示，非常直观，同时还提供付款历史，记录每一笔消费。\n软件的一个特点是可以选择付款方式，同时支持设置为家庭或者个人类型，以及是否存在试用期，但是试用期貌似只是设置一下，并没有提供试用时间的选择，感觉试用期还处于试用期。\n作者还设置了通过邮件反馈订阅的途径，可以说支持非常友好，总的来说是一款优秀的软件。\n优点：\n支持中文 支持多币种 提供数据统计，样式直观 订阅循环灵活 可从相册选择订阅图标 支持桌面小组件 可优化之处：\n数据刷新问题 订阅通 国内开发者最近开发的一款软件，界面和 Subsee 类似，但是完全免费，并且模板丰富，支持统计数据、多币种、标签分类等功能。\n优点：\n模板丰富 多币种支持 使用流畅 可优化之处：\n统计界面月份选择不够灵活 个人认为 UI 还可优化 总的来说此款软件使用流畅，并且订阅添加十分灵活，普通用户使用完全足够，十分推荐。\nStack 这是一款非常完善的订阅软件，目前在使用。免费版有数量和功能限制，高级版价格 ￥12。\n高级版功能：\n无限制数量订阅 预算 增强效果（渐变） 自定义图标库 本款应用特色是通过分组管理订阅，同时支持多种订阅类型选择。\n界面分为订阅界面、预算界面、设置界面。\n订阅界面以分组形式呈现订阅，同时可以在设置中更改排列方式。\n自定义订阅设置中可以设置图标，以及订阅列表的颜色，还可通过订阅网址自动获取图标，或者通过自定义链接以及 Github 仓库获取图标，非常全面。订阅类型的支持是我见过最全面的，而且提供相关说明。订阅支持试用期选择，并且可以选择结束日期。支持多币种，但是订阅的循环周期不够灵活，按日、月、季、年固定选择。\n预算界面提供饼状图查看花费，同时底下可设置各组的预算金额，但是并没有每个月或者每年的统计分析，相比其他软件，这是一点遗憾。\n设置界面上可管理分组，重命名或者删除，但是重命名需要点击红色的删除按钮，容易引起误会，主界面的分组长按无法删除，个人觉得此处可以优化一下。\n优点：\n分组管理 语言支持友好 多币种支持 订阅图标灵活 可设置预算 订阅类型非常全面 支持桌面小组件 可优化之处：\n内置模板较少 订阅不能添加备注 通知存在问题 使用过程中有一点体验不好的是设置订阅颜色后，不能设置透明度，整个订阅都会变成同一个颜色，图标本身的颜色会覆盖，此处可以进一步优化。\n另外一点就是选择币种经常会出现 bug，开发者可能已放弃更新。\nSubtrack 印度开发者开发的软件，通过标签管理订阅，和 Stack 类似，同时可添加 Siri 捷径，到期后进行特点操作。\n免费版支持三个订阅，可使用面容和密码，高级版花费 ￥6。\n高级版功能如下：\n无线数量订阅项目 可导出订阅为 CSV 文件 自定义图标 主界面最上方是所有订阅标签，中间是通过不同周期整理的到期订阅，最下方则是通过标签分类的订阅，主界面的标签是点击进入下一级界面，没有折叠列表。\n标签页内可查看标签下订阅不同周期内的支出，添加订阅的周期灵活，图标也可填入地址获取，可设置默认货币，也可以在单个订阅内设置不同的货币。\n优点：\n标签管理订阅 可导出数据 多币种支持 订阅循环灵活 可自定义图标地址 支持桌面小组件 可添加 Siri 捷径 可优化之处：\n主界面不够简洁 使用中偶尔会出现的 bug: 出现空白的订阅，点击编辑会闪退，再次打开后正常。\n总结 通过对比，发现要想有一款非常完美的应用是比较困难的，除此以外，这些 APP 大多只能选择订阅开始的时间，而对于一些特殊情况，比如商家赠送了几天订阅，这种情况就无法解决，以上应用只有 Stack 可以通过选择时间来解决，Pandora 可以选择订阅结束时间，对这种情况也比较友好。\n对于这些软件仅仅是一些个人的短期体验，真正要找到合适的应用需要长时间的体验，希望大家都能找到适合自己的软件。\n","date":"2021-10-11T00:00:00Z","image":"https://pic.imgdb.cn/item/65dc46e19f345e8d030b1569.webp","permalink":"http://localhost:5678/p/ios-subscription/","title":"IOS订阅管理软件使用体验"},{"content":"前言： Office 是日常办公必需品，目前新买到的笔记本都会自带正版 Office 2019 家庭中文版，而且只需要拿邮箱激活一次，之后重装电脑只需要登录激活的邮箱账号即可自动激活，这里简单记录一下下载 Office 的步骤。\n使用工具 Office Tool Plus\nOffice Tool Plus 基于 Office 部署工具制作，除此之外还集成了各种实用性工具帮助用户部署和管理 Office.\nOffice Tool Plus官网\n帮助文档\n步骤 首先下载并解压工具 推荐下载包含框架的版本，不需要安装额外依赖，下载解压后运行文件夹内 RunMe.bat\n选择 部署 按钮，进去后看到如下界面 选择需要安装的版本以及需要安装的应用，如 Word Excel PowerPoint，添加需要安装的语言，之后点击 开始部署 即可开始安装。\n安装完成后登录第一次激活时的 Office 账号即可使用 若没有账号，可使用工具内的激活工具 首先点击主界面的 代码 按钮\n然后在红框内输入如下代码按回车，等待激活结束\n1 /osppilbyid MondoVolume /osppsethst:kms.loli.beer /osppsetprt:1688 /osppact Office Tool Plus 还提供了许多常用工具，可以解决日常使用中的许多问题，工具官方页面也有帮助文档，以及新手教程，自行探索。\n","date":"2021-09-10T00:00:00Z","image":"https://pic.imgdb.cn/item/62d6dc96f54cd3f937d50c8a.png","permalink":"http://localhost:5678/p/office/","title":"Windows10 Office安装指南"},{"content":"前言 Handsome 是一款精美的 Typecho 主题，后台功能强大，这里记录一下自己从网上找到的对主题的一些美化。\n底部版权信息美化 底部左侧信息 在主题后台设置-开发者设置-博客底部左侧信息添加如下代码： 1 2 3 4 5 6 7 8 9 10 11 \u0026lt;div class=\u0026#34;github-badge\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;./\u0026#34; title=\u0026#34;©2021 XXX\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;badge-subject\u0026#34;\u0026gt;Copyright\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;badge-value bg-blue\u0026#34;\u0026gt;©2021 XXX\u0026lt;/span\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; | \u0026lt;div class=\u0026#34;github-badge\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;http://www.beian.gov.cn/\u0026#34; target=\u0026#34;_blank\u0026#34; title=\u0026#34;XICP备 XXXXXXXXXX号\u0026#34;), pointer;\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;badge-subject\u0026#34;\u0026gt;晋ICP备\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;badge-value bg-green\u0026#34;\u0026gt;XXXXXXXXXX号\u0026lt;/span\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; 删除对应代码\n1 2 3 # 在 `handsome\\component\\footer.php` 文件中删除如下代码 by \u0026lt;a target=\u0026#34;blank\u0026#34; href=\u0026#34;https://www.ihewro.com/archives/489/\u0026#34;\u0026gt;handsome\u0026lt;/a\u0026gt; © \u0026lt;?php echo date(\u0026#34;Y\u0026#34;);?\u0026gt; Copyright 底部右侧信息 在主题后台设置-开发者设置-博客底部右侧信息添加如下代码：\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;div class=\u0026#34;github-badge\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;http://www.typecho.org\u0026#34; target=\u0026#34;_blank\u0026#34; title=\u0026#34;由 Typecho 强力驱动\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;badge-subject\u0026#34;\u0026gt;Powered\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;badge-value bg-blue\u0026#34;\u0026gt;Typecho\u0026lt;/span\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; | \u0026lt;div class=\u0026#34;github-badge\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://www.ihewro.com/archives/489/\u0026#34; target=\u0026#34;_blank\u0026#34; title=\u0026#34;站点使用 handsome 主题，作者：友人C\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;badge-subject\u0026#34;\u0026gt;Theme\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;badge-value bg-orange\u0026#34;\u0026gt;Handsome\u0026lt;/span\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; 首页头像自动旋转 在设置外观-开发者设置-自定义CSS中添加如下代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 /*首页头像自动旋转*/ .thumb-lg{ width:130px; } .avatar{ -webkit-transition: 0.4s; -webkit-transition: -webkit-transform 0.4s ease-out; transition: transform 0.4s ease-out; -moz-transition: -moz-transform 0.4s ease-out; } .avatar:hover{ transform: rotateZ(360deg); -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); } #aside-user span.avatar{ animation-timing-function:cubic-bezier(0,0,.07,1)!important; border:0 solid } #aside-user span.avatar:hover{ transform:rotate(360deg) scale(1.2); border-width:5px; animation:avatar .5s } 首页文章版式圆角化 在设置外观-开发者设置-自定义CSS中添加如下代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 /*首页文章版式圆角化*/ .panel{ border: none; border-radius: 10px; } .panel-small{ border: none; border-radius: 10px; } .item-thumb{ border-radius: 10px; } 首页文章列表悬浮上停 在设置外观-开发者设置-自定义CSS 中添加如下代码：\n1 2 3 4 5 6 7 8 9 /*首页文章列表悬停上浮*/ .blog-post .panel:not(article) { transition: all 0.3s; } .blog-post .panel:not(article):hover { transform: translateY(-10px); box-shadow: 0 8px 10px rgba(73, 90, 47, 0.47); } 首页文章图片获取焦点放大 在设置外观-开发者设置-自定义CSS 中添加如下代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 /*首页文章图片获取焦点放大*/ .item-thumb{ cursor: pointer; transition: all 0.6s; } .item-thumb:hover{ transform: scale(1.05); } .item-thumb-small{ cursor: pointer; transition: all 0.6s; } .item-thumb-small:hover{ transform: scale(1.05); } #post-content pre code { display:block; overflow-x:auto; position:relative; margin:0; padding-left:50px; } pre code { position:relative; display:block; overflow-x:auto; margin:4.4px 0.px .4px 1px; padding:0; max-height:500px; padding-left:3.5em } 右侧列表导航栏图标颜色 在设置外观-开发者设置-自定义CSS 中添加如下代码：\n1 2 3 4 /* 右侧列表导航栏图标颜色 */ .sidebar-icon svg.feather.feather-thumbs-up{color: #ff0000;} .sidebar-icon svg.feather.feather-message-square{color:#495dc3;} .sidebar-icon svg.feather.feather-gift{color:#52DE97;} 博客信息配套颜色 在设置外观-开发者设置-自定义CSS 中添加如下代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 /* 博客信息配套颜色 */ #blog_info\u0026gt;ul\u0026gt;li:nth-child(1)\u0026gt;span.badge{ background-color: #009688; } #blog_info\u0026gt;ul\u0026gt;li:nth-child(2)\u0026gt;span.badge{ background-color: #009688; } #blog_info\u0026gt;ul\u0026gt;li:nth-child(3)\u0026gt;span.badge{ background-color: #009688; } #blog_info\u0026gt;ul\u0026gt;li:nth-child(4)\u0026gt;span.badge{ background-color: #009688; } #blog_info\u0026gt;ul\u0026gt;li:nth-child(5)\u0026gt;span.badge{ background-color: #009688; } #blog_info\u0026gt;ul\u0026gt;li:nth-child(6)\u0026gt;span.badge{ background-color: #009688; } #blog_info\u0026gt;ul\u0026gt;li:nth-child(7)\u0026gt;span.badge{ background-color: #009688; } 底部页脚 在设置外观-开发者设置-自定义CSS 中添加如下代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 /*底部页脚*/ .github-badge { display: inline-block; border-radius: 4px; text-shadow: none; font-size: 12px; color: #fff; line-height: 15px; background-color: #abbac3; margin-bottom: 5px } .github-badge .badge-subject { display: inline-block; background-color: #4d4d4d; padding: 4px 4px 4px 6px; border-top-left-radius: 4px; border-bottom-left-radius: 4px } .github-badge .badge-value { display: inline-block; padding: 4px 6px 4px 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px } .github-badge .bg-blue { background-color: #007ec6 } .github-badge .bg-orange { background-color: #ffa500 } .github-badge .bg-red { background-color: #f00 } .github-badge .bg-green { background-color: #3bca6e } .github-badge .bg-purple { background-color: #ab34e9 } /*这是优化底部栏的css，应该不会影响没开启炫酷透明功能时候的主题，如果有问题就删除下面这行即可*/ .wrapper { padding: 11px; } 彩色云标签 在设置外观-开发者设置-自定义JavaScript 中添加如下代码：\n1 2 3 4 5 6 7 \u0026lt;!--彩色标签云--\u0026gt; let tags = document.querySelectorAll(\u0026#34;#tag_cloud-2 a\u0026#34;); let colorArr = [\u0026#34;#428BCA\u0026#34;, \u0026#34;#AEDCAE\u0026#34;, \u0026#34;#ECA9A7\u0026#34;, \u0026#34;#DA99FF\u0026#34;, \u0026#34;#FFB380\u0026#34;, \u0026#34;#D9B999\u0026#34;]; tags.forEach(tag =\u0026gt; { tagsColor = colorArr[Math.floor(Math.random() * colorArr.length)]; tag.style.backgroundColor = tagsColor; }); 鼠标点击特效 将下列代码写入handsome/component/footer.php文件 \u0026lt;/body\u0026gt; 之前\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; /* 鼠标特效 */ var a_idx = 0; jQuery(document).ready(function($) { $(\u0026#34;body\u0026#34;).click(function(e) { var a = new Array(\u0026#34;富强\u0026#34;, \u0026#34;民主\u0026#34;, \u0026#34;文明\u0026#34;, \u0026#34;和谐\u0026#34;, \u0026#34;自由\u0026#34;, \u0026#34;平等\u0026#34;, \u0026#34;公正\u0026#34; ,\u0026#34;法治\u0026#34;, \u0026#34;爱国\u0026#34;, \u0026#34;敬业\u0026#34;, \u0026#34;诚信\u0026#34;, \u0026#34;友善\u0026#34;); var $i = $(\u0026#34;\u0026lt;span/\u0026gt;\u0026#34;).text(a[a_idx]); a_idx = (a_idx + 1) % a.length; var x = e.pageX, y = e.pageY; $i.css({ \u0026#34;z-index\u0026#34;: 999999999999999999999999999999999999999999999999999999999999999999999, \u0026#34;top\u0026#34;: y - 20, \u0026#34;left\u0026#34;: x, \u0026#34;position\u0026#34;: \u0026#34;absolute\u0026#34;, \u0026#34;font-weight\u0026#34;: \u0026#34;bold\u0026#34;, \u0026#34;color\u0026#34;: \u0026#34;#ff6651\u0026#34; }); $(\u0026#34;body\u0026#34;).append($i); $i.animate({ \u0026#34;top\u0026#34;: y - 180, \u0026#34;opacity\u0026#34;: 0 }, 1500, function() { $i.remove(); }); }); }); \u0026lt;/script\u0026gt; 参考 Rats\u0026rsquo;s Blog ","date":"2020-09-18T00:00:00Z","image":"https://pic.imgdb.cn/item/65dc461a9f345e8d03090cf5.webp","permalink":"http://localhost:5678/p/handsome/","title":"Typecho博客Handsome主题美化"},{"content":"前言： 很多学生需要完成网课的学习，但是这些课程往往很长，而且还会有一些题目，这就需要我们隔几分钟就要看一下页面，阻碍了我们进行快乐的阅读文献，所以这里通过一些脚本插件来解放我们的双手。\n通过插件可以实现：\n自动下一章节 自动答题并提交 视频多倍速播放 ······ 你要知道 使用插件会有不良记录的风险，请自行考虑\n实际播放时间和理论播放时间差距太大会增加风险，尽量不要拖动进度条，或者多倍速播放\n此方法是通过 用户脚本，脚本就是一段代码，可以为网页添加新功能，有些则可以去除广告，提升浏览体验。而管理脚本的插件可以理解为脚本管理器，这里使用的脚本管理器是 Tampermonkey。\n脚本则是在 Greasy Fork 找到。Greasy Fork 上的脚本由众多开发者开发并面向全世界发布，可以免费安装使用。\n有很多人将开源的程序拿来售卖盈利，请尽量多 Google 搜索，避免吃亏\nTampermonkey 支持的浏览器如下：\nChrome Microsoft Edge Safari Firefox Opera Next Dolphin Browser UC Browser Chrome 是非常优秀的浏览器，但是碍于国内的上网环境，所以大多数人并不经常使用，但它的兼容性最好，一般情况不会出现问题，所以尽量使用 Chrome。 由于谷歌的插件商店 Webstore 无法直接下载，所以这里主要介绍 Firefox 的方法，Chrome 安装简要介绍。\nFirefox 方法 首先在官网下载浏览器\n官网\n请注意：Firefox 区分国内版和国际版，这里使用国际版\n下载扩展 使用 Tampermonkey ，地址如下\nTampermonkey\n打开官网这里可以看到管理器支持的浏览器，你用什么浏览器打开，就会在相应的标签下。\n点击下载按键即可下载，一般选择稳定版。按照提示完成安装即可\n下载脚本 打开下载脚本的网站，地址如下\nGreasyfork\n首先搜索插件\n在网站搜索 超星，插件的效果都大同小异，这里选择第一个，下载量较高的。\n点进去后点击 安装此脚本，即可安装成功\n接下来管理脚本，点击右上角的管理器图标即可进入面板，进入后编辑脚本，然后修改脚本参数，调整刷课方式，能修改的参数后面都有清楚的注释。\n修改参数后如果不生效请刷新页面或者重新登陆\nChrome 方法 首先下载脚本管理器，网站地址同上 → 点这里\n点进去下载会跳转到 Webstore，然后安装，安装后的使用方法和 Firefox一样。\n如果打不开的话这里可以使用第三方的插件商店\n极简插件\n这里偷个懒，解压出来的文件有插件如何安装的网站教程，打开就能看到。\n安装好插件后的步骤和 Firefox 一样，下载脚本，然后启用即可。\n","date":"2020-09-10T00:00:00Z","image":"https://pic.imgdb.cn/item/65dc457b9f345e8d030782d8.webp","permalink":"http://localhost:5678/p/xuexitong/","title":"学习通刷课指南"},{"content":"删除自带输入法 删除以下注册表\n1 2 3 HKEY_LOCAL_MACHINE\\\\\\\\SOFTWARE\\\\\\\\Microsoft\\\\\\\\CTF\\\\\\\\TIP {81d4e9c9-1d3b-41bc-9e6c-4b40bf79e35e} Linux + Windows 双系统时间问题 Windows 下以管理员身份打开命令行窗口\n1 Reg add HKLM\\\\\\\\SYSTEM\\\\\\\\CurrentControlSet\\\\\\\\Control\\\\\\\\TimeZoneInformation /v RealTimeIsUniversal /t REG_DWORD /d 1 解决部分图标加载不出来 在桌面新建文本文档，复制以下代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 rem 关闭Windows外壳程序explorer taskkill /f /im explorer.exe rem 清理系统图标缓存数据库 attrib -h -s -r \u0026#34;%userprofile%\\\\\\\\AppData\\\\\\\\Local\\\\\\\\IconCache.db\u0026#34; del /f \u0026#34;%userprofile%\\\\\\\\AppData\\\\\\\\Local\\\\\\\\IconCache.db\u0026#34; attrib /s /d -h -s -r \u0026#34;%userprofile%\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\Explorer\\\\\\\\*\u0026#34; del /f \u0026#34;%userprofile%\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\Explorer\\\\\\\\thumbcache_32.db\u0026#34; del /f \u0026#34;%userprofile%\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\Explorer\\\\\\\\thumbcache_96.db\u0026#34; del /f \u0026#34;%userprofile%\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\Explorer\\\\\\\\thumbcache_102.db\u0026#34; del /f \u0026#34;%userprofile%\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\Explorer\\\\\\\\thumbcache_256.db\u0026#34; del /f \u0026#34;%userprofile%\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\Explorer\\\\\\\\thumbcache_1024.db\u0026#34; del /f \u0026#34;%userprofile%\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\Explorer\\\\\\\\thumbcache_idx.db\u0026#34; del /f \u0026#34;%userprofile%\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\Explorer\\\\\\\\thumbcache_sr.db\u0026#34; rem 清理 系统托盘记忆的图标 echo y|reg delete \u0026#34;HKEY_CLASSES_ROOT\\\\\\\\Local Settings\\\\\\\\Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\TrayNotify\u0026#34; /v IconStreams echo y|reg delete \u0026#34;HKEY_CLASSES_ROOT\\\\\\\\Local Settings\\\\\\\\Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\TrayNotify\u0026#34; /v PastIconsStream rem 重启Windows外壳程序explorer start explorer 将 txt 后缀修改为 bat 双击运行 缩放问题 Win10 修改字体大小后，再改回去任务窗口顶栏并不会改变，此时只需要修改缩放为自定义缩放，然后再调整回去即可。\nAnne Pro 2 连接设备 Anne Pro 2 由于固件问题，可能出现连接不上电脑的情况，这里给出淘宝客服的的步骤，已测试可以成功连接。\n插线连接电脑，打开键盘灯光，并清除蓝牙连接信息。 准备连接，先打开蓝牙搜索界面，再打开键盘背部的开关，然后长按 Fn2 + 15秒以上，不要放手，键盘上按键 1 的灯快速闪烁的时候，在蓝牙设备点击连接。 注意：闪烁的数字其实就是连接的设备编号，如果没连接成功可以数字 1-4 都试一下\nAnne Pro 设备驱动：点击下载\n网络连接问题 win10 18362版本后连接WiFi后可能出现已连接网络但显示未连接的情况，虽然仍能正常访问网络，但部分情境下可能受限，解决方法如下：\n找到如下注册表： 1 \\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\NlaSvc\\Parameters\\Internet 修改如下项目值为右侧内容： 1 2 3 4 5 6 7 ActiveWebProbeContent → Microsoft NCSI ActiveWebProbeContentV6 → Microsoft NCSI ActiveWebProbeHost → www.msftncsi.com ActiveWebProbeHostV6 → ipv6.msftncsi.com ActiveWebProbePath → ncsi.txt ActiveWebProbePathV6 → ncsi.txt EnableActiveProbing → 1 原因：每当连网后，系统会自动向微软的 http://dns.msftncsi.com发出请求，然后返回一个NCSI.txt的值，这一值如果正确时，则确认为已连网。而Win10最近的版本中，这个返回服务器和值有了新变化并反映为6个注册表项中。这些变化因国内部分运行商的网络重定向，不能得到正确的反馈，因此出现实际能上网确显示为无internet的问题。\n安全中心 windows11部分精简系统重启后任务栏会出现安全中心图标，删除方法如下：\n以管理员身份运行终端，粘贴如下内容回车：\n1 reg delete HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run /v \u0026#34;SecurityHealth\u0026#34; /f HEVC 插件地址 HEVC\nwin11跳过开机联网 按键盘上的Shift+F10调出命令提示符，输入以下内容后回车，等待系统重启：\n1 2 oobe\\bepassnro # 注意：不需要区分大小写 LTSC版本安装 Microsoft Store 管理员身份运行 cmd，输入以下内容：\n1 wsreset -i 适用于 LTSC2021 以及 LTSC2019，自行测试。\n参考 重启资源管理器：原文 WiFi连接后无 Internet：知乎链接) 安全中心：远景论坛 win11跳过开机联网：远景论坛 LTSC 安装 Microsoft Store远景论坛 ","date":"2020-09-01T00:00:00Z","image":"https://pic.imgdb.cn/item/62d6de99f54cd3f937dd4e5f.jpg","permalink":"http://localhost:5678/p/windows10/","title":"Windows10常见问题"},{"content":"1. 面向对象 面向对象编程\u0026ndash;Object Oriented Programming，简写 OOP\n面向对象三大特性:\n封装 继承 多态 1.1 基本概念 过程和对象：\n面向过程和面向对象是两种不同编程方式 过程是早期的一个编程概念 过程类似于函数，只能执行，但没有返回值 函数不仅能执行，还可以返回结果 面向过程\n把完成某一需求的所有步骤从头到尾逐步实现 根据开发需求，将某些功能独立的代码封装成一个又一个函数 最后完成的代码就是顺序的调用不同的函数 特点：\n注重步骤与过程，不注重职责分工 如果需求复杂，代 码会变得很复杂 开发复杂项目，没有固定的套路，开发难度很大 面向对象\n相比较函数，面向对象是更大的封装，根据职责在一个对象中封装多个方法\n在完成一个需求前，首先确定职责\u0026ndash;要做的事情（方法） 根据职责确定不同的对象，在对象内部封装不同的方法（多个） 最后完成的代码，就是顺序地让不同的对象调用不同的方法 特点：\n注重对象和职责，不同的对象承担不同的职责 更加适合应对复杂的需求变化，是专门应对复杂项目的开发，有固定的套路 需要在面向过程的基础上，再学习一些面向对象的语法 1.2 类和对象 概念 类(Class)\n类是一群具有相同特征或者行为的事物的一个统称，是抽象的，不能直接使用 特征被称为属性 行为被称为方法 类就相当于制造飞机时的图纸，是一个模板，是负责创建对象的 对象(object)\n对象是由类创建出来的一个具体存在，可以直接使用,又叫实例, 使用类创建对象的过程叫实例化 由哪一个类创建出来的对象，就拥有在哪一个类中定义的： 属性 方法 对象就相当于用图纸制造飞机 类和对象的关系\n类是模板，对象是根据类这个模板创建出来的，应该先有类再有对象 类只有一个，而对象可以有很多个 不同的对象之间属性可能会各不相同 类中定义了什么属性和方法，对象中就有什么属性和方法，不可能多，也不可能少 和概念上下级不同 类是一个特殊的对象\u0026ndash;类对象\nPython 中一切皆对象\n类对象可以拥有自己的:\n类属性 类方法 设计 在使用面向对象开发前，首先应分析需求，确定程序中需要包含哪些类\n设计类的三要素：\n类名：这类事物的名字，满足大驼峰命名法 属性：这类事物具有什么样的特征 方法：这类事物具有什么样的行为 大驼峰命名法\n每一个单词首字母大写 单词与单词间没有下划线 类名的确定 名词提炼法分析整个业务流程，出现的名词，通常就是找到的类\n属性和方法的确定 对对象的特征描述，通常可以定义成属性 对象具有的行为（动词），通常可以定义成方法 需求中没有涉及的属性或方法在设计类时不需要考虑\n1.3 面向对象基础语法 使用内置函数 dir 传入标识符/数据可以查看对象内的所有属性和方法 __方法名__ 格式的方法是 Python 提供的内置方法和属性 方法名 类型 作用 _new_ 方法 创建对象时，会被自动调用 _init_ 方法 对象初始化时，会被自动调用 _del_ 方法 对象被从内存中销毁前，会被自动调用 _str_ 方法 返回对象的描述信息，print 函数输出使用，必须返回一个字符串 定义简单的类（只包含方法） 1 2 3 4 5 class 类名： def 方法1(self, 参数列表): pass def 方法2(self, 参数列表): pass 方法的定义格式和函数几乎一样 区别在于第一个参数必须是 self 创建对象\n当一个类定义完成后，要使用这个类创建对象 1 对象变量 = 类名() 引用的概念\n面向对象中引用同样适用\n在 Python 中使用类创建对象后，变量仍然记录的是对象在内存中的地址 也就是对象变量引用了新建的猫对象 使用 print 输出对象变量，默认情况下能够输出这个变量引用的对象是由哪一个类创建的对象，以及在内存中的地址 方法中的 self 参数 Python 中给对象设置属性非常容易，只需要在类的外部的代码中直接通过 . 设置一个属性即可 提示：\n虽然简单，但不推荐使用\n因为对象属性的封装应该封装在类的内部\n如果运行时没有找到属性，程序会报错\n1 2 tom.name = \u0026#34;Tom\u0026#34; # 利用赋值语句，给 tom 对象设置 name 属性为Tom 在类封装的方法内部，self 表示当前调用方法的对象自己 也就是说：哪一个对象调用的方法，self 就是哪一个对象的引用 调用方法时程序员不需要传递 self 参数 在方法内部： 可以通过 self.访问对象属性 也可以通过 self.调用对象的其他方法 初始化方法 当使用 类名() 创建对象时，会自动执行以下操作： 为对象在内存中分配空间\u0026ndash;创建对象 为对象的属性设置初始值--初始化方法(init) 这个初始化方法就是 __init__ 方法，这是对象的内置方法 __init__ 方法是专门用来定义一个类具有哪些属性的方法\n1 2 3 4 5 6 7 8 9 class Cat: def __init__(self): print(\u0026#34;初始化方法\u0026#34;) # 使用 类名() 创建对象的时候，会自动调用初始化方法 __init__ tom = Cat() 在初始化方法内部定义属性 在 __init__ 方法内部使用 self.属性名 = 形参 就可以定义属性\n定义属性后，再使用类创建的对象都会拥有该属性\n创建对象时，使用 类名(属性1, 属性2...) 调用\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Cat: def __init__(self, new_name): print(\u0026#34;初始化方法\u0026#34;) # self.name = \u0026#34;Tom\u0026#34; self.name = new_name def eat(self): print(\u0026#34;%s爱吃鱼\u0026#34; % self.name) # 使用 类名() 创建对象的时候，会自动调用初始化方法 __init__ tom = Cat(\u0026#34;Tom\u0026#34;) print(tom.name) 1.4 案例 小明爱跑步 需求\n小明体重 75.0 公斤 小明每次跑步会减肥 0.5 公斤 小明每次吃东西体重增加 1 公斤 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Person: def __init__(self, name, weight): # self.属性 = 形参 self.name = name self.weight = weight def __str__(self): return \u0026#34;我的名字是 %s,体重是 %d.2 公斤\u0026#34; % (self.name, self.weight) def run(self): print(\u0026#34;%s爱跑步，跑步锻炼身体\u0026#34; % self.name) self.weight -= 0.5 def eat(self): print(\u0026#34;%s是吃货，吃完东西再减肥\u0026#34; % self.name) self.weight += 1.0 xiaoming = Person(\u0026#34;小明\u0026#34;,75.0 ) xiaoming.run() xiaoming.eat() print(xiaoming) 在对象的方法内部，可以直接访问对象的属性 同一个类创建的多个对象之间，属性互不干扰 摆放家具 房子有户型、总面积和家具名称列表 新房子没有任何家具 家具有名字和占地面积，其中： 床占地 4 平米 衣柜占地 2 平米 餐桌占地 1.5 平米 将以上三件家具添加到房子中 打印房子时，要求输出： 户型 总面积 剩余面积 家具名称列表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 class HouseItem: def __init__(self, name, area): self.name = name self.area = area def __str__(self): return \u0026#34;%s占地 %.2f 平米\u0026#34; % (self.name, self.area) class House: def __init__(self, house_type, area): self.house_type = house_type self.area = area # 剩余面积，初始值等于总面积 self.free_area = area # 家具名称列表 self.item_list = [] def __str__(self): return (\u0026#34;户型：%s\\n总面积：%.2f\\n剩余面积：%.2f\\n家具：%s\u0026#34; % (self.house_type, self.area, self.free_area, self.item_list)) def add_item(self, item): print(\u0026#34;要添加 %s\u0026#34; % item) # 1. 判断家具的面积 if item.area \u0026gt; self.free_area: print(\u0026#34;%s面积太大，无法添加\u0026#34; % item.name) return # 2. 将家具的名称添加到列表 self.item_list.append(item.name) # 3. 计算剩余面积 self.free_area -= item.area # 1. 创建家具 bed = HouseItem(\u0026#34;席梦思\u0026#34;, 4) chest = HouseItem(\u0026#34;衣柜\u0026#34;, 2) table = HouseItem(\u0026#34;餐桌\u0026#34;, 1.5) print(bed, chest, table) # 2. 创建房子变量 my_home = House(\u0026#34;两室一厅\u0026#34;, 60) my_home.add_item(bed) my_home.add_item(chest) my_home.add_item(table) print(my_home) 封装案例 封装\n封装是面向对象编程的一大特点 面向对象编程的第一步\u0026ndash;将属性和方法封装到一个抽象的类中 外界使用类创建对象，让对象调用方法 对象调用方法的细节都被封装在类的内部 一个对象的属性可以是另外一个类创建的对象\n需求：\n士兵许三多有一把 AK47 士兵可以开火 枪能发射子弹 枪能填充子弹 定义属性的初始值\n如果不知道设置什么初始值，可以设置为 None None 关键字表示什么也没有 表示一个空对象，没有方法和属性，是一个特殊的常量 可以将 None 赋值给任何一个变量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 class Gun: def __init__(self, model): # 1. 枪的型号 self.model = model # 2. 子弹的数量 self.bullet_count = 0 def add_bullet(self, count): self.bullet_count += count def shoot(self): # 1. 判断子弹数量 if self.bullet_count \u0026lt;= 1: print(\u0026#34;[%s]没有子弹了\u0026#34; % self.model) return # 2. 发射子弹 -1 self.bullet_count -= 1 # 3. 提示发射信息 print(\u0026#34;[%s] 突突突...[%d]\u0026#34; % (self.model, self.bullet_count)) class Soldier: def __init__(self, name): # 1. 新兵的姓名 self.name = name # 2. 枪 新兵没有枪 self.gun = None def fire(self): # 1. 判断士兵是否有枪 if self.gun is None: print(\u0026#34;[%s] 还没有枪\u0026#34; % self.name) return # 2. 高喊口号 print(\u0026#34;冲啊[%s]\u0026#34; % self.name) # 3. 装填子弹 self.gun.add_bullet(50) # 4. 发射子弹 self.gun.shoot() # 1. 创建枪对象 ak47 = Gun(\u0026#34;AK47\u0026#34;) # 2. 创建许三多 xusanduo = Soldier(\u0026#34;许三多\u0026#34;) xusanduo.gun = ak47 xusanduo.fire() print(xusanduo.gun) 身份运算符\n身份运算符是用于比较两个对象的内存地址是否一致\u0026ndash;是否是对同一个对象的引用 在 Python 中，针对 None 比较时，建议使用 is 判断 运算符 描述 实例 is is 是判断两个标识符是不是引用同一个对象 x is y, 类似 id(x) == id(y) is not is not 是判断两个标识符是不是引用不同对象 x is not y, 类似 id(a)!id(b) is 与 == 区别：\nis 是判断两个变量是不是引用同一个对象 == 判断引用变量的值是否相等 1.5 私有属性和私有方法 对象的某些属性或方法可能只希望在对象的内部被使用，不希望在外部被访问到 私有属性就是对象不希望公开的属性 私有方法就是对象不希望公开的方法 定义方式\n在定义属性或方法时，在属性名或方法名前增加两个下划线 伪私有属性和私有方法\nPython 中并没有真正意义的私有\n在给属性、方法命名时，实际是对名称做了一些特殊处理，使得外界无法访问 处理方式：在名称前加上 类名 =\u0026gt; _类名__名称 不要使用这种方法访问私有属性和私有方法\n2.继承和多态 2.1 单继承 继承的概念及语法 **概念: **子类拥有父类的所有方法和属性\n实现代码的重用 设计类的技巧 子类针对自己特有的需求,编写特定代码 语法:\n1 2 class 类名(父类名): pass 类似层次网络模型\n子类/派生类\u0026mdash;-父类/基类\n子类拥有父类以及父类的父类的所有属性和方法\n方法的重写 重写(override)\n当父类的方法不能满足子类需求,可以对方法进行重写\n覆盖父类的方法 父类的方法实现和子类的方法实现完全不同\n在子类中重新定义和父类同名的方法\n运行时只会调用子类中重写的方法 对父类方法进行扩展\n子类的方法实现包含父类的方法实现 在子类中重写父类的方法 在需要的位置使用 super.()父类方法 , 调用父类方法的执行 代码其他位置针对子类的需求,编写子类特有的实现 super\n在 Python 中, super 是一个特殊的类 super() 就是 super 类创建的对象 最常使用的场景就是在重写父类方法时,调用在父类中封装的方法 父类的私有属性和私有方法 子类对象不能在自己内部直接访问父类的私有属性和私有方法 父类的公有方法可以访问父类的私有属性和私有方法 子类可以以借助父类的公有方法间接访问父类的私有属性和私有方法 2.2 多继承 子类可以拥有多个父类,并且具有所有父类的属性和方法 如果父类之间存在同名的属性和方法, 应尽量避免使用多继承 语法:\n1 2 class 子类名(父类名1, 父类名2,...) pass Python 中的MRO\u0026ndash;方法搜索顺序\n针对类提供了内置属性__mro__ , 可以查看方法搜索顺序 MRO 是 method resolution order 的缩写,主要用于在多继承时判断方法和属性的调用路径 **新式类和旧式类: **\nobject 是 Python 为所有对象提供的基类, 提供有一些内置的属性和方法\n新式类: 以 object 为基类的类, 推荐使用 经典类: 不以 object 为基类的类, 不推荐使用 为保证代码可以同时在两个版本运行, 如果没有父类, 建议统一继承自 object\n2.3 多态 **概念:**不同的子类对象调用相同的父类方法\n以继承和重写父类方法为前提 是调用方法的技巧, 不会影响类的内部设计 案例:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class Dog(object): def __init__(self, name): self.name = name def game(self): print(\u0026#34;%s 蹦蹦跳跳的玩耍\u0026#34; % self.name) class XiaoTianQuan(Dog): def game(self): print(\u0026#34;%s 飞到天上玩耍...\u0026#34; % self.name) class Person(object): def __init__(self, name): self.name = name def game_with_dog(self, dog): print(\u0026#34;%s 和 %s 快乐的玩耍\u0026#34; % (self.name, dog.name)) dog.game() # 1. 创建狗对象 # wangcai = Dog(\u0026#34;旺财\u0026#34;) wangcai = XiaoTianQuan(\u0026#34;飞天旺财\u0026#34;) # 2. 创建小明对象 xiaoming = Person(\u0026#34;小明\u0026#34;) # 3. 让小明和狗玩耍 xiaoming.game_with_dog(wangcai) # 传入不同的狗参数即可 3. 类属性 3.1 类的结构 类是一个特殊的对象\nPython 中一切皆对象\nclass AAA: 定义的对象属于类对象\nobj1 = AAA() 属于实例对象\n程序运行时，类对象在内存中只有一份。\n3.2 类属性和实例属性 概念和使用 类属性就是给类对象定义的属性 记录与类相关的特征 类属性不会用于记录具体对象的的特征 1 2 3 4 5 6 7 8 9 10 11 12 class Tool(object): # 使用赋值语句即可定义类属性 count = 0 def __init__(self, name): self.name = name Tool.count += 1 tool1 = Tool(\u0026#34;斧头\u0026#34;) tool2 = Tool(\u0026#34;榔头\u0026#34;) print(Tool.count) 3.3 类方法和静态方法 类方法 类属性\n类属性是针对类对象定义的属性 使用赋值语句在 class 关键字下方可以定义类属性 类属性用于记录与这个类相关的特征 类属性查找存在向上查找方式 类方法\n针对类对象创建的方法 类方法内部可以直接访问类属性或者调用其他的类方法 语法如下：\n1 2 3 @classmethod def 类方法名(cls): pass 需要用修饰器@classmethod标识，告诉解释器这是一个类方法 类方法第一个参数应该是 cls 在类方法内部可使用cls.属性访问当前类属性 静态方法 在类中封封装方法，这个方法：\n既不需要访问实例属性或者调用实例方法 也不需要访问类属性或者调用类方法 语法：\n1 2 3 @staticmethod def 静态方法名(): pass 通过类名.调用静态方法 3.4 方法综合案例 需求：\n设计一个 Game类 属性： 类属性： top_score记录游戏历史最高分 实例属性：player_name记录当前游戏玩家姓名 方法： 静态方法：show_help显示游戏帮助信息 类方法：show_top_score显示历史最高分 实例方法：start_game开始当前玩家的游戏 主程序步骤 查看帮助信息 查看历史最高分 创建游戏对象，开始游戏 小结\n实例方法 方法内部需要访问实例属性，实例方法内部可以使用类名.访问类属性 类方法 方法内部只需要访问类属性 静态方法 方法内部不需要访问实例属性和类属性 ","date":"2020-08-20T00:00:00Z","image":"https://pic.imgdb.cn/item/65dc479d9f345e8d030ce5ff.webp","permalink":"http://localhost:5678/p/python02/","title":"Python学习笔记02 面向对象"},{"content":"宝塔面板 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # centos yum install -y wget \u0026amp;\u0026amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh \u0026amp;\u0026amp; sh install.sh # ubuntu/deepin wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh \u0026amp;\u0026amp; sudo bash install.sh # debian wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh \u0026amp;\u0026amp; bash install.sh # fedora wget -O install.sh http://download.bt.cn/install/install_6.0.sh \u0026amp;\u0026amp; bash install.sh # 更新 curl http://download.bt.cn/install/update6.sh|bash # 删除登录验证(适用于 7.8.0 以前版本) sed -i \u0026#34;s|if (bind_user == \u0026#39;True\u0026#39;) {|if (bind_user == \u0026#39;REMOVED\u0026#39;) {|g\u0026#34; /www/server/panel/BTPanel/static/js/index.js rm -rf /www/server/panel/data/bind.pl # 还原绑定 sed -i \u0026#34;s|if (bind_user == \u0026#39;REMOVED\u0026#39;) {|if (bind_user == \u0026#39;True\u0026#39;) {|g\u0026#34; /www/server/panel/BTPanel/static/js/index.js # 开心版 wget -O install.sh http://download.bt.sy/ltd/install/install-ubuntu_6.0.sh \u0026amp;\u0026amp; sudo bash install.sh BBR 加速 1 2 3 # 国内版 wget \u0026#34;https://dt.yixiagege.cn/shell/TCP-CN.sh\u0026#34; \u0026amp;\u0026amp; chmod +x TCP-CN.sh \u0026amp;\u0026amp; ./TCP-CN.sh 测速 1 2 3 4 5 6 7 # SuperSpeed bash \u0026lt;(curl -Lso- https://git.io/J1SEh) # LemonBench curl -fsL https://ilemonra.in/LemonBenchIntl | bash -s fast 更改 SSH 端口 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 备份 cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup # 更改端口 vim /etc/ssh/sshd_config # 重启服务 systemctl restart sshd # 设置防火墙 # firewall firewall-cmd --permanent --zone=public --add-port=xxxx/tcp firewall-cmd --reload # iptables iptables -A INPUT -p tcp --dport xxxx -j ACCEPT service iptables save systemctl enable iptables 一键安装 File2Ban 1 2 3 4 5 6 # 安装 wget https://raw.githubusercontent.com/FunctionClub/Fail2ban/master/fail2ban.sh bash fail2ban.sh # 卸载 wget https://raw.githubusercontent.com/FunctionClub/Fail2ban/master/uninstall.sh bash uninstall.sh Brook 中转 1 wget -N --no-check-certificate https://zhujiget.com/wp-content/uploads/2020/brook-pf.sh \u0026amp;\u0026amp; chmod +x brook-pf.sh \u0026amp;\u0026amp; ./brook-pf.sh 添加 Swap 分区 1 wget https://www.moerats.com/usr/shell/swap.sh \u0026amp;\u0026amp; bash swap.sh buyvm 挂载存储块 1 2 3 4 5 6 7 8 9 10 # 查询存储块ID ls /dev/disk/by-id/ # 格式化硬盘 mkfs.ext4 -F /dev/disk/by-id/scsi-0BUYVM_SLAB_VOLUME-xxxxx # 创建挂载点 mkdir /mnt/pan # 挂载硬盘 mount -o discard,defaults /dev/disk/by-id/scsi-0BUYVM_SLAB_VOLUME-xxxxx /mnt/pan # 开机自动挂载 echo \u0026#39;/dev/disk/by-id/scsi-0BUYVM_SLAB_VOLUME-xxxxx /mnt/pan ext4 defaults,nofail,discard 0 0\u0026#39; | sudo tee -a /etc/fstab 流媒体解锁查询 1 2 3 4 # 原版 bash \u0026lt;(curl -L -s check.unlock.media) # 添加解锁方式查询 bash \u0026lt;(curl -L -s media.ispvps.com) Azure 使用 root 登录 1 2 3 4 echo root:你的密码 |sudo chpasswd root sudo sed -i \u0026#39;s/^.*PermitRootLogin.*/PermitRootLogin yes/g\u0026#39; /etc/ssh/sshd_config; sudo sed -i \u0026#39;s/^.*PasswordAuthentication.*/PasswordAuthentication yes/g\u0026#39; /etc/ssh/sshd_config; sudo service sshd restart 工具箱 1 2 3 4 # 科技 Lion curl -sS -O https://raw.githubusercontent.com/kejilion/sh/main/kejilion.sh \u0026amp;\u0026amp; chmod +x kejilion.sh \u0026amp;\u0026amp; ./kejilion.sh # Bluesky wget -O box.sh https://raw.githubusercontent.com/BlueSkyXN/SKY-BOX/main/box.sh \u0026amp;\u0026amp; chmod +x box.sh \u0026amp;\u0026amp; clear \u0026amp;\u0026amp; ./box.sh ","date":"2020-08-17T00:00:00Z","image":"https://pic.imgdb.cn/item/65dc47829f345e8d030c9c98.webp","permalink":"http://localhost:5678/p/vps/","title":"VPS常用命令"},{"content":"前言 很多朋友很喜欢看 Netflix 的剧集，但是 Netflix 对于 IP 有一定的要求，很多广播 IP 无法访问，连首页都进不去。但是今年可能由于疫情，Netflix 放宽了 IP 审查，大部分广播 IP 都可以看大部分的剧集，但是部分剧集仍无法观看，所以特地详细了解了一下 Netflix 的剧集类型，并对 Netflix做一个简要介绍。\nNetflix 简介 公司简介 Netflix 是一家美国的技术和媒体服务提供商及制作公司，总部位于 California 的 Los Gatos，主要提供流媒体服务，一般简称奈飞。\nNetflix 于1997年在 California 的 Scotts Valley 成立，公司最初的商业模式包括 DVD 销售和邮寄租赁，之后放弃了销售，2007年引入流媒体服务，2013年进入内容制造行业，推出首个系列剧集 House of cards 即 纸牌屋 获得巨大成功。截止到2016年，发行了大约126部原创电视剧和电影。\n如今 Netflix 在全球大部分国家和地区运营，截至2020年4月，Netflix 在全球范围内拥有超过1.93亿付费订阅，美国达7300万。\n特点 Netflix 采用订阅的方式，如果你不付款，根本连首页都无法进去。但是如果你订阅了套餐，你可以享受两个最基本观影体验：\n平台所有视频都可以无障碍播放，不需要各种点播券。 观影全程无广告，不会有各种 VIP 专享广告。 在账户方面，Netflix 也很灵活，有试用阶段，还可以多用户观看。\nNetflix 提供了一个月的免费试用。你可以首先注册一个账户，绑定你的付款卡片，然后你可以随时删除卡片防止扣费，因此市面上出现了很多月抛账户。 最高级的套餐可以创建5个用户，同时4个屏幕同时在线观看。 Netflix上的视频码率很高，有很好的清晰度，720P视频往往比很多服务商所谓的蓝光都要清晰 Chrome 浏览器上最高只有720P的清晰度，但对大部分人来说足够，也可采用插件解锁1080P\n订阅 Netflix 的订阅套餐分为三档，基本、标准、高级，具体内容如下(以美区为例)\n基本 标准 高级 月费 $8.99 $12.99 $15.99 同时播放的屏幕数量 1 2 4 可存放下载内容的手机或平板数量 1 2 4 无限量电影、电视节目畅享 √ √ √ 在笔记本、平板、手机观看 √ √ √ 提供高清 √ √ 提供超高清 √ 观看技巧 观看 Netflix 只需要明白两点\n不同的地区，不同的价格\n不同的地区，不同的观看内容\n第一次在什么地区付费，之后的就以该地区的价格续费\n以什么地区的 IP 访问，就呈现什么地区的内容\n因此，选择价格较低的地区进行付费，再以其他地区的 IP 访问观看即可。\n当然你也可以反向操作\n剧集类型 Netflix 的剧集分类如下\n自制剧集 原创剧集 与漫威签约剧集 拥有网络流媒体平台独播权剧集 买断剧集 简单的区分标志就是视频左上方有没有红色的大写字母N，有就是自制剧集，没有就是买断剧集。\n从上图也可以简单的看出不同\n自制剧 自制剧片源开头带有 NETFLIX ORIGINAL SERIES，同时主要有三类\n原创剧集 通常不限制代理，都可以观看，通常满足以下条件\n网络首发和播放平台为 Netflix 前期投资，出品方为 Netflix 制作公司为第三方公司 通常为非美国本土电视剧 比如《暗黑》、《怪奇物语》、《毒枭》\n与漫威签约的剧集\n不限制代理，都可以观看。如《夜魔侠》、《铁拳侠》等等。\n有网络流媒体平台独播权的剧集\n首播于有线电视频道，但电视频道取消的剧集，买入后自行继续创作。\n如首播于 Antena 3 的《纸房子》。 与有线电视同时或延时播出的剧。\n如 AMC 频道的《风骚律师》。 首播于有线电视频道，而后买入播完的剧集，以此来持续创作\n如首播于 Channel 4 的《黑镜》\n首播于 BBC 的《纸牌屋》。 买断剧 买断剧比较简单，曾经在有线电视频道播出，后被 Netflix买入版权，获得独家流媒体播放权，比如经典的\n绝命毒师 越狱 ······ 这部分内容原文如下，如有侵权，请联系我删除。[原文][1]\n总结 Netflix 是一个优秀的流媒体点播平台，国外有很多诸如此类的流媒体平台如 HBO,Disney,Hulu，虽然流畅的使用需要付出一定的精力或者财力，但是这种舒适的观影体验值得我们去付出。\n割韭菜的行为是无法长久的，用户的品味与要求在不断提高，只有提供给用户优质的服务，才能在激烈的竞争中得以生存。\n参考 剧集类型来源：1 ","date":"2020-08-10T00:00:00Z","image":"https://pic.imgdb.cn/item/65dc49059f345e8d03107123.webp","permalink":"http://localhost:5678/p/netflix-info/","title":"Netflix剧集介绍"},{"content":"1. 命名和循环 1.1 命名规则 项目：以数字加名称表示\n1 01_python基础 文件：不能以数字开头，以字母、数字、下划线组合而成\n1 py_01_python基础.py 1.2 格式化输出 以%表示\n1 2 3 %s #字符串 %d #有符号十进制整数 %f #浮点数 1.3 循环 格式 1 2 3 4 while条件: 条件满足做的事情1 条件满足做的事情2 ...省略... 1.4 break 和 continue break:某一条件满足时，退出循环，不再执行后续代码 continue:某一条件满足时，不执行后续重复代码 区别:break 退出整个循环，continue 结束本次循环，开始下次循环 如果使用 continue 需要首先确认是否需要对循环计数修改\n2. 循环打印九九乘法表 通过 while 的嵌套实现简单的九九乘法表打印\n2.1 思路 首先定义一个变量控制行，初始值为1，确定行的循环条件 再定义一个变量控制列，始值1，确定列的循环条件\n2.2 代码 1 2 3 4 5 6 7 8 row = 1 while row \u0026lt;= 9: col = 1 while col \u0026lt;= row: print(\u0026#34;%d * %d = %d\u0026#34; % (row, col, row*col), end=\u0026#34;\\t\u0026#34;) col += 1 print(\u0026#34;\u0026#34;) row += 1 2.3 注意 print 函数有一个参数 end ，默认的值为\\n，因此 print 输出内容后会默认在文本后增加换行，修改参数值可以添加特定内容\n1 2 \u0026#34; , end=\u0026#34;\u0026#34;\u0026#34; # 双引号内即为可以更换的特定内容 print(\u0026#34;\u0026#34;) # 单纯的换行 2.4 结果转义字符 可以使用转义字符\\对打印结果进行规范\n1 2 3 \\t # 输出文本时垂直方向保持对齐 \\n # 换行 \\\u0026#34; # 输出双引号 3. 函数 3.1 格式 1 2 3 4 5 def 函数名(): 封装代码 ...... 注意 函数名不能以数字开头 不能与关键字重名\n定义函数后只表示封装代码定义函数后只表示封装代码\n如果不调用函数，函数不会执行\n函数调用必须在定义函数之后，否则会报错\n3.2 函数注释 函数定义上方保留两个空行（包含注释）\n定义函数的下方，连续三个引号内部进行注释\n在调用函数的位置，使用ctrl+Q可快速查看\n3.3 函数参数 在函数名的小括号内部填写参数 多个参数使用,分隔 示例 1 2 3 4 5 def sum_2_num(num1, num2): \u0026#34;\u0026#34;\u0026#34;两数字求和\u0026#34;\u0026#34;\u0026#34; result = num1 + num2 print(\u0026#34;%d + %d = %d\u0026#34; % (num1, num2,result)) sum_2_num(1, 2) 形参和实参 **形参：**定义函数时，小括号内的参数，用来接收参数，在函数内部作为变量使用\n**实参：**调用函数时，小括号内的参数，用来把数据传递到函数内部\n3.4 函数的返回值 返回值是函数完成工作后，最后给调用者的一个结果 在函数中使用 return 关键字返回结果 调用函数的一方，可以使用变量接收函数的返回结果 示例 1 2 3 4 5 6 def sum_2_num(num1, num2): result = num2 + num2 return result # 使用变量接收函数调用的结果 sum_result = sum_2_num(10, 20) print(\u0026#34;计算结果：%d\u0026#34; % sum_result) 注意 注意:return 表示返回，后续的代码都不会被执行\n3.5 函数的嵌套调用 一个函数里又调用了另一个函数，就是嵌套调用 打印多条分割线 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def print_line(char, times): \u0026#34;\u0026#34;\u0026#34;打印分割线\u0026#34;\u0026#34;\u0026#34; print(char * times) def print_lines(char, times): \u0026#34;\u0026#34;\u0026#34;打印多行分割线 :param char:分割线使用的分割字符 :param times:分割线重复次数 \u0026#34;\u0026#34;\u0026#34; row = 0 while row \u0026lt; 5: print_line(char, times) row += 1 print_lines(\u0026#34;-\u0026#34;, 50) 针对需求变化，要冷静思考，不要轻易更改已经完成的、能够正常执行的函数\n4. 高级变量类型 列表 元组 字典 字符串 Python 中数据类型分为数字型和非数字型变量\n非数字型变量可进行如下操作：\n都是一个序列sequence，也可以理解为容器 取值[ ] 遍历 for in 计算长度、最大值最小值、比较、删除 链接 +和重复 * 切片 关键字、函数、方法的区别\n关键字 关键字是 Python 内置的具有特殊意义的标识符 关键字不需要使用括号，函数和方法需要 Python 中有 33 个关键字 函数 函数封装了独立功能，可以直接调用 函数需要死记硬背 方法 方法和函数类似，同样是封装了独立功能 对象.方法名(参数) 方法需要对象来调用，表示针对这个对象的操作 4.1 列表 List 是Python 中使用最频繁的，其他语言中通常叫数组\n用 [ ]定义，数据间用 ,分割\n列表的索引从 0 开始\n索引就是列表中的位置序号，又被称为下标 从列表取值超出索引范围会报错\n取值：变量[索引]\n列表常用方法 定义空的列表，如 name_list = []\n输入 name_list. 按下 TAB 键，可以看到可用的方法\n常用方法 用途 索引 .index 取值和索引 增加 .append 列表末尾增加数据 .insert 指定索引增加数据 .extend 把另一个列表完整内容追加都列表末尾 删除 .remove 删除列表指定的出现的第一个数据 .pop 默认删除列表最后一个元素 .clear 清空列表 统计 .count 计算列表某一元素出现的次数 排序 .sort 升序/降序 .reverse 逆序（反转）列表 使用 del 关键字同样可以删除列表中的元素 本质是将变量从内存中删除 如果使用 del 关键字将变量从内存中删除，后续代码不能使用这个变量 使用 len 关键字可以计算列表总的元素个数 循环遍历 遍历就是从头到尾依次从列表中获取数据 在循环内部针对每一个元素，执行相同的操作 Python 中提供迭代遍历iteration 使用 for 就能实现迭代遍历 1 2 for 循环内部使用的变量 in 列表: code 使用场景 列表存储相同类型的数据\n通过迭代遍历，在循环体内部对每一个元素执行相同的操作\nPython 列表中可以存储不同类型的数据\n4.2 元组 Tuple 与列表类似，不同之处在于元组的元素不能修改 多个元素组成的序列 在 Python 开发中，有特殊的应用场景 用于存储一串信息，数据间用, 分隔 元组用 () 定义，索引从 0 开始 创建空元组: empty_tuple = () 当元组中只有一个元素时，需要在元素后加入, 元组常用操作 .index\n.count\n循环遍历 1 2 for 循环内部使用的变量 in 元组: code 在 Python 中，可以使用 for 遍历所有非数字类型变量：列表、元组、字典、字符串\n在实际开发中，除非能够确认元组数据中的数据类型，否则针对元组的循环遍历需求并不是很多\n应用场景 函数的参数和返回值，一个函数可以接收任意多个参数，或者一次返回多个数据 格式字符串，格式化字符串后的() 本质就是一个元组 让列表不可被修改，保护数据安全 元组和列表转换 使用list 函数可以把元组转换成列表\n1 list(元组) 使用 tuple 函数可以把列表转换成元组\n1 tuple(列表) 4.3 字典 dictionary 是除列表以外 Python 中最灵活的数据类型 字典同样可以用来存储多个数据 通常用于描述一个物体的相关信息 和列表的区别 列表是有序的对象集合 字典是无序的对象集合 字典用 {} 定义 字典使用 键值 存储数据，键值对儿之间用 ,隔开 键 key 是索引 值 value 是数据 键和值之间使用 : 分隔 键必须是唯一的 值可以取任何数据类型，但键只能使用字符串、数字或元组 1 2 3 4 5 6 xiaoming = {\u0026#34;name\u0026#34;: \u0026#34;小明\u0026#34;, \u0026#34;age\u0026#34;: 18, \u0026#34;gender\u0026#34;: True, \u0026#34;height\u0026#34;: 1.75, \u0026#34;weight\u0026#34;: 75.5} print(xiaoming) 使用 print 函数输出顺序和定义顺序通常不一样\n基本使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 dict.keys() # 所有 key 列表 dict.values() # 所有 value 列表 dict.items() # 所有(key, value)元组列表 dict[key] # 从字典中取值，key 不存在会报错 dict.get(key) # 可以从字典中取值，key 不存在会报错 del dict[key] # 删除指定键值对，key 不存在会报错 dict.pop(key) # 删除指定键值对，key 不存在会报错 dict.popitem() # 随机删除一个键值对 dict.cleat # 清空字典 dict[key] = value # 如果 key 存在修改数据，不存在新建键值对 dict.setdefault(key, value) # 如果 key 存在修改数据，不存在新建键值对 dict.update(dict2) # 将字典2合并到字典，如果被合并的字典包含已存在的键 值对，会覆盖原有的键值对 循环遍历 1 2 3 # k 是每一次循环中获取到的键值对的 key for k in dict: code 应用场景 使用多个键值对，存储描述一个物体的相关信息 将多个字典放在一个列表中，再进行遍历，在循环体内部针对每一个字典进行相同的处理 4.4 字符串 表示文本的数据类型 Python 中可以用一对双引号或者一对单引号定义字符串 大多数编程语言使用双引号定义字符串 Python 中如果字符串内部需要使用双引号，定义字符串用单引号 可以使用索引获得一个字符串中中指定位置的字符，索引从 0 开始 也可以使用 for 循环遍历字符串中每一个字符 常用操作 len 函数 .count 方法 .index 方法 字符串方法 判断类型 方法 说明 string.isspace() 如果 string 中只包含空格，返回 True string.isalnum() 如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True string.isalpha() 如果 string 至少有一个字符并且所有字符都是字母则返回 True string.isdecimal() 如果 string 只包含数字则返回 True，全角数字 string.isdigit() 如果 string 只包含数字则返回 True，全角数字、（1）、\\u00b2 （unicode 字符） string.isnumeric() 如果 string 只包含数字则返回 True，全角数字、汉字数字 string.istitle() 如果 string 是标题化的(每个标题的首字母大写)则返回 True string.islower() 如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True string.isupper() 如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True decimal digit numeric 三个方法中 decimal 方法只包含数字 digit 还可包含 unicode 字符，如带括号的 1 （1） numeric 方法还会包含中文数字，如：一 一般使用 decimal 方法 查找和替换 方法 说明 string.startswith(str) 检查字符串是否以 str 开头，是则返回 True string.endswith(str) 检查字符串是否以 str 结束，是则返回 True string.find(str, start=0, end=len(string)) 检查 str 是否包含在 string 中，如果 start 和 end 指定范围，则检查是否包含在指定范围，如果是返回开始的索引值，否则返回 -1 string.rfind(str, start=0, end=len(string)) 类似于 find 函数，不过是从右边查找 string.index(str, start=0, end=len(string)) 跟 find() 方法类似，只不过如果 str 不在string 会报错 string.rindex(str, start=0, end=len(string)) 类似于 index()，不过是从右边开始 string.replace(old_str, new_str, num=string.count(old)) 把 string 中的 old_str 替换成 new_str，如果 num 指定，则替换不超过 num 次 find 方法和 index 方法都可以查找指定字符串是否包含在字符串中，如果指定字符串不存在 find 方法返回 -1 index 方法会报错 replace 方法执行完成后会返回新的字符串，但不会修改原有字符串 大小写转换 方法 说明 string.capitalize() 把字符串的第一个字符大写 string.title() 把字符串的每个单词首字母大写 string.lower() 转换 string 中所有大写字符为小写 string.upper() 转换 string 中所有小写字母为大写 string.swapcase() 翻转 string 中的大小写 文本对齐 方法 说明 string.ljust(width) 返回一个原字符串左对齐，并使用空格填充至长度 width 的新字符串 string.rjust(width) 返回一个原字符串右对齐，并使用空格填充至长度 width 的新字符串 string.center(width) 返回一个原字符居中，并使用空格填充至长度 width 的新字符串 去除空白字符 方法 说明 string.lstrip() 截掉 string 左边（开始）的空白字符 string.rstrip() 截掉 string 右边（末尾）的空白字符 string.strip() 截掉 string 左右两边的空白字符 拆分和连接 方法 说明 string.partition(str) 把字符串 string 分成一个 3 元素的元组（str 前面，str str 后面） string.rpartition(str) 类似于partition()方法，不过是从右边开始查找 string.split(str=\u0026quot;\u0026quot;, num) 以 str 为分隔符拆分 string ，如果 num 有指定值，则仅分隔 num+1 个子字符串，str 默认包含 \\t\\n\\r和空格 string.splitlines() 按照行(\\r, \\n, \\r\\n)分隔，返回一个包含各行作为元素的列表 string.join(seq) 以 string 作为分隔符，将 seq 中所有元素（的字符串表示）合并作为一个新的字符串 4.5 公共方法 Python 内置函数 函数 描述 备注 len(item) 计算容器中元素个数 del(item) 删除变量 del 有两种方式 max(item) 返回容器中元素的最大值 如果是字典，只针对 key 比较 min(item) 返回容器中元素的最小值 如果是字典，只针对 key 比较 cmp(item1, item2) 比较两个值，-1 小于/0 相等/ 1 大于 Python 3.x取消了 cmp函数 字符串比较符合以下规则：\u0026ldquo;0\u0026rdquo;\u0026lt;\u0026ldquo;A\u0026rdquo;\u0026lt;\u0026ldquo;a\u0026rdquo; 两个字典不能比较大小 切片 字符串[开始索引: 结束索引: 步长] 切片(slice)方法适用于字符串、列表、元组 切片使用索引值限定范围，从一个大的字符串中切出小的字符串 列表和元组是有序的集合，能通过索引值获取对应数据 字典是无序集合，通过键值对保存数据 指定的区间属于左闭右开型 [开始索引，结束索引) 从起始开始，到结束位的前一位 从头开始，开始索引数字可以省略，冒号不能省略 到末尾结束，结束索引数字可以省略，冒号不能省略 步长默认为 1 ，如果连续切片，数字和冒号都可以省略 运算符 运算符 Python 表达式 结果 描述 支持的数据类型 + [1, 2] + [3, 4] [1, 2, 3, 4] 合并 字符串、列表、元组 * [\u0026ldquo;Hi!\u0026rdquo;] * 4 [\u0026lsquo;Hi!\u0026rsquo;, \u0026lsquo;Hi!\u0026rsquo;, \u0026lsquo;Hi!\u0026rsquo;, \u0026lsquo;Hi!\u0026rsquo;] 重复 字符串、列表、元组 in 3 in (1, 2, 3) True 元素是否存在 字符串、列表、元组、字典 not in 4 not in (1, 2, 3) True 元素是否不存在 字符串、列表、元组、字典 \u0026gt; \u0026gt;= == \u0026lt; \u0026lt;= (1, 2, 3) \u0026lt; (2, 2, 3) True 元素比较 字符串、列表、元组 in 在对字典操作时，判断的是字典的键 in 和 not in 被称为成员运算符 完整的 for 循环语法 1 2 3 4 for 变量 in 集合: 循环体代码 else: 没有通过 break 退出循环，循环结束后，会执行的代码 循环体内部使用 break 关键字 else 以下的代码不会被执行 应用场景 在迭代遍历嵌套数据类型时，例如，一个列表包含多个字典 需求：判断某一个字典中是否存在指定的值 如果存在，提示并且退出循环 如果不存在，循环整体结束后，得到统一的提示 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 students = [ {\u0026#34;name\u0026#34;: \u0026#34;阿土\u0026#34;}, {\u0026#34;name\u0026#34;: \u0026#34;小美\u0026#34;}, ] # 在学员列表中搜索指定名字 find_name = \u0026#34;张三\u0026#34; for stu_dict in students: print(stu_dict) if stu_dict[\u0026#34;name\u0026#34;] == find_name: print(\u0026#34;找到了 %s\u0026#34; % find_name) break else: print(\u0026#34;没有找到%s\u0026#34; % find_name) 5. 语法进阶 5.1 变量的引用 变量和数据都保存在内存中 Python 中函数的参数传递以及返回值都是靠引用传递的 引用的概念 Python 中\n变量和数据分开存储 数据保存在内存中的一个位置 变量中保存着数据在内存中的地址 变量中记录数据地址的动作就叫引用 id() 函数可以查看变量中保存数据的内存地址 如果变量已经被定义，当给一个变量赋值的时候，本质上是修改了数据的引用\n变量不再对之前的数据引用 变量改为对新赋值的数据引用 函数的参数和返回值的传递 Python 中，函数的实参/返回值都是靠引用传递的\n调用函数，本质上是传递的实参/返回值****保存数据的引用，而不是实参保存的数据\n如果不定义变量接收函数的返回值，程序不会报错，但是无法获得返回结果\n5.2 可变类型不可变类型 不可变类型，内存中的数据不允许被修改 数字类型 int, bool, float, complex 字符串 str 元组 tuple 可变类型，内存中的数据可以被修改 列表 list 字典 dict 字典的 key 只能使用不可变数据类型 5.3 局部变量和全局变量 局部变量 局部变量是在函数内部定义的变量，只能在函数内部使用\n函数执行结束后，函数内部的局部变量，会被系统回收\n局部变量的生命周期\n生命周期是变量从被创建到被系统回收的过程 局部变量在函数执行时才会被创建 局部变量在生命周期内，可以用来存储函数内部临时使用到的数据 全局变量 全局变量是在函数外部定义的变量，所有函数都可以使用 其他开发语言中大多不推荐使用全局变量 不允许在函数内部修改全局变量 在函数内部重新赋值，只是定义了一个局部变量 希望修改全局变量的值 使用 global 声明变量即可 应该把模块中的所有全局变量定义到所有函数上方 全局变量命名前方应加 g_ 或 gl_ 等与局部变量区分 如果局部变量和局部变量名称相同，pycharm 会在局部变量下方显示灰色虚线 5.4 参数和返回值 函数根据有没有参数和有没有返回值可以自由组合，共 4 种\n无参数，无返回值 无参数，有返回值 有参数，无返回值 有参数，有返回值 如果函数内部处理数据不确定，可以将外界数据以参数形式传递给函数 如果希望函数执行完成后，向外界汇报结果，可以增加返回值 函数的返回值-多个返回值 元组可以包含多个数据，因此可以使用元组让函数一次返回多个值\n如果函数返回的结果是元组，小括号可以省略\n如果函数的返回值类型是元组，需要单独处理元组中的元素可以使用多个变量，一次接收函数的返回结果\n注意：使用此方法，变量的个数应该和元组中元素的个数保持一致 问题：交换两个变量的值?\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 a = 6 b = 100 # 1. 使用其他变量 # c = a # a = b # b = c # 2. 不使用其他变量 # a = a + b # b = a - b # a = a - b # 3. Python 专有 # a, b = (b, a) # 元组小括号可省略 a, b = b, a print(a) print(b) 函数的参数 不可变和可变参数 在函数内部，针对参数使用赋值语句不会影响调用函数时传递的实参变量\n无论传递的参数是可变还是不可变\n在函数内部，针对参数使用赋值语句,不会修改外部实参变量\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def demo(num, num_list): print(\u0026#34;函数内部的代码\u0026#34;) # 在函数内部，针对参数使用赋值语句,不会修改外部实参变量 num = 100 num_list = [1, 2, 3] print(num) print(num_list) print(\u0026#34;函数执行完成\u0026#34;) gl_num = 99 gl_list = [4, 5, 6] demo(gl_num, gl_list) print(gl_num) 如果传递的参数是可变类型，在函数内部，使用方法修改了数据的内容，同样会影响到外部数据 1 2 3 4 5 6 7 8 9 def demo(num_list): print(\u0026#34;函数内部代码\u0026#34;) num_list.append(9) print(num_list) print(\u0026#34;函数执行完成\u0026#34;) gl_list = [1, 2, 3] demo(gl_list) print(gl_list) 问题：\u0026ndash; +=\n在 Python 中，列表变量调用 += 本质上是在执行列表变量的 extend 方法，不会修改变量的引用\n缺省参数 定义函数时，可以给某个参数指定一个默认值，具有默认值的参数就叫做缺省参数\n带有默认值的缺省参数必须在参数列表末尾\n如果有多个缺省值，需要指定参数名\n多值参数 有可能需要一个函数能够处理的参数个数是不确定的，这时使用多指参数 Python 中有两种多值参数 参数名前增加一个 *，可以接收元组 参数名前增加两个 *，可以接收字典 一般在给多指参数命名时，习惯使用以下两个名字 *args \u0026ndash;存放元组参数，前面一个* **kwargs \u0026ndash;存放字典参数，前面两个* args 是 arguments 的缩写，有变量的含义 kw 是 keyword 的缩写，kwargs 可以记忆键值对参数 案例：计算任意多个数字的和\n1 2 3 4 5 6 7 8 9 10 def sum_nums(*args): num = 0 # 循环遍历 for n in args: num += n return num result = sum_nums(1, 2, 3, 4, 5) print(result) 元组和字典的拆包 在调用带有多值参数的函数时，如果希望 将一个元组变量，直接传递给 args 将一个字典变量，直接传递给 kwargs 可以使用拆包，简化参数的传递，拆包的方式是： 在元组变量前，增加一个 * 在字典变量前，增加两个 * 5.4递归 递归：函数调用自身\n递归的特点 一个函数内部调用自己 函数内部可以调用其他函数，也可以在内部调用自己 代码特点\n函数内部的代码是相同的，只是针对参数不同，处理的结果不同 当参数满足一个条件时，函数不再执行 被称为递归的出口，否则会造成死循环 案例\u0026ndash;计算数字累加 定义一个函数 sum_numbers 能够接受一个 num 的整体参数 计算 1 + 2 ... num 的结果 1 2 3 4 5 6 7 8 9 10 11 12 13 def sum_numbers(num): # 1. 出口 if num == 1: return 1 # 2. 数字累加 num + (num - 1) # 假设 sum_numbers 能处理 1到 num -1 的累加 temp =sum_numbers(num - 1) return num + temp result = sum_numbers(100) print(result) ","date":"2020-08-10T00:00:00Z","image":"https://pic.imgdb.cn/item/65dc479d9f345e8d030ce5ff.webp","permalink":"http://localhost:5678/p/python01/","title":"Python学习笔记01-基础"}]